
Soil_Irrigation_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  000041aa  0000423e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008000a6  008000a6  00004284  2**0
                  ALLOC
  3 .stab         00003f84  00000000  00000000  00004284  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002bc9  00000000  00000000  00008208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000add1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000af11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b081  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ccca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000dbb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e964  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000eac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ed51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f51f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <__vector_1>
       8:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__vector_2>
       c:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__vector_3>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__vector_10>
      2c:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <__vector_11>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__pack_f+0xba>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	10 e0       	ldi	r17, 0x00	; 0
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ea ea       	ldi	r30, 0xAA	; 170
     162:	f1 e4       	ldi	r31, 0x41	; 65
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a6 3a       	cpi	r26, 0xA6	; 166
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	10 e0       	ldi	r17, 0x00	; 0
     172:	a6 ea       	ldi	r26, 0xA6	; 166
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ac 3b       	cpi	r26, 0xBC	; 188
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <main>
     184:	0c 94 d3 20 	jmp	0x41a6	; 0x41a6 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 c6 03 	call	0x78c	; 0x78c <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 26 04 	call	0x84c	; 0x84c <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 26 04 	call	0x84c	; 0x84c <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 10 1e 	jmp	0x3c20	; 0x3c20 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	a7 e9       	ldi	r26, 0x97	; 151
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 2c 1e 	jmp	0x3c58	; 0x3c58 <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 1c 1e 	jmp	0x3c38	; 0x3c38 <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 38 1e 	jmp	0x3c70	; 0x3c70 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 1c 1e 	jmp	0x3c38	; 0x3c38 <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 38 1e 	jmp	0x3c70	; 0x3c70 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 10 1e 	jmp	0x3c20	; 0x3c20 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	87 e9       	ldi	r24, 0x97	; 151
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 2c 1e 	jmp	0x3c58	; 0x3c58 <__epilogue_restores__>

0000072c <__gtsf2>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 1c 1e 	jmp	0x3c38	; 0x3c38 <__prologue_saves__+0x18>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	89 e0       	ldi	r24, 0x09	; 9
     74a:	e8 2e       	mov	r14, r24
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     76c:	89 85       	ldd	r24, Y+9	; 0x09
     76e:	82 30       	cpi	r24, 0x02	; 2
     770:	40 f0       	brcs	.+16     	; 0x782 <__gtsf2+0x56>
     772:	89 89       	ldd	r24, Y+17	; 0x11
     774:	82 30       	cpi	r24, 0x02	; 2
     776:	28 f0       	brcs	.+10     	; 0x782 <__gtsf2+0x56>
     778:	c7 01       	movw	r24, r14
     77a:	b8 01       	movw	r22, r16
     77c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fpcmp_parts_f>
     780:	01 c0       	rjmp	.+2      	; 0x784 <__gtsf2+0x58>
     782:	8f ef       	ldi	r24, 0xFF	; 255
     784:	68 96       	adiw	r28, 0x18	; 24
     786:	e6 e0       	ldi	r30, 0x06	; 6
     788:	0c 94 38 1e 	jmp	0x3c70	; 0x3c70 <__epilogue_restores__+0x18>

0000078c <__gesf2>:
     78c:	a8 e1       	ldi	r26, 0x18	; 24
     78e:	b0 e0       	ldi	r27, 0x00	; 0
     790:	ec ec       	ldi	r30, 0xCC	; 204
     792:	f3 e0       	ldi	r31, 0x03	; 3
     794:	0c 94 1c 1e 	jmp	0x3c38	; 0x3c38 <__prologue_saves__+0x18>
     798:	69 83       	std	Y+1, r22	; 0x01
     79a:	7a 83       	std	Y+2, r23	; 0x02
     79c:	8b 83       	std	Y+3, r24	; 0x03
     79e:	9c 83       	std	Y+4, r25	; 0x04
     7a0:	2d 83       	std	Y+5, r18	; 0x05
     7a2:	3e 83       	std	Y+6, r19	; 0x06
     7a4:	4f 83       	std	Y+7, r20	; 0x07
     7a6:	58 87       	std	Y+8, r21	; 0x08
     7a8:	89 e0       	ldi	r24, 0x09	; 9
     7aa:	e8 2e       	mov	r14, r24
     7ac:	f1 2c       	mov	r15, r1
     7ae:	ec 0e       	add	r14, r28
     7b0:	fd 1e       	adc	r15, r29
     7b2:	ce 01       	movw	r24, r28
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	b7 01       	movw	r22, r14
     7b8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     7bc:	8e 01       	movw	r16, r28
     7be:	0f 5e       	subi	r16, 0xEF	; 239
     7c0:	1f 4f       	sbci	r17, 0xFF	; 255
     7c2:	ce 01       	movw	r24, r28
     7c4:	05 96       	adiw	r24, 0x05	; 5
     7c6:	b8 01       	movw	r22, r16
     7c8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     7cc:	89 85       	ldd	r24, Y+9	; 0x09
     7ce:	82 30       	cpi	r24, 0x02	; 2
     7d0:	40 f0       	brcs	.+16     	; 0x7e2 <__gesf2+0x56>
     7d2:	89 89       	ldd	r24, Y+17	; 0x11
     7d4:	82 30       	cpi	r24, 0x02	; 2
     7d6:	28 f0       	brcs	.+10     	; 0x7e2 <__gesf2+0x56>
     7d8:	c7 01       	movw	r24, r14
     7da:	b8 01       	movw	r22, r16
     7dc:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fpcmp_parts_f>
     7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <__gesf2+0x58>
     7e2:	8f ef       	ldi	r24, 0xFF	; 255
     7e4:	68 96       	adiw	r28, 0x18	; 24
     7e6:	e6 e0       	ldi	r30, 0x06	; 6
     7e8:	0c 94 38 1e 	jmp	0x3c70	; 0x3c70 <__epilogue_restores__+0x18>

000007ec <__ltsf2>:
     7ec:	a8 e1       	ldi	r26, 0x18	; 24
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	ec ef       	ldi	r30, 0xFC	; 252
     7f2:	f3 e0       	ldi	r31, 0x03	; 3
     7f4:	0c 94 1c 1e 	jmp	0x3c38	; 0x3c38 <__prologue_saves__+0x18>
     7f8:	69 83       	std	Y+1, r22	; 0x01
     7fa:	7a 83       	std	Y+2, r23	; 0x02
     7fc:	8b 83       	std	Y+3, r24	; 0x03
     7fe:	9c 83       	std	Y+4, r25	; 0x04
     800:	2d 83       	std	Y+5, r18	; 0x05
     802:	3e 83       	std	Y+6, r19	; 0x06
     804:	4f 83       	std	Y+7, r20	; 0x07
     806:	58 87       	std	Y+8, r21	; 0x08
     808:	89 e0       	ldi	r24, 0x09	; 9
     80a:	e8 2e       	mov	r14, r24
     80c:	f1 2c       	mov	r15, r1
     80e:	ec 0e       	add	r14, r28
     810:	fd 1e       	adc	r15, r29
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	b7 01       	movw	r22, r14
     818:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     81c:	8e 01       	movw	r16, r28
     81e:	0f 5e       	subi	r16, 0xEF	; 239
     820:	1f 4f       	sbci	r17, 0xFF	; 255
     822:	ce 01       	movw	r24, r28
     824:	05 96       	adiw	r24, 0x05	; 5
     826:	b8 01       	movw	r22, r16
     828:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     82c:	89 85       	ldd	r24, Y+9	; 0x09
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	40 f0       	brcs	.+16     	; 0x842 <__ltsf2+0x56>
     832:	89 89       	ldd	r24, Y+17	; 0x11
     834:	82 30       	cpi	r24, 0x02	; 2
     836:	28 f0       	brcs	.+10     	; 0x842 <__ltsf2+0x56>
     838:	c7 01       	movw	r24, r14
     83a:	b8 01       	movw	r22, r16
     83c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fpcmp_parts_f>
     840:	01 c0       	rjmp	.+2      	; 0x844 <__ltsf2+0x58>
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	68 96       	adiw	r28, 0x18	; 24
     846:	e6 e0       	ldi	r30, 0x06	; 6
     848:	0c 94 38 1e 	jmp	0x3c70	; 0x3c70 <__epilogue_restores__+0x18>

0000084c <__fixsfsi>:
     84c:	ac e0       	ldi	r26, 0x0C	; 12
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	ec e2       	ldi	r30, 0x2C	; 44
     852:	f4 e0       	ldi	r31, 0x04	; 4
     854:	0c 94 20 1e 	jmp	0x3c40	; 0x3c40 <__prologue_saves__+0x20>
     858:	69 83       	std	Y+1, r22	; 0x01
     85a:	7a 83       	std	Y+2, r23	; 0x02
     85c:	8b 83       	std	Y+3, r24	; 0x03
     85e:	9c 83       	std	Y+4, r25	; 0x04
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	be 01       	movw	r22, r28
     866:	6b 5f       	subi	r22, 0xFB	; 251
     868:	7f 4f       	sbci	r23, 0xFF	; 255
     86a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     86e:	8d 81       	ldd	r24, Y+5	; 0x05
     870:	82 30       	cpi	r24, 0x02	; 2
     872:	61 f1       	breq	.+88     	; 0x8cc <__stack+0x6d>
     874:	82 30       	cpi	r24, 0x02	; 2
     876:	50 f1       	brcs	.+84     	; 0x8cc <__stack+0x6d>
     878:	84 30       	cpi	r24, 0x04	; 4
     87a:	21 f4       	brne	.+8      	; 0x884 <__stack+0x25>
     87c:	8e 81       	ldd	r24, Y+6	; 0x06
     87e:	88 23       	and	r24, r24
     880:	51 f1       	breq	.+84     	; 0x8d6 <__stack+0x77>
     882:	2e c0       	rjmp	.+92     	; 0x8e0 <__stack+0x81>
     884:	2f 81       	ldd	r18, Y+7	; 0x07
     886:	38 85       	ldd	r19, Y+8	; 0x08
     888:	37 fd       	sbrc	r19, 7
     88a:	20 c0       	rjmp	.+64     	; 0x8cc <__stack+0x6d>
     88c:	6e 81       	ldd	r22, Y+6	; 0x06
     88e:	2f 31       	cpi	r18, 0x1F	; 31
     890:	31 05       	cpc	r19, r1
     892:	1c f0       	brlt	.+6      	; 0x89a <__stack+0x3b>
     894:	66 23       	and	r22, r22
     896:	f9 f0       	breq	.+62     	; 0x8d6 <__stack+0x77>
     898:	23 c0       	rjmp	.+70     	; 0x8e0 <__stack+0x81>
     89a:	8e e1       	ldi	r24, 0x1E	; 30
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	82 1b       	sub	r24, r18
     8a0:	93 0b       	sbc	r25, r19
     8a2:	29 85       	ldd	r18, Y+9	; 0x09
     8a4:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a6:	4b 85       	ldd	r20, Y+11	; 0x0b
     8a8:	5c 85       	ldd	r21, Y+12	; 0x0c
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__stack+0x55>
     8ac:	56 95       	lsr	r21
     8ae:	47 95       	ror	r20
     8b0:	37 95       	ror	r19
     8b2:	27 95       	ror	r18
     8b4:	8a 95       	dec	r24
     8b6:	d2 f7       	brpl	.-12     	; 0x8ac <__stack+0x4d>
     8b8:	66 23       	and	r22, r22
     8ba:	b1 f0       	breq	.+44     	; 0x8e8 <__stack+0x89>
     8bc:	50 95       	com	r21
     8be:	40 95       	com	r20
     8c0:	30 95       	com	r19
     8c2:	21 95       	neg	r18
     8c4:	3f 4f       	sbci	r19, 0xFF	; 255
     8c6:	4f 4f       	sbci	r20, 0xFF	; 255
     8c8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ca:	0e c0       	rjmp	.+28     	; 0x8e8 <__stack+0x89>
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	09 c0       	rjmp	.+18     	; 0x8e8 <__stack+0x89>
     8d6:	2f ef       	ldi	r18, 0xFF	; 255
     8d8:	3f ef       	ldi	r19, 0xFF	; 255
     8da:	4f ef       	ldi	r20, 0xFF	; 255
     8dc:	5f e7       	ldi	r21, 0x7F	; 127
     8de:	04 c0       	rjmp	.+8      	; 0x8e8 <__stack+0x89>
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	50 e8       	ldi	r21, 0x80	; 128
     8e8:	b9 01       	movw	r22, r18
     8ea:	ca 01       	movw	r24, r20
     8ec:	2c 96       	adiw	r28, 0x0c	; 12
     8ee:	e2 e0       	ldi	r30, 0x02	; 2
     8f0:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__epilogue_restores__+0x20>

000008f4 <__pack_f>:
     8f4:	df 92       	push	r13
     8f6:	ef 92       	push	r14
     8f8:	ff 92       	push	r15
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	fc 01       	movw	r30, r24
     900:	e4 80       	ldd	r14, Z+4	; 0x04
     902:	f5 80       	ldd	r15, Z+5	; 0x05
     904:	06 81       	ldd	r16, Z+6	; 0x06
     906:	17 81       	ldd	r17, Z+7	; 0x07
     908:	d1 80       	ldd	r13, Z+1	; 0x01
     90a:	80 81       	ld	r24, Z
     90c:	82 30       	cpi	r24, 0x02	; 2
     90e:	48 f4       	brcc	.+18     	; 0x922 <__pack_f+0x2e>
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	a0 e1       	ldi	r26, 0x10	; 16
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	e8 2a       	or	r14, r24
     91a:	f9 2a       	or	r15, r25
     91c:	0a 2b       	or	r16, r26
     91e:	1b 2b       	or	r17, r27
     920:	a5 c0       	rjmp	.+330    	; 0xa6c <__pack_f+0x178>
     922:	84 30       	cpi	r24, 0x04	; 4
     924:	09 f4       	brne	.+2      	; 0x928 <__pack_f+0x34>
     926:	9f c0       	rjmp	.+318    	; 0xa66 <__pack_f+0x172>
     928:	82 30       	cpi	r24, 0x02	; 2
     92a:	21 f4       	brne	.+8      	; 0x934 <__pack_f+0x40>
     92c:	ee 24       	eor	r14, r14
     92e:	ff 24       	eor	r15, r15
     930:	87 01       	movw	r16, r14
     932:	05 c0       	rjmp	.+10     	; 0x93e <__pack_f+0x4a>
     934:	e1 14       	cp	r14, r1
     936:	f1 04       	cpc	r15, r1
     938:	01 05       	cpc	r16, r1
     93a:	11 05       	cpc	r17, r1
     93c:	19 f4       	brne	.+6      	; 0x944 <__pack_f+0x50>
     93e:	e0 e0       	ldi	r30, 0x00	; 0
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	96 c0       	rjmp	.+300    	; 0xa70 <__pack_f+0x17c>
     944:	62 81       	ldd	r22, Z+2	; 0x02
     946:	73 81       	ldd	r23, Z+3	; 0x03
     948:	9f ef       	ldi	r25, 0xFF	; 255
     94a:	62 38       	cpi	r22, 0x82	; 130
     94c:	79 07       	cpc	r23, r25
     94e:	0c f0       	brlt	.+2      	; 0x952 <__pack_f+0x5e>
     950:	5b c0       	rjmp	.+182    	; 0xa08 <__pack_f+0x114>
     952:	22 e8       	ldi	r18, 0x82	; 130
     954:	3f ef       	ldi	r19, 0xFF	; 255
     956:	26 1b       	sub	r18, r22
     958:	37 0b       	sbc	r19, r23
     95a:	2a 31       	cpi	r18, 0x1A	; 26
     95c:	31 05       	cpc	r19, r1
     95e:	2c f0       	brlt	.+10     	; 0x96a <__pack_f+0x76>
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	40 e0       	ldi	r20, 0x00	; 0
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	2a c0       	rjmp	.+84     	; 0x9be <__pack_f+0xca>
     96a:	b8 01       	movw	r22, r16
     96c:	a7 01       	movw	r20, r14
     96e:	02 2e       	mov	r0, r18
     970:	04 c0       	rjmp	.+8      	; 0x97a <__pack_f+0x86>
     972:	76 95       	lsr	r23
     974:	67 95       	ror	r22
     976:	57 95       	ror	r21
     978:	47 95       	ror	r20
     97a:	0a 94       	dec	r0
     97c:	d2 f7       	brpl	.-12     	; 0x972 <__pack_f+0x7e>
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	a0 e0       	ldi	r26, 0x00	; 0
     984:	b0 e0       	ldi	r27, 0x00	; 0
     986:	04 c0       	rjmp	.+8      	; 0x990 <__pack_f+0x9c>
     988:	88 0f       	add	r24, r24
     98a:	99 1f       	adc	r25, r25
     98c:	aa 1f       	adc	r26, r26
     98e:	bb 1f       	adc	r27, r27
     990:	2a 95       	dec	r18
     992:	d2 f7       	brpl	.-12     	; 0x988 <__pack_f+0x94>
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	a1 09       	sbc	r26, r1
     998:	b1 09       	sbc	r27, r1
     99a:	8e 21       	and	r24, r14
     99c:	9f 21       	and	r25, r15
     99e:	a0 23       	and	r26, r16
     9a0:	b1 23       	and	r27, r17
     9a2:	00 97       	sbiw	r24, 0x00	; 0
     9a4:	a1 05       	cpc	r26, r1
     9a6:	b1 05       	cpc	r27, r1
     9a8:	21 f0       	breq	.+8      	; 0x9b2 <__pack_f+0xbe>
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	a0 e0       	ldi	r26, 0x00	; 0
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	9a 01       	movw	r18, r20
     9b4:	ab 01       	movw	r20, r22
     9b6:	28 2b       	or	r18, r24
     9b8:	39 2b       	or	r19, r25
     9ba:	4a 2b       	or	r20, r26
     9bc:	5b 2b       	or	r21, r27
     9be:	da 01       	movw	r26, r20
     9c0:	c9 01       	movw	r24, r18
     9c2:	8f 77       	andi	r24, 0x7F	; 127
     9c4:	90 70       	andi	r25, 0x00	; 0
     9c6:	a0 70       	andi	r26, 0x00	; 0
     9c8:	b0 70       	andi	r27, 0x00	; 0
     9ca:	80 34       	cpi	r24, 0x40	; 64
     9cc:	91 05       	cpc	r25, r1
     9ce:	a1 05       	cpc	r26, r1
     9d0:	b1 05       	cpc	r27, r1
     9d2:	39 f4       	brne	.+14     	; 0x9e2 <__pack_f+0xee>
     9d4:	27 ff       	sbrs	r18, 7
     9d6:	09 c0       	rjmp	.+18     	; 0x9ea <__pack_f+0xf6>
     9d8:	20 5c       	subi	r18, 0xC0	; 192
     9da:	3f 4f       	sbci	r19, 0xFF	; 255
     9dc:	4f 4f       	sbci	r20, 0xFF	; 255
     9de:	5f 4f       	sbci	r21, 0xFF	; 255
     9e0:	04 c0       	rjmp	.+8      	; 0x9ea <__pack_f+0xf6>
     9e2:	21 5c       	subi	r18, 0xC1	; 193
     9e4:	3f 4f       	sbci	r19, 0xFF	; 255
     9e6:	4f 4f       	sbci	r20, 0xFF	; 255
     9e8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ea:	e0 e0       	ldi	r30, 0x00	; 0
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	20 30       	cpi	r18, 0x00	; 0
     9f0:	a0 e0       	ldi	r26, 0x00	; 0
     9f2:	3a 07       	cpc	r19, r26
     9f4:	a0 e0       	ldi	r26, 0x00	; 0
     9f6:	4a 07       	cpc	r20, r26
     9f8:	a0 e4       	ldi	r26, 0x40	; 64
     9fa:	5a 07       	cpc	r21, r26
     9fc:	10 f0       	brcs	.+4      	; 0xa02 <__pack_f+0x10e>
     9fe:	e1 e0       	ldi	r30, 0x01	; 1
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	79 01       	movw	r14, r18
     a04:	8a 01       	movw	r16, r20
     a06:	27 c0       	rjmp	.+78     	; 0xa56 <__pack_f+0x162>
     a08:	60 38       	cpi	r22, 0x80	; 128
     a0a:	71 05       	cpc	r23, r1
     a0c:	64 f5       	brge	.+88     	; 0xa66 <__pack_f+0x172>
     a0e:	fb 01       	movw	r30, r22
     a10:	e1 58       	subi	r30, 0x81	; 129
     a12:	ff 4f       	sbci	r31, 0xFF	; 255
     a14:	d8 01       	movw	r26, r16
     a16:	c7 01       	movw	r24, r14
     a18:	8f 77       	andi	r24, 0x7F	; 127
     a1a:	90 70       	andi	r25, 0x00	; 0
     a1c:	a0 70       	andi	r26, 0x00	; 0
     a1e:	b0 70       	andi	r27, 0x00	; 0
     a20:	80 34       	cpi	r24, 0x40	; 64
     a22:	91 05       	cpc	r25, r1
     a24:	a1 05       	cpc	r26, r1
     a26:	b1 05       	cpc	r27, r1
     a28:	39 f4       	brne	.+14     	; 0xa38 <__pack_f+0x144>
     a2a:	e7 fe       	sbrs	r14, 7
     a2c:	0d c0       	rjmp	.+26     	; 0xa48 <__pack_f+0x154>
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	a0 e0       	ldi	r26, 0x00	; 0
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <__pack_f+0x14c>
     a38:	8f e3       	ldi	r24, 0x3F	; 63
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	a0 e0       	ldi	r26, 0x00	; 0
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	e8 0e       	add	r14, r24
     a42:	f9 1e       	adc	r15, r25
     a44:	0a 1f       	adc	r16, r26
     a46:	1b 1f       	adc	r17, r27
     a48:	17 ff       	sbrs	r17, 7
     a4a:	05 c0       	rjmp	.+10     	; 0xa56 <__pack_f+0x162>
     a4c:	16 95       	lsr	r17
     a4e:	07 95       	ror	r16
     a50:	f7 94       	ror	r15
     a52:	e7 94       	ror	r14
     a54:	31 96       	adiw	r30, 0x01	; 1
     a56:	87 e0       	ldi	r24, 0x07	; 7
     a58:	16 95       	lsr	r17
     a5a:	07 95       	ror	r16
     a5c:	f7 94       	ror	r15
     a5e:	e7 94       	ror	r14
     a60:	8a 95       	dec	r24
     a62:	d1 f7       	brne	.-12     	; 0xa58 <__pack_f+0x164>
     a64:	05 c0       	rjmp	.+10     	; 0xa70 <__pack_f+0x17c>
     a66:	ee 24       	eor	r14, r14
     a68:	ff 24       	eor	r15, r15
     a6a:	87 01       	movw	r16, r14
     a6c:	ef ef       	ldi	r30, 0xFF	; 255
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	6e 2f       	mov	r22, r30
     a72:	67 95       	ror	r22
     a74:	66 27       	eor	r22, r22
     a76:	67 95       	ror	r22
     a78:	90 2f       	mov	r25, r16
     a7a:	9f 77       	andi	r25, 0x7F	; 127
     a7c:	d7 94       	ror	r13
     a7e:	dd 24       	eor	r13, r13
     a80:	d7 94       	ror	r13
     a82:	8e 2f       	mov	r24, r30
     a84:	86 95       	lsr	r24
     a86:	49 2f       	mov	r20, r25
     a88:	46 2b       	or	r20, r22
     a8a:	58 2f       	mov	r21, r24
     a8c:	5d 29       	or	r21, r13
     a8e:	b7 01       	movw	r22, r14
     a90:	ca 01       	movw	r24, r20
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	df 90       	pop	r13
     a9c:	08 95       	ret

00000a9e <__unpack_f>:
     a9e:	fc 01       	movw	r30, r24
     aa0:	db 01       	movw	r26, r22
     aa2:	40 81       	ld	r20, Z
     aa4:	51 81       	ldd	r21, Z+1	; 0x01
     aa6:	22 81       	ldd	r18, Z+2	; 0x02
     aa8:	62 2f       	mov	r22, r18
     aaa:	6f 77       	andi	r22, 0x7F	; 127
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	22 1f       	adc	r18, r18
     ab0:	22 27       	eor	r18, r18
     ab2:	22 1f       	adc	r18, r18
     ab4:	93 81       	ldd	r25, Z+3	; 0x03
     ab6:	89 2f       	mov	r24, r25
     ab8:	88 0f       	add	r24, r24
     aba:	82 2b       	or	r24, r18
     abc:	28 2f       	mov	r18, r24
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	99 1f       	adc	r25, r25
     ac2:	99 27       	eor	r25, r25
     ac4:	99 1f       	adc	r25, r25
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	9c 93       	st	X, r25
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	21 15       	cp	r18, r1
     ace:	31 05       	cpc	r19, r1
     ad0:	a9 f5       	brne	.+106    	; 0xb3c <__unpack_f+0x9e>
     ad2:	41 15       	cp	r20, r1
     ad4:	51 05       	cpc	r21, r1
     ad6:	61 05       	cpc	r22, r1
     ad8:	71 05       	cpc	r23, r1
     ada:	11 f4       	brne	.+4      	; 0xae0 <__unpack_f+0x42>
     adc:	82 e0       	ldi	r24, 0x02	; 2
     ade:	37 c0       	rjmp	.+110    	; 0xb4e <__unpack_f+0xb0>
     ae0:	82 e8       	ldi	r24, 0x82	; 130
     ae2:	9f ef       	ldi	r25, 0xFF	; 255
     ae4:	13 96       	adiw	r26, 0x03	; 3
     ae6:	9c 93       	st	X, r25
     ae8:	8e 93       	st	-X, r24
     aea:	12 97       	sbiw	r26, 0x02	; 2
     aec:	9a 01       	movw	r18, r20
     aee:	ab 01       	movw	r20, r22
     af0:	67 e0       	ldi	r22, 0x07	; 7
     af2:	22 0f       	add	r18, r18
     af4:	33 1f       	adc	r19, r19
     af6:	44 1f       	adc	r20, r20
     af8:	55 1f       	adc	r21, r21
     afa:	6a 95       	dec	r22
     afc:	d1 f7       	brne	.-12     	; 0xaf2 <__unpack_f+0x54>
     afe:	83 e0       	ldi	r24, 0x03	; 3
     b00:	8c 93       	st	X, r24
     b02:	0d c0       	rjmp	.+26     	; 0xb1e <__unpack_f+0x80>
     b04:	22 0f       	add	r18, r18
     b06:	33 1f       	adc	r19, r19
     b08:	44 1f       	adc	r20, r20
     b0a:	55 1f       	adc	r21, r21
     b0c:	12 96       	adiw	r26, 0x02	; 2
     b0e:	8d 91       	ld	r24, X+
     b10:	9c 91       	ld	r25, X
     b12:	13 97       	sbiw	r26, 0x03	; 3
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	13 96       	adiw	r26, 0x03	; 3
     b18:	9c 93       	st	X, r25
     b1a:	8e 93       	st	-X, r24
     b1c:	12 97       	sbiw	r26, 0x02	; 2
     b1e:	20 30       	cpi	r18, 0x00	; 0
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	38 07       	cpc	r19, r24
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	48 07       	cpc	r20, r24
     b28:	80 e4       	ldi	r24, 0x40	; 64
     b2a:	58 07       	cpc	r21, r24
     b2c:	58 f3       	brcs	.-42     	; 0xb04 <__unpack_f+0x66>
     b2e:	14 96       	adiw	r26, 0x04	; 4
     b30:	2d 93       	st	X+, r18
     b32:	3d 93       	st	X+, r19
     b34:	4d 93       	st	X+, r20
     b36:	5c 93       	st	X, r21
     b38:	17 97       	sbiw	r26, 0x07	; 7
     b3a:	08 95       	ret
     b3c:	2f 3f       	cpi	r18, 0xFF	; 255
     b3e:	31 05       	cpc	r19, r1
     b40:	79 f4       	brne	.+30     	; 0xb60 <__unpack_f+0xc2>
     b42:	41 15       	cp	r20, r1
     b44:	51 05       	cpc	r21, r1
     b46:	61 05       	cpc	r22, r1
     b48:	71 05       	cpc	r23, r1
     b4a:	19 f4       	brne	.+6      	; 0xb52 <__unpack_f+0xb4>
     b4c:	84 e0       	ldi	r24, 0x04	; 4
     b4e:	8c 93       	st	X, r24
     b50:	08 95       	ret
     b52:	64 ff       	sbrs	r22, 4
     b54:	03 c0       	rjmp	.+6      	; 0xb5c <__unpack_f+0xbe>
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	8c 93       	st	X, r24
     b5a:	12 c0       	rjmp	.+36     	; 0xb80 <__unpack_f+0xe2>
     b5c:	1c 92       	st	X, r1
     b5e:	10 c0       	rjmp	.+32     	; 0xb80 <__unpack_f+0xe2>
     b60:	2f 57       	subi	r18, 0x7F	; 127
     b62:	30 40       	sbci	r19, 0x00	; 0
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	3c 93       	st	X, r19
     b68:	2e 93       	st	-X, r18
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	8c 93       	st	X, r24
     b70:	87 e0       	ldi	r24, 0x07	; 7
     b72:	44 0f       	add	r20, r20
     b74:	55 1f       	adc	r21, r21
     b76:	66 1f       	adc	r22, r22
     b78:	77 1f       	adc	r23, r23
     b7a:	8a 95       	dec	r24
     b7c:	d1 f7       	brne	.-12     	; 0xb72 <__unpack_f+0xd4>
     b7e:	70 64       	ori	r23, 0x40	; 64
     b80:	14 96       	adiw	r26, 0x04	; 4
     b82:	4d 93       	st	X+, r20
     b84:	5d 93       	st	X+, r21
     b86:	6d 93       	st	X+, r22
     b88:	7c 93       	st	X, r23
     b8a:	17 97       	sbiw	r26, 0x07	; 7
     b8c:	08 95       	ret

00000b8e <__fpcmp_parts_f>:
     b8e:	1f 93       	push	r17
     b90:	dc 01       	movw	r26, r24
     b92:	fb 01       	movw	r30, r22
     b94:	9c 91       	ld	r25, X
     b96:	92 30       	cpi	r25, 0x02	; 2
     b98:	08 f4       	brcc	.+2      	; 0xb9c <__fpcmp_parts_f+0xe>
     b9a:	47 c0       	rjmp	.+142    	; 0xc2a <__fpcmp_parts_f+0x9c>
     b9c:	80 81       	ld	r24, Z
     b9e:	82 30       	cpi	r24, 0x02	; 2
     ba0:	08 f4       	brcc	.+2      	; 0xba4 <__fpcmp_parts_f+0x16>
     ba2:	43 c0       	rjmp	.+134    	; 0xc2a <__fpcmp_parts_f+0x9c>
     ba4:	94 30       	cpi	r25, 0x04	; 4
     ba6:	51 f4       	brne	.+20     	; 0xbbc <__fpcmp_parts_f+0x2e>
     ba8:	11 96       	adiw	r26, 0x01	; 1
     baa:	1c 91       	ld	r17, X
     bac:	84 30       	cpi	r24, 0x04	; 4
     bae:	99 f5       	brne	.+102    	; 0xc16 <__fpcmp_parts_f+0x88>
     bb0:	81 81       	ldd	r24, Z+1	; 0x01
     bb2:	68 2f       	mov	r22, r24
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	61 1b       	sub	r22, r17
     bb8:	71 09       	sbc	r23, r1
     bba:	3f c0       	rjmp	.+126    	; 0xc3a <__fpcmp_parts_f+0xac>
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	21 f0       	breq	.+8      	; 0xbc8 <__fpcmp_parts_f+0x3a>
     bc0:	92 30       	cpi	r25, 0x02	; 2
     bc2:	31 f4       	brne	.+12     	; 0xbd0 <__fpcmp_parts_f+0x42>
     bc4:	82 30       	cpi	r24, 0x02	; 2
     bc6:	b9 f1       	breq	.+110    	; 0xc36 <__fpcmp_parts_f+0xa8>
     bc8:	81 81       	ldd	r24, Z+1	; 0x01
     bca:	88 23       	and	r24, r24
     bcc:	89 f1       	breq	.+98     	; 0xc30 <__fpcmp_parts_f+0xa2>
     bce:	2d c0       	rjmp	.+90     	; 0xc2a <__fpcmp_parts_f+0x9c>
     bd0:	11 96       	adiw	r26, 0x01	; 1
     bd2:	1c 91       	ld	r17, X
     bd4:	11 97       	sbiw	r26, 0x01	; 1
     bd6:	82 30       	cpi	r24, 0x02	; 2
     bd8:	f1 f0       	breq	.+60     	; 0xc16 <__fpcmp_parts_f+0x88>
     bda:	81 81       	ldd	r24, Z+1	; 0x01
     bdc:	18 17       	cp	r17, r24
     bde:	d9 f4       	brne	.+54     	; 0xc16 <__fpcmp_parts_f+0x88>
     be0:	12 96       	adiw	r26, 0x02	; 2
     be2:	2d 91       	ld	r18, X+
     be4:	3c 91       	ld	r19, X
     be6:	13 97       	sbiw	r26, 0x03	; 3
     be8:	82 81       	ldd	r24, Z+2	; 0x02
     bea:	93 81       	ldd	r25, Z+3	; 0x03
     bec:	82 17       	cp	r24, r18
     bee:	93 07       	cpc	r25, r19
     bf0:	94 f0       	brlt	.+36     	; 0xc16 <__fpcmp_parts_f+0x88>
     bf2:	28 17       	cp	r18, r24
     bf4:	39 07       	cpc	r19, r25
     bf6:	bc f0       	brlt	.+46     	; 0xc26 <__fpcmp_parts_f+0x98>
     bf8:	14 96       	adiw	r26, 0x04	; 4
     bfa:	8d 91       	ld	r24, X+
     bfc:	9d 91       	ld	r25, X+
     bfe:	0d 90       	ld	r0, X+
     c00:	bc 91       	ld	r27, X
     c02:	a0 2d       	mov	r26, r0
     c04:	24 81       	ldd	r18, Z+4	; 0x04
     c06:	35 81       	ldd	r19, Z+5	; 0x05
     c08:	46 81       	ldd	r20, Z+6	; 0x06
     c0a:	57 81       	ldd	r21, Z+7	; 0x07
     c0c:	28 17       	cp	r18, r24
     c0e:	39 07       	cpc	r19, r25
     c10:	4a 07       	cpc	r20, r26
     c12:	5b 07       	cpc	r21, r27
     c14:	18 f4       	brcc	.+6      	; 0xc1c <__fpcmp_parts_f+0x8e>
     c16:	11 23       	and	r17, r17
     c18:	41 f0       	breq	.+16     	; 0xc2a <__fpcmp_parts_f+0x9c>
     c1a:	0a c0       	rjmp	.+20     	; 0xc30 <__fpcmp_parts_f+0xa2>
     c1c:	82 17       	cp	r24, r18
     c1e:	93 07       	cpc	r25, r19
     c20:	a4 07       	cpc	r26, r20
     c22:	b5 07       	cpc	r27, r21
     c24:	40 f4       	brcc	.+16     	; 0xc36 <__fpcmp_parts_f+0xa8>
     c26:	11 23       	and	r17, r17
     c28:	19 f0       	breq	.+6      	; 0xc30 <__fpcmp_parts_f+0xa2>
     c2a:	61 e0       	ldi	r22, 0x01	; 1
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	05 c0       	rjmp	.+10     	; 0xc3a <__fpcmp_parts_f+0xac>
     c30:	6f ef       	ldi	r22, 0xFF	; 255
     c32:	7f ef       	ldi	r23, 0xFF	; 255
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <__fpcmp_parts_f+0xac>
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	cb 01       	movw	r24, r22
     c3c:	1f 91       	pop	r17
     c3e:	08 95       	ret

00000c40 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	00 d0       	rcall	.+0      	; 0xc46 <UART_init+0x6>
     c46:	00 d0       	rcall	.+0      	; 0xc48 <UART_init+0x8>
     c48:	00 d0       	rcall	.+0      	; 0xc4a <UART_init+0xa>
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	6b 83       	std	Y+3, r22	; 0x03
     c50:	7c 83       	std	Y+4, r23	; 0x04
     c52:	8d 83       	std	Y+5, r24	; 0x05
     c54:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
     c56:	1a 82       	std	Y+2, r1	; 0x02
     c58:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
     c5a:	eb e2       	ldi	r30, 0x2B	; 43
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	82 e0       	ldi	r24, 0x02	; 2
     c60:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
     c62:	ea e2       	ldi	r30, 0x2A	; 42
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	88 e1       	ldi	r24, 0x18	; 24
     c68:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
     c6a:	e0 e4       	ldi	r30, 0x40	; 64
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	86 e8       	ldi	r24, 0x86	; 134
     c70:	80 83       	st	Z, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / (baud_rate * 8UL))) - 1);
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	9c 81       	ldd	r25, Y+4	; 0x04
     c76:	ad 81       	ldd	r26, Y+5	; 0x05
     c78:	be 81       	ldd	r27, Y+6	; 0x06
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	aa 1f       	adc	r26, r26
     c80:	bb 1f       	adc	r27, r27
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	aa 1f       	adc	r26, r26
     c88:	bb 1f       	adc	r27, r27
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	aa 1f       	adc	r26, r26
     c90:	bb 1f       	adc	r27, r27
     c92:	9c 01       	movw	r18, r24
     c94:	ad 01       	movw	r20, r26
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	94 e2       	ldi	r25, 0x24	; 36
     c9a:	a4 ef       	ldi	r26, 0xF4	; 244
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	bc 01       	movw	r22, r24
     ca0:	cd 01       	movw	r24, r26
     ca2:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <__udivmodsi4>
     ca6:	da 01       	movw	r26, r20
     ca8:	c9 01       	movw	r24, r18
     caa:	01 97       	sbiw	r24, 0x01	; 1
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
     cb0:	e0 e4       	ldi	r30, 0x40	; 64
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	9a 81       	ldd	r25, Y+2	; 0x02
     cb8:	89 2f       	mov	r24, r25
     cba:	99 27       	eor	r25, r25
     cbc:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     cbe:	e9 e2       	ldi	r30, 0x29	; 41
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	80 83       	st	Z, r24
}
     cc6:	26 96       	adiw	r28, 0x06	; 6
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	0f 92       	push	r0
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA, UDRE))
     ce4:	eb e2       	ldi	r30, 0x2B	; 43
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	88 2f       	mov	r24, r24
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	80 72       	andi	r24, 0x20	; 32
     cf0:	90 70       	andi	r25, 0x00	; 0
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	b9 f3       	breq	.-18     	; 0xce4 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     cf6:	ec e2       	ldi	r30, 0x2C	; 44
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	80 83       	st	Z, r24
	/************************* Another Method *************************
	 UDR = data;
	 while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	 SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
     cfe:	0f 90       	pop	r0
     d00:	cf 91       	pop	r28
     d02:	df 91       	pop	r29
     d04:	08 95       	ret

00000d06 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     d06:	df 93       	push	r29
     d08:	cf 93       	push	r28
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, RXC))
     d0e:	eb e2       	ldi	r30, 0x2B	; 43
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	88 23       	and	r24, r24
     d16:	dc f7       	brge	.-10     	; 0xd0e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
     d18:	ec e2       	ldi	r30, 0x2C	; 44
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
}
     d1e:	cf 91       	pop	r28
     d20:	df 91       	pop	r29
     d22:	08 95       	ret

00000d24 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	00 d0       	rcall	.+0      	; 0xd2a <UART_sendString+0x6>
     d2a:	0f 92       	push	r0
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	9b 83       	std	Y+3, r25	; 0x03
     d32:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     d34:	19 82       	std	Y+1, r1	; 0x01
     d36:	0e c0       	rjmp	.+28     	; 0xd54 <UART_sendString+0x30>

	/* Send the whole string */
	while (Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	9b 81       	ldd	r25, Y+3	; 0x03
     d42:	fc 01       	movw	r30, r24
     d44:	e2 0f       	add	r30, r18
     d46:	f3 1f       	adc	r31, r19
     d48:	80 81       	ld	r24, Z
     d4a:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <UART_sendByte>
		i++;
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	8f 5f       	subi	r24, 0xFF	; 255
     d52:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0')
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	9b 81       	ldd	r25, Y+3	; 0x03
     d5e:	fc 01       	movw	r30, r24
     d60:	e2 0f       	add	r30, r18
     d62:	f3 1f       	adc	r31, r19
     d64:	80 81       	ld	r24, Z
     d66:	88 23       	and	r24, r24
     d68:	39 f7       	brne	.-50     	; 0xd38 <UART_sendString+0x14>
	 {
	 UART_sendByte(*Str);
	 Str++;
	 }
	 *******************************************************************/
}
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	08 95       	ret

00000d76 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <UART_receiveString+0xa>
     d80:	0f 92       	push	r0
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	9b 83       	std	Y+3, r25	; 0x03
     d88:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     d8a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	9b 81       	ldd	r25, Y+3	; 0x03
     d96:	8c 01       	movw	r16, r24
     d98:	02 0f       	add	r16, r18
     d9a:	13 1f       	adc	r17, r19
     d9c:	0e 94 83 06 	call	0xd06	; 0xd06 <UART_recieveByte>
     da0:	f8 01       	movw	r30, r16
     da2:	80 83       	st	Z, r24
     da4:	0f c0       	rjmp	.+30     	; 0xdc4 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#')
	{
		i++;
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	8f 5f       	subi	r24, 0xFF	; 255
     daa:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	9b 81       	ldd	r25, Y+3	; 0x03
     db6:	8c 01       	movw	r16, r24
     db8:	02 0f       	add	r16, r18
     dba:	13 1f       	adc	r17, r19
     dbc:	0e 94 83 06 	call	0xd06	; 0xd06 <UART_recieveByte>
     dc0:	f8 01       	movw	r30, r16
     dc2:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#')
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	9b 81       	ldd	r25, Y+3	; 0x03
     dce:	fc 01       	movw	r30, r24
     dd0:	e2 0f       	add	r30, r18
     dd2:	f3 1f       	adc	r31, r19
     dd4:	80 81       	ld	r24, Z
     dd6:	83 32       	cpi	r24, 0x23	; 35
     dd8:	31 f7       	brne	.-52     	; 0xda6 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	9b 81       	ldd	r25, Y+3	; 0x03
     de4:	fc 01       	movw	r30, r24
     de6:	e2 0f       	add	r30, r18
     de8:	f3 1f       	adc	r31, r19
     dea:	10 82       	st	Z, r1
}
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	08 95       	ret

00000dfc <__vector_11>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
     dfc:	1f 92       	push	r1
     dfe:	0f 92       	push	r0
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	0f 92       	push	r0
     e04:	11 24       	eor	r1, r1
     e06:	2f 93       	push	r18
     e08:	3f 93       	push	r19
     e0a:	4f 93       	push	r20
     e0c:	5f 93       	push	r21
     e0e:	6f 93       	push	r22
     e10:	7f 93       	push	r23
     e12:	8f 93       	push	r24
     e14:	9f 93       	push	r25
     e16:	af 93       	push	r26
     e18:	bf 93       	push	r27
     e1a:	ef 93       	push	r30
     e1c:	ff 93       	push	r31
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
     e26:	80 91 a6 00 	lds	r24, 0x00A6
     e2a:	90 91 a7 00 	lds	r25, 0x00A7
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	29 f0       	breq	.+10     	; 0xe3c <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
     e32:	e0 91 a6 00 	lds	r30, 0x00A6
     e36:	f0 91 a7 00 	lds	r31, 0x00A7
     e3a:	09 95       	icall
	}
}
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	ff 91       	pop	r31
     e42:	ef 91       	pop	r30
     e44:	bf 91       	pop	r27
     e46:	af 91       	pop	r26
     e48:	9f 91       	pop	r25
     e4a:	8f 91       	pop	r24
     e4c:	7f 91       	pop	r23
     e4e:	6f 91       	pop	r22
     e50:	5f 91       	pop	r21
     e52:	4f 91       	pop	r20
     e54:	3f 91       	pop	r19
     e56:	2f 91       	pop	r18
     e58:	0f 90       	pop	r0
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	0f 90       	pop	r0
     e5e:	1f 90       	pop	r1
     e60:	18 95       	reti

00000e62 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     e62:	1f 92       	push	r1
     e64:	0f 92       	push	r0
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	0f 92       	push	r0
     e6a:	11 24       	eor	r1, r1
     e6c:	2f 93       	push	r18
     e6e:	3f 93       	push	r19
     e70:	4f 93       	push	r20
     e72:	5f 93       	push	r21
     e74:	6f 93       	push	r22
     e76:	7f 93       	push	r23
     e78:	8f 93       	push	r24
     e7a:	9f 93       	push	r25
     e7c:	af 93       	push	r26
     e7e:	bf 93       	push	r27
     e80:	ef 93       	push	r30
     e82:	ff 93       	push	r31
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
     e8c:	80 91 a6 00 	lds	r24, 0x00A6
     e90:	90 91 a7 00 	lds	r25, 0x00A7
     e94:	00 97       	sbiw	r24, 0x00	; 0
     e96:	29 f0       	breq	.+10     	; 0xea2 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
     e98:	e0 91 a6 00 	lds	r30, 0x00A6
     e9c:	f0 91 a7 00 	lds	r31, 0x00A7
     ea0:	09 95       	icall
	}
}
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	ff 91       	pop	r31
     ea8:	ef 91       	pop	r30
     eaa:	bf 91       	pop	r27
     eac:	af 91       	pop	r26
     eae:	9f 91       	pop	r25
     eb0:	8f 91       	pop	r24
     eb2:	7f 91       	pop	r23
     eb4:	6f 91       	pop	r22
     eb6:	5f 91       	pop	r21
     eb8:	4f 91       	pop	r20
     eba:	3f 91       	pop	r19
     ebc:	2f 91       	pop	r18
     ebe:	0f 90       	pop	r0
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	0f 90       	pop	r0
     ec4:	1f 90       	pop	r1
     ec6:	18 95       	reti

00000ec8 <Timer0_init>:
/*
 * Description :
 * Function to initialize the Timer driver.
 */
void Timer0_init(const TIMER0_ConfigType *Config_Ptr)
{
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	00 d0       	rcall	.+0      	; 0xece <Timer0_init+0x6>
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	9a 83       	std	Y+2, r25	; 0x02
     ed4:	89 83       	std	Y+1, r24	; 0x01
	 ***********************************************************************/

	/*
	 * insert the required mode in WGM bits (WGM00 and WGM01) of TCCR0 Register
	 */
	if (Config_Ptr->mode == NORMAL_MODE)
     ed6:	e9 81       	ldd	r30, Y+1	; 0x01
     ed8:	fa 81       	ldd	r31, Y+2	; 0x02
     eda:	82 81       	ldd	r24, Z+2	; 0x02
     edc:	88 23       	and	r24, r24
     ede:	79 f4       	brne	.+30     	; 0xefe <Timer0_init+0x36>
	{
		TCCR0_REG.Bits.FOC0_Bit = 1;
     ee0:	e3 e5       	ldi	r30, 0x53	; 83
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	80 68       	ori	r24, 0x80	; 128
     ee8:	80 83       	st	Z, r24
		TCCR0_REG.Bits.WGM00_Bit = 0;
     eea:	e3 e5       	ldi	r30, 0x53	; 83
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	8f 7b       	andi	r24, 0xBF	; 191
     ef2:	80 83       	st	Z, r24
		TCCR0_REG.Bits.WGM01_Bit = 0;
     ef4:	e3 e5       	ldi	r30, 0x53	; 83
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	87 7f       	andi	r24, 0xF7	; 247
     efc:	80 83       	st	Z, r24
	}
	if (Config_Ptr->mode == CTC_MODE)
     efe:	e9 81       	ldd	r30, Y+1	; 0x01
     f00:	fa 81       	ldd	r31, Y+2	; 0x02
     f02:	82 81       	ldd	r24, Z+2	; 0x02
     f04:	82 30       	cpi	r24, 0x02	; 2
     f06:	79 f4       	brne	.+30     	; 0xf26 <Timer0_init+0x5e>
	{
		TCCR0_REG.Bits.FOC0_Bit = 1;
     f08:	e3 e5       	ldi	r30, 0x53	; 83
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	80 68       	ori	r24, 0x80	; 128
     f10:	80 83       	st	Z, r24
		TCCR0_REG.Bits.WGM00_Bit = 0;
     f12:	e3 e5       	ldi	r30, 0x53	; 83
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 7b       	andi	r24, 0xBF	; 191
     f1a:	80 83       	st	Z, r24
		TCCR0_REG.Bits.WGM01_Bit = 1;
     f1c:	e3 e5       	ldi	r30, 0x53	; 83
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	88 60       	ori	r24, 0x08	; 8
     f24:	80 83       	st	Z, r24
	}
	if (Config_Ptr->mode == FAST_PWM_MODE)
     f26:	e9 81       	ldd	r30, Y+1	; 0x01
     f28:	fa 81       	ldd	r31, Y+2	; 0x02
     f2a:	82 81       	ldd	r24, Z+2	; 0x02
     f2c:	83 30       	cpi	r24, 0x03	; 3
     f2e:	79 f4       	brne	.+30     	; 0xf4e <Timer0_init+0x86>
	{
		TCCR0_REG.Bits.FOC0_Bit = 0;
     f30:	e3 e5       	ldi	r30, 0x53	; 83
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	8f 77       	andi	r24, 0x7F	; 127
     f38:	80 83       	st	Z, r24
		TCCR0_REG.Bits.WGM00_Bit = 1;
     f3a:	e3 e5       	ldi	r30, 0x53	; 83
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	80 64       	ori	r24, 0x40	; 64
     f42:	80 83       	st	Z, r24
		TCCR0_REG.Bits.WGM01_Bit = 1;
     f44:	e3 e5       	ldi	r30, 0x53	; 83
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	88 60       	ori	r24, 0x08	; 8
     f4c:	80 83       	st	Z, r24
	}

	/*
	 * insert the required compare output mode in COM bits (COM00 and COM01) of TCCR0 Register
	 */
	if (Config_Ptr->outputMode == NORMAL_MODE_OC0_DISCONNECTED)
     f4e:	e9 81       	ldd	r30, Y+1	; 0x01
     f50:	fa 81       	ldd	r31, Y+2	; 0x02
     f52:	84 81       	ldd	r24, Z+4	; 0x04
     f54:	88 23       	and	r24, r24
     f56:	51 f4       	brne	.+20     	; 0xf6c <Timer0_init+0xa4>
	{
		TCCR0_REG.Bits.COM00_Bit = 0;
     f58:	e3 e5       	ldi	r30, 0x53	; 83
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8f 7e       	andi	r24, 0xEF	; 239
     f60:	80 83       	st	Z, r24
		TCCR0_REG.Bits.COM01_Bit = 0;
     f62:	e3 e5       	ldi	r30, 0x53	; 83
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	8f 7d       	andi	r24, 0xDF	; 223
     f6a:	80 83       	st	Z, r24
	}
	if (Config_Ptr->outputMode == CTC_TOGGLE__PWM_RESERVED)
     f6c:	e9 81       	ldd	r30, Y+1	; 0x01
     f6e:	fa 81       	ldd	r31, Y+2	; 0x02
     f70:	84 81       	ldd	r24, Z+4	; 0x04
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	51 f4       	brne	.+20     	; 0xf8a <Timer0_init+0xc2>
	{
		TCCR0_REG.Bits.COM00_Bit = 1;
     f76:	e3 e5       	ldi	r30, 0x53	; 83
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	80 61       	ori	r24, 0x10	; 16
     f7e:	80 83       	st	Z, r24
		TCCR0_REG.Bits.COM01_Bit = 0;
     f80:	e3 e5       	ldi	r30, 0x53	; 83
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	8f 7d       	andi	r24, 0xDF	; 223
     f88:	80 83       	st	Z, r24
	}
	if (Config_Ptr->outputMode == CTC_CLEAR__PWM_NON_INVERTING)
     f8a:	e9 81       	ldd	r30, Y+1	; 0x01
     f8c:	fa 81       	ldd	r31, Y+2	; 0x02
     f8e:	84 81       	ldd	r24, Z+4	; 0x04
     f90:	82 30       	cpi	r24, 0x02	; 2
     f92:	51 f4       	brne	.+20     	; 0xfa8 <Timer0_init+0xe0>
	{
		TCCR0_REG.Bits.COM00_Bit = 0;
     f94:	e3 e5       	ldi	r30, 0x53	; 83
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	8f 7e       	andi	r24, 0xEF	; 239
     f9c:	80 83       	st	Z, r24
		TCCR0_REG.Bits.COM01_Bit = 1;
     f9e:	e3 e5       	ldi	r30, 0x53	; 83
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	80 62       	ori	r24, 0x20	; 32
     fa6:	80 83       	st	Z, r24
	}
	if (Config_Ptr->outputMode == CTC_SET__PWM_INVERTING)
     fa8:	e9 81       	ldd	r30, Y+1	; 0x01
     faa:	fa 81       	ldd	r31, Y+2	; 0x02
     fac:	84 81       	ldd	r24, Z+4	; 0x04
     fae:	83 30       	cpi	r24, 0x03	; 3
     fb0:	51 f4       	brne	.+20     	; 0xfc6 <Timer0_init+0xfe>
	{
		TCCR0_REG.Bits.COM00_Bit = 1;
     fb2:	e3 e5       	ldi	r30, 0x53	; 83
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	80 61       	ori	r24, 0x10	; 16
     fba:	80 83       	st	Z, r24
		TCCR0_REG.Bits.COM01_Bit = 1;
     fbc:	e3 e5       	ldi	r30, 0x53	; 83
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	80 62       	ori	r24, 0x20	; 32
     fc4:	80 83       	st	Z, r24
	}

	/*
	 * insert the required prescaler in CS bits (CS00, CS01 and CS02) of TCCR0 Register
	 */
	TCCR0_REG.Byte = (TCCR0_REG.Byte & 0xF8) | (Config_Ptr->prescaler);
     fc6:	a3 e5       	ldi	r26, 0x53	; 83
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e3 e5       	ldi	r30, 0x53	; 83
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	98 2f       	mov	r25, r24
     fd2:	98 7f       	andi	r25, 0xF8	; 248
     fd4:	e9 81       	ldd	r30, Y+1	; 0x01
     fd6:	fa 81       	ldd	r31, Y+2	; 0x02
     fd8:	83 81       	ldd	r24, Z+3	; 0x03
     fda:	89 2b       	or	r24, r25
     fdc:	8c 93       	st	X, r24

	TCNT0_REG = Config_Ptr->initial_value;
     fde:	a2 e5       	ldi	r26, 0x52	; 82
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e9 81       	ldd	r30, Y+1	; 0x01
     fe4:	fa 81       	ldd	r31, Y+2	; 0x02
     fe6:	80 81       	ld	r24, Z
     fe8:	8c 93       	st	X, r24
	OCR0_REG = Config_Ptr->compare_value;
     fea:	ac e5       	ldi	r26, 0x5C	; 92
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e9 81       	ldd	r30, Y+1	; 0x01
     ff0:	fa 81       	ldd	r31, Y+2	; 0x02
     ff2:	81 81       	ldd	r24, Z+1	; 0x01
     ff4:	8c 93       	st	X, r24

	/* Enable Timer/Counter0 Output Compare Match interrupt */
	TIMSK_REG.Bits.OCIE0_Bit = 1;
     ff6:	e9 e5       	ldi	r30, 0x59	; 89
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	82 60       	ori	r24, 0x02	; 2
     ffe:	80 83       	st	Z, r24

	/* Enable Timer/Counter0 Overflow Interrupt */
	TIMSK_REG.Bits.TOIE0_Bit = 1;
    1000:	e9 e5       	ldi	r30, 0x59	; 89
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	81 60       	ori	r24, 0x01	; 1
    1008:	80 83       	st	Z, r24
}
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <Timer0_deInit>:
/*
 * Description :
 * Function to disable the Timer0.
 */
void Timer0_deInit(void)
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR0_REG.Byte = 0;
    101c:	e3 e5       	ldi	r30, 0x53	; 83
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	10 82       	st	Z, r1
	TCNT0_REG = 0;
    1022:	e2 e5       	ldi	r30, 0x52	; 82
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	10 82       	st	Z, r1
	OCR0_REG = 0;
    1028:	ec e5       	ldi	r30, 0x5C	; 92
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	10 82       	st	Z, r1

	/* Disable the Output Compare A match and Overflow interrupt */
	TIMSK_REG.Bits.OCIE0_Bit = 0;
    102e:	e9 e5       	ldi	r30, 0x59	; 89
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	8d 7f       	andi	r24, 0xFD	; 253
    1036:	80 83       	st	Z, r24
	TIMSK_REG.Bits.TOIE0_Bit = 0;
    1038:	e9 e5       	ldi	r30, 0x59	; 89
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	8e 7f       	andi	r24, 0xFE	; 254
    1040:	80 83       	st	Z, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    1042:	10 92 a7 00 	sts	0x00A7, r1
    1046:	10 92 a6 00 	sts	0x00A6, r1
}
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	08 95       	ret

00001050 <Timer0_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address.
 */
void Timer0_setCallBack(void (*a_ptr)(void))
{
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	00 d0       	rcall	.+0      	; 0x1056 <Timer0_setCallBack+0x6>
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	9a 83       	std	Y+2, r25	; 0x02
    105c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	9a 81       	ldd	r25, Y+2	; 0x02
    1062:	90 93 a7 00 	sts	0x00A7, r25
    1066:	80 93 a6 00 	sts	0x00A6, r24
}
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <Timer0_PWM_Start>:
/*
 * Description:
 * Setup the compare value based on the required input duty cycle.
 */
void Timer0_PWM_Start(uint8 a_dutyCycle)
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	0f 92       	push	r0
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	89 83       	std	Y+1, r24	; 0x01
	/* If the input duty cycle greater than 100, then set it to 100 */
	if (a_dutyCycle > 100)
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	85 36       	cpi	r24, 0x65	; 101
    1084:	10 f0       	brcs	.+4      	; 0x108a <Timer0_PWM_Start+0x16>
	{
		a_dutyCycle = 100;
    1086:	84 e6       	ldi	r24, 0x64	; 100
    1088:	89 83       	std	Y+1, r24	; 0x01
	/* If the input duty cycle less than 0, then set it to 0 */
	if (a_dutyCycle < 0)
	{
		a_dutyCycle = 0;
	}
	OCR0_REG = (uint8) ((uint16) a_dutyCycle * OC0_MAX_VALUE / 100);
    108a:	ec e5       	ldi	r30, 0x5C	; 92
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	48 2f       	mov	r20, r24
    1092:	50 e0       	ldi	r21, 0x00	; 0
    1094:	ca 01       	movw	r24, r20
    1096:	9c 01       	movw	r18, r24
    1098:	22 0f       	add	r18, r18
    109a:	33 1f       	adc	r19, r19
    109c:	c9 01       	movw	r24, r18
    109e:	96 95       	lsr	r25
    10a0:	98 2f       	mov	r25, r24
    10a2:	88 27       	eor	r24, r24
    10a4:	97 95       	ror	r25
    10a6:	87 95       	ror	r24
    10a8:	82 1b       	sub	r24, r18
    10aa:	93 0b       	sbc	r25, r19
    10ac:	84 0f       	add	r24, r20
    10ae:	95 1f       	adc	r25, r21
    10b0:	24 e6       	ldi	r18, 0x64	; 100
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	b9 01       	movw	r22, r18
    10b6:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <__udivmodhi4>
    10ba:	cb 01       	movw	r24, r22
    10bc:	80 83       	st	Z, r24
}
    10be:	0f 90       	pop	r0
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <GPIO_setupPinDirection>:
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction)
{
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <GPIO_setupPinDirection+0x6>
    10cc:	00 d0       	rcall	.+0      	; 0x10ce <GPIO_setupPinDirection+0x8>
    10ce:	0f 92       	push	r0
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	89 83       	std	Y+1, r24	; 0x01
    10d6:	6a 83       	std	Y+2, r22	; 0x02
    10d8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	88 30       	cpi	r24, 0x08	; 8
    10de:	08 f0       	brcs	.+2      	; 0x10e2 <GPIO_setupPinDirection+0x1c>
    10e0:	d5 c0       	rjmp	.+426    	; 0x128c <GPIO_setupPinDirection+0x1c6>
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	84 30       	cpi	r24, 0x04	; 4
    10e6:	08 f0       	brcs	.+2      	; 0x10ea <GPIO_setupPinDirection+0x24>
    10e8:	d1 c0       	rjmp	.+418    	; 0x128c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch (port_num)
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	3d 83       	std	Y+5, r19	; 0x05
    10f2:	2c 83       	std	Y+4, r18	; 0x04
    10f4:	8c 81       	ldd	r24, Y+4	; 0x04
    10f6:	9d 81       	ldd	r25, Y+5	; 0x05
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	91 05       	cpc	r25, r1
    10fc:	09 f4       	brne	.+2      	; 0x1100 <GPIO_setupPinDirection+0x3a>
    10fe:	43 c0       	rjmp	.+134    	; 0x1186 <GPIO_setupPinDirection+0xc0>
    1100:	2c 81       	ldd	r18, Y+4	; 0x04
    1102:	3d 81       	ldd	r19, Y+5	; 0x05
    1104:	22 30       	cpi	r18, 0x02	; 2
    1106:	31 05       	cpc	r19, r1
    1108:	2c f4       	brge	.+10     	; 0x1114 <GPIO_setupPinDirection+0x4e>
    110a:	8c 81       	ldd	r24, Y+4	; 0x04
    110c:	9d 81       	ldd	r25, Y+5	; 0x05
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	71 f0       	breq	.+28     	; 0x112e <GPIO_setupPinDirection+0x68>
    1112:	bc c0       	rjmp	.+376    	; 0x128c <GPIO_setupPinDirection+0x1c6>
    1114:	2c 81       	ldd	r18, Y+4	; 0x04
    1116:	3d 81       	ldd	r19, Y+5	; 0x05
    1118:	22 30       	cpi	r18, 0x02	; 2
    111a:	31 05       	cpc	r19, r1
    111c:	09 f4       	brne	.+2      	; 0x1120 <GPIO_setupPinDirection+0x5a>
    111e:	5f c0       	rjmp	.+190    	; 0x11de <GPIO_setupPinDirection+0x118>
    1120:	8c 81       	ldd	r24, Y+4	; 0x04
    1122:	9d 81       	ldd	r25, Y+5	; 0x05
    1124:	83 30       	cpi	r24, 0x03	; 3
    1126:	91 05       	cpc	r25, r1
    1128:	09 f4       	brne	.+2      	; 0x112c <GPIO_setupPinDirection+0x66>
    112a:	85 c0       	rjmp	.+266    	; 0x1236 <GPIO_setupPinDirection+0x170>
    112c:	af c0       	rjmp	.+350    	; 0x128c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if (direction == PIN_OUTPUT)
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	81 30       	cpi	r24, 0x01	; 1
    1132:	a1 f4       	brne	.+40     	; 0x115c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA_REG.Byte, pin_num);
    1134:	aa e3       	ldi	r26, 0x3A	; 58
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	ea e3       	ldi	r30, 0x3A	; 58
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <GPIO_setupPinDirection+0x8c>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <GPIO_setupPinDirection+0x88>
    1156:	84 2b       	or	r24, r20
    1158:	8c 93       	st	X, r24
    115a:	98 c0       	rjmp	.+304    	; 0x128c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA_REG.Byte, pin_num);
    115c:	aa e3       	ldi	r26, 0x3A	; 58
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	ea e3       	ldi	r30, 0x3A	; 58
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	48 2f       	mov	r20, r24
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 2e       	mov	r0, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <GPIO_setupPinDirection+0xb4>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <GPIO_setupPinDirection+0xb0>
    117e:	80 95       	com	r24
    1180:	84 23       	and	r24, r20
    1182:	8c 93       	st	X, r24
    1184:	83 c0       	rjmp	.+262    	; 0x128c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT)
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	81 30       	cpi	r24, 0x01	; 1
    118a:	a1 f4       	brne	.+40     	; 0x11b4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB_REG.Byte, pin_num);
    118c:	a7 e3       	ldi	r26, 0x37	; 55
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e7 e3       	ldi	r30, 0x37	; 55
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <GPIO_setupPinDirection+0xe4>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <GPIO_setupPinDirection+0xe0>
    11ae:	84 2b       	or	r24, r20
    11b0:	8c 93       	st	X, r24
    11b2:	6c c0       	rjmp	.+216    	; 0x128c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB_REG.Byte, pin_num);
    11b4:	a7 e3       	ldi	r26, 0x37	; 55
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e7 e3       	ldi	r30, 0x37	; 55
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	48 2f       	mov	r20, r24
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	02 2e       	mov	r0, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <GPIO_setupPinDirection+0x10c>
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	0a 94       	dec	r0
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <GPIO_setupPinDirection+0x108>
    11d6:	80 95       	com	r24
    11d8:	84 23       	and	r24, r20
    11da:	8c 93       	st	X, r24
    11dc:	57 c0       	rjmp	.+174    	; 0x128c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT)
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	a1 f4       	brne	.+40     	; 0x120c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC_REG.Byte, pin_num);
    11e4:	a4 e3       	ldi	r26, 0x34	; 52
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e4 e3       	ldi	r30, 0x34	; 52
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	48 2f       	mov	r20, r24
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 2e       	mov	r0, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <GPIO_setupPinDirection+0x13c>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <GPIO_setupPinDirection+0x138>
    1206:	84 2b       	or	r24, r20
    1208:	8c 93       	st	X, r24
    120a:	40 c0       	rjmp	.+128    	; 0x128c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC_REG.Byte, pin_num);
    120c:	a4 e3       	ldi	r26, 0x34	; 52
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e4 e3       	ldi	r30, 0x34	; 52
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	48 2f       	mov	r20, r24
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 2e       	mov	r0, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <GPIO_setupPinDirection+0x164>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	0a 94       	dec	r0
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <GPIO_setupPinDirection+0x160>
    122e:	80 95       	com	r24
    1230:	84 23       	and	r24, r20
    1232:	8c 93       	st	X, r24
    1234:	2b c0       	rjmp	.+86     	; 0x128c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT)
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	a1 f4       	brne	.+40     	; 0x1264 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD_REG.Byte, pin_num);
    123c:	a1 e3       	ldi	r26, 0x31	; 49
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e1 e3       	ldi	r30, 0x31	; 49
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <GPIO_setupPinDirection+0x194>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <GPIO_setupPinDirection+0x190>
    125e:	84 2b       	or	r24, r20
    1260:	8c 93       	st	X, r24
    1262:	14 c0       	rjmp	.+40     	; 0x128c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD_REG.Byte, pin_num);
    1264:	a1 e3       	ldi	r26, 0x31	; 49
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e1 e3       	ldi	r30, 0x31	; 49
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	48 2f       	mov	r20, r24
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 2e       	mov	r0, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <GPIO_setupPinDirection+0x1bc>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	0a 94       	dec	r0
    1284:	e2 f7       	brpl	.-8      	; 0x127e <GPIO_setupPinDirection+0x1b8>
    1286:	80 95       	com	r24
    1288:	84 23       	and	r24, r20
    128a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <GPIO_writePin+0x6>
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <GPIO_writePin+0x8>
    12a4:	0f 92       	push	r0
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	6a 83       	std	Y+2, r22	; 0x02
    12ae:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	88 30       	cpi	r24, 0x08	; 8
    12b4:	08 f0       	brcs	.+2      	; 0x12b8 <GPIO_writePin+0x1c>
    12b6:	d5 c0       	rjmp	.+426    	; 0x1462 <GPIO_writePin+0x1c6>
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	84 30       	cpi	r24, 0x04	; 4
    12bc:	08 f0       	brcs	.+2      	; 0x12c0 <GPIO_writePin+0x24>
    12be:	d1 c0       	rjmp	.+418    	; 0x1462 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin value as required */
		switch (port_num)
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	3d 83       	std	Y+5, r19	; 0x05
    12c8:	2c 83       	std	Y+4, r18	; 0x04
    12ca:	8c 81       	ldd	r24, Y+4	; 0x04
    12cc:	9d 81       	ldd	r25, Y+5	; 0x05
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	91 05       	cpc	r25, r1
    12d2:	09 f4       	brne	.+2      	; 0x12d6 <GPIO_writePin+0x3a>
    12d4:	43 c0       	rjmp	.+134    	; 0x135c <GPIO_writePin+0xc0>
    12d6:	2c 81       	ldd	r18, Y+4	; 0x04
    12d8:	3d 81       	ldd	r19, Y+5	; 0x05
    12da:	22 30       	cpi	r18, 0x02	; 2
    12dc:	31 05       	cpc	r19, r1
    12de:	2c f4       	brge	.+10     	; 0x12ea <GPIO_writePin+0x4e>
    12e0:	8c 81       	ldd	r24, Y+4	; 0x04
    12e2:	9d 81       	ldd	r25, Y+5	; 0x05
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	71 f0       	breq	.+28     	; 0x1304 <GPIO_writePin+0x68>
    12e8:	bc c0       	rjmp	.+376    	; 0x1462 <GPIO_writePin+0x1c6>
    12ea:	2c 81       	ldd	r18, Y+4	; 0x04
    12ec:	3d 81       	ldd	r19, Y+5	; 0x05
    12ee:	22 30       	cpi	r18, 0x02	; 2
    12f0:	31 05       	cpc	r19, r1
    12f2:	09 f4       	brne	.+2      	; 0x12f6 <GPIO_writePin+0x5a>
    12f4:	5f c0       	rjmp	.+190    	; 0x13b4 <GPIO_writePin+0x118>
    12f6:	8c 81       	ldd	r24, Y+4	; 0x04
    12f8:	9d 81       	ldd	r25, Y+5	; 0x05
    12fa:	83 30       	cpi	r24, 0x03	; 3
    12fc:	91 05       	cpc	r25, r1
    12fe:	09 f4       	brne	.+2      	; 0x1302 <GPIO_writePin+0x66>
    1300:	85 c0       	rjmp	.+266    	; 0x140c <GPIO_writePin+0x170>
    1302:	af c0       	rjmp	.+350    	; 0x1462 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if (value == LOGIC_LOW)
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	88 23       	and	r24, r24
    1308:	a9 f4       	brne	.+42     	; 0x1334 <GPIO_writePin+0x98>
			{
				CLEAR_BIT(PORTA_REG.Byte, pin_num);
    130a:	ab e3       	ldi	r26, 0x3B	; 59
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	eb e3       	ldi	r30, 0x3B	; 59
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	48 2f       	mov	r20, r24
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 2e       	mov	r0, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <GPIO_writePin+0x8c>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	0a 94       	dec	r0
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <GPIO_writePin+0x88>
    132c:	80 95       	com	r24
    132e:	84 23       	and	r24, r20
    1330:	8c 93       	st	X, r24
    1332:	97 c0       	rjmp	.+302    	; 0x1462 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTA_REG.Byte, pin_num);
    1334:	ab e3       	ldi	r26, 0x3B	; 59
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	eb e3       	ldi	r30, 0x3B	; 59
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	48 2f       	mov	r20, r24
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	02 2e       	mov	r0, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <GPIO_writePin+0xb6>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	0a 94       	dec	r0
    1354:	e2 f7       	brpl	.-8      	; 0x134e <GPIO_writePin+0xb2>
    1356:	84 2b       	or	r24, r20
    1358:	8c 93       	st	X, r24
    135a:	83 c0       	rjmp	.+262    	; 0x1462 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_LOW)
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	88 23       	and	r24, r24
    1360:	a9 f4       	brne	.+42     	; 0x138c <GPIO_writePin+0xf0>
			{
				CLEAR_BIT(PORTB_REG.Byte, pin_num);
    1362:	a8 e3       	ldi	r26, 0x38	; 56
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e8 e3       	ldi	r30, 0x38	; 56
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	48 2f       	mov	r20, r24
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 2e       	mov	r0, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <GPIO_writePin+0xe4>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <GPIO_writePin+0xe0>
    1384:	80 95       	com	r24
    1386:	84 23       	and	r24, r20
    1388:	8c 93       	st	X, r24
    138a:	6b c0       	rjmp	.+214    	; 0x1462 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTB_REG.Byte, pin_num);
    138c:	a8 e3       	ldi	r26, 0x38	; 56
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e8 e3       	ldi	r30, 0x38	; 56
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	48 2f       	mov	r20, r24
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	02 2e       	mov	r0, r18
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <GPIO_writePin+0x10e>
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	0a 94       	dec	r0
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <GPIO_writePin+0x10a>
    13ae:	84 2b       	or	r24, r20
    13b0:	8c 93       	st	X, r24
    13b2:	57 c0       	rjmp	.+174    	; 0x1462 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_LOW)
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	88 23       	and	r24, r24
    13b8:	a9 f4       	brne	.+42     	; 0x13e4 <GPIO_writePin+0x148>
			{
				CLEAR_BIT(PORTC_REG.Byte, pin_num);
    13ba:	a5 e3       	ldi	r26, 0x35	; 53
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e5 e3       	ldi	r30, 0x35	; 53
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 2e       	mov	r0, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <GPIO_writePin+0x13c>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <GPIO_writePin+0x138>
    13dc:	80 95       	com	r24
    13de:	84 23       	and	r24, r20
    13e0:	8c 93       	st	X, r24
    13e2:	3f c0       	rjmp	.+126    	; 0x1462 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTC_REG.Byte, pin_num);
    13e4:	a5 e3       	ldi	r26, 0x35	; 53
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e5 e3       	ldi	r30, 0x35	; 53
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <GPIO_writePin+0x166>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <GPIO_writePin+0x162>
    1406:	84 2b       	or	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	2b c0       	rjmp	.+86     	; 0x1462 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_LOW)
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	88 23       	and	r24, r24
    1410:	a9 f4       	brne	.+42     	; 0x143c <GPIO_writePin+0x1a0>
			{
				CLEAR_BIT(PORTD_REG.Byte, pin_num);
    1412:	a2 e3       	ldi	r26, 0x32	; 50
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e2 e3       	ldi	r30, 0x32	; 50
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	48 2f       	mov	r20, r24
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	02 2e       	mov	r0, r18
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <GPIO_writePin+0x194>
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	0a 94       	dec	r0
    1432:	e2 f7       	brpl	.-8      	; 0x142c <GPIO_writePin+0x190>
    1434:	80 95       	com	r24
    1436:	84 23       	and	r24, r20
    1438:	8c 93       	st	X, r24
    143a:	13 c0       	rjmp	.+38     	; 0x1462 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTD_REG.Byte, pin_num);
    143c:	a2 e3       	ldi	r26, 0x32	; 50
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e2 e3       	ldi	r30, 0x32	; 50
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	48 2f       	mov	r20, r24
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	02 2e       	mov	r0, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <GPIO_writePin+0x1be>
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	0a 94       	dec	r0
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <GPIO_writePin+0x1ba>
    145e:	84 2b       	or	r24, r20
    1460:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	08 95       	ret

00001472 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	00 d0       	rcall	.+0      	; 0x1478 <GPIO_readPin+0x6>
    1478:	00 d0       	rcall	.+0      	; 0x147a <GPIO_readPin+0x8>
    147a:	0f 92       	push	r0
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	8a 83       	std	Y+2, r24	; 0x02
    1482:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value = LOGIC_LOW;
    1484:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	88 30       	cpi	r24, 0x08	; 8
    148a:	08 f0       	brcs	.+2      	; 0x148e <GPIO_readPin+0x1c>
    148c:	84 c0       	rjmp	.+264    	; 0x1596 <GPIO_readPin+0x124>
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	84 30       	cpi	r24, 0x04	; 4
    1492:	08 f0       	brcs	.+2      	; 0x1496 <GPIO_readPin+0x24>
    1494:	80 c0       	rjmp	.+256    	; 0x1596 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Return the pin value */
		switch (port_num)
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	3d 83       	std	Y+5, r19	; 0x05
    149e:	2c 83       	std	Y+4, r18	; 0x04
    14a0:	4c 81       	ldd	r20, Y+4	; 0x04
    14a2:	5d 81       	ldd	r21, Y+5	; 0x05
    14a4:	41 30       	cpi	r20, 0x01	; 1
    14a6:	51 05       	cpc	r21, r1
    14a8:	79 f1       	breq	.+94     	; 0x1508 <GPIO_readPin+0x96>
    14aa:	8c 81       	ldd	r24, Y+4	; 0x04
    14ac:	9d 81       	ldd	r25, Y+5	; 0x05
    14ae:	82 30       	cpi	r24, 0x02	; 2
    14b0:	91 05       	cpc	r25, r1
    14b2:	34 f4       	brge	.+12     	; 0x14c0 <GPIO_readPin+0x4e>
    14b4:	2c 81       	ldd	r18, Y+4	; 0x04
    14b6:	3d 81       	ldd	r19, Y+5	; 0x05
    14b8:	21 15       	cp	r18, r1
    14ba:	31 05       	cpc	r19, r1
    14bc:	69 f0       	breq	.+26     	; 0x14d8 <GPIO_readPin+0x66>
    14be:	6b c0       	rjmp	.+214    	; 0x1596 <GPIO_readPin+0x124>
    14c0:	4c 81       	ldd	r20, Y+4	; 0x04
    14c2:	5d 81       	ldd	r21, Y+5	; 0x05
    14c4:	42 30       	cpi	r20, 0x02	; 2
    14c6:	51 05       	cpc	r21, r1
    14c8:	b9 f1       	breq	.+110    	; 0x1538 <GPIO_readPin+0xc6>
    14ca:	8c 81       	ldd	r24, Y+4	; 0x04
    14cc:	9d 81       	ldd	r25, Y+5	; 0x05
    14ce:	83 30       	cpi	r24, 0x03	; 3
    14d0:	91 05       	cpc	r25, r1
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <GPIO_readPin+0x64>
    14d4:	49 c0       	rjmp	.+146    	; 0x1568 <GPIO_readPin+0xf6>
    14d6:	5f c0       	rjmp	.+190    	; 0x1596 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if (BIT_IS_SET(PINA_REG.Byte, pin_num))
    14d8:	e9 e3       	ldi	r30, 0x39	; 57
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	88 2f       	mov	r24, r24
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	a9 01       	movw	r20, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <GPIO_readPin+0x7e>
    14ec:	55 95       	asr	r21
    14ee:	47 95       	ror	r20
    14f0:	8a 95       	dec	r24
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <GPIO_readPin+0x7a>
    14f4:	ca 01       	movw	r24, r20
    14f6:	81 70       	andi	r24, 0x01	; 1
    14f8:	90 70       	andi	r25, 0x00	; 0
    14fa:	88 23       	and	r24, r24
    14fc:	19 f0       	breq	.+6      	; 0x1504 <GPIO_readPin+0x92>
			{
				value = LOGIC_HIGH;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	49 c0       	rjmp	.+146    	; 0x1596 <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    1504:	19 82       	std	Y+1, r1	; 0x01
    1506:	47 c0       	rjmp	.+142    	; 0x1596 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB_REG.Byte, pin_num))
    1508:	e6 e3       	ldi	r30, 0x36	; 54
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	88 2f       	mov	r24, r24
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	a9 01       	movw	r20, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <GPIO_readPin+0xae>
    151c:	55 95       	asr	r21
    151e:	47 95       	ror	r20
    1520:	8a 95       	dec	r24
    1522:	e2 f7       	brpl	.-8      	; 0x151c <GPIO_readPin+0xaa>
    1524:	ca 01       	movw	r24, r20
    1526:	81 70       	andi	r24, 0x01	; 1
    1528:	90 70       	andi	r25, 0x00	; 0
    152a:	88 23       	and	r24, r24
    152c:	19 f0       	breq	.+6      	; 0x1534 <GPIO_readPin+0xc2>
			{
				value = LOGIC_HIGH;
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	31 c0       	rjmp	.+98     	; 0x1596 <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    1534:	19 82       	std	Y+1, r1	; 0x01
    1536:	2f c0       	rjmp	.+94     	; 0x1596 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC_REG.Byte, pin_num))
    1538:	e3 e3       	ldi	r30, 0x33	; 51
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	88 2f       	mov	r24, r24
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	a9 01       	movw	r20, r18
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <GPIO_readPin+0xde>
    154c:	55 95       	asr	r21
    154e:	47 95       	ror	r20
    1550:	8a 95       	dec	r24
    1552:	e2 f7       	brpl	.-8      	; 0x154c <GPIO_readPin+0xda>
    1554:	ca 01       	movw	r24, r20
    1556:	81 70       	andi	r24, 0x01	; 1
    1558:	90 70       	andi	r25, 0x00	; 0
    155a:	88 23       	and	r24, r24
    155c:	19 f0       	breq	.+6      	; 0x1564 <GPIO_readPin+0xf2>
			{
				value = LOGIC_HIGH;
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	89 83       	std	Y+1, r24	; 0x01
    1562:	19 c0       	rjmp	.+50     	; 0x1596 <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    1564:	19 82       	std	Y+1, r1	; 0x01
    1566:	17 c0       	rjmp	.+46     	; 0x1596 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND_REG.Byte, pin_num))
    1568:	e0 e3       	ldi	r30, 0x30	; 48
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	88 2f       	mov	r24, r24
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a9 01       	movw	r20, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <GPIO_readPin+0x10e>
    157c:	55 95       	asr	r21
    157e:	47 95       	ror	r20
    1580:	8a 95       	dec	r24
    1582:	e2 f7       	brpl	.-8      	; 0x157c <GPIO_readPin+0x10a>
    1584:	ca 01       	movw	r24, r20
    1586:	81 70       	andi	r24, 0x01	; 1
    1588:	90 70       	andi	r25, 0x00	; 0
    158a:	88 23       	and	r24, r24
    158c:	19 f0       	breq	.+6      	; 0x1594 <GPIO_readPin+0x122>
			{
				value = LOGIC_HIGH;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	01 c0       	rjmp	.+2      	; 0x1596 <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    1594:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return value;
    1596:	89 81       	ldd	r24, Y+1	; 0x01
}
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <GPIO_setupPortDirection+0x6>
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <GPIO_setupPortDirection+0x8>
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	89 83       	std	Y+1, r24	; 0x01
    15b6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	84 30       	cpi	r24, 0x04	; 4
    15bc:	90 f5       	brcc	.+100    	; 0x1622 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch (port_num)
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	3c 83       	std	Y+4, r19	; 0x04
    15c6:	2b 83       	std	Y+3, r18	; 0x03
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	9c 81       	ldd	r25, Y+4	; 0x04
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	91 05       	cpc	r25, r1
    15d0:	d1 f0       	breq	.+52     	; 0x1606 <GPIO_setupPortDirection+0x5e>
    15d2:	2b 81       	ldd	r18, Y+3	; 0x03
    15d4:	3c 81       	ldd	r19, Y+4	; 0x04
    15d6:	22 30       	cpi	r18, 0x02	; 2
    15d8:	31 05       	cpc	r19, r1
    15da:	2c f4       	brge	.+10     	; 0x15e6 <GPIO_setupPortDirection+0x3e>
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	9c 81       	ldd	r25, Y+4	; 0x04
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	61 f0       	breq	.+24     	; 0x15fc <GPIO_setupPortDirection+0x54>
    15e4:	1e c0       	rjmp	.+60     	; 0x1622 <GPIO_setupPortDirection+0x7a>
    15e6:	2b 81       	ldd	r18, Y+3	; 0x03
    15e8:	3c 81       	ldd	r19, Y+4	; 0x04
    15ea:	22 30       	cpi	r18, 0x02	; 2
    15ec:	31 05       	cpc	r19, r1
    15ee:	81 f0       	breq	.+32     	; 0x1610 <GPIO_setupPortDirection+0x68>
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	9c 81       	ldd	r25, Y+4	; 0x04
    15f4:	83 30       	cpi	r24, 0x03	; 3
    15f6:	91 05       	cpc	r25, r1
    15f8:	81 f0       	breq	.+32     	; 0x161a <GPIO_setupPortDirection+0x72>
    15fa:	13 c0       	rjmp	.+38     	; 0x1622 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA_REG.Byte = direction;
    15fc:	ea e3       	ldi	r30, 0x3A	; 58
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	80 83       	st	Z, r24
    1604:	0e c0       	rjmp	.+28     	; 0x1622 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB_REG.Byte = direction;
    1606:	e7 e3       	ldi	r30, 0x37	; 55
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	80 83       	st	Z, r24
    160e:	09 c0       	rjmp	.+18     	; 0x1622 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC_REG.Byte = direction;
    1610:	e4 e3       	ldi	r30, 0x34	; 52
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	80 83       	st	Z, r24
    1618:	04 c0       	rjmp	.+8      	; 0x1622 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD_REG.Byte = direction;
    161a:	e1 e3       	ldi	r30, 0x31	; 49
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	80 83       	st	Z, r24
			break;
		}
	}
}
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	00 d0       	rcall	.+0      	; 0x1636 <GPIO_writePort+0x6>
    1636:	00 d0       	rcall	.+0      	; 0x1638 <GPIO_writePort+0x8>
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	84 30       	cpi	r24, 0x04	; 4
    1644:	90 f5       	brcc	.+100    	; 0x16aa <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port value as required */
		switch (port_num)
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	3c 83       	std	Y+4, r19	; 0x04
    164e:	2b 83       	std	Y+3, r18	; 0x03
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	9c 81       	ldd	r25, Y+4	; 0x04
    1654:	81 30       	cpi	r24, 0x01	; 1
    1656:	91 05       	cpc	r25, r1
    1658:	d1 f0       	breq	.+52     	; 0x168e <GPIO_writePort+0x5e>
    165a:	2b 81       	ldd	r18, Y+3	; 0x03
    165c:	3c 81       	ldd	r19, Y+4	; 0x04
    165e:	22 30       	cpi	r18, 0x02	; 2
    1660:	31 05       	cpc	r19, r1
    1662:	2c f4       	brge	.+10     	; 0x166e <GPIO_writePort+0x3e>
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	61 f0       	breq	.+24     	; 0x1684 <GPIO_writePort+0x54>
    166c:	1e c0       	rjmp	.+60     	; 0x16aa <GPIO_writePort+0x7a>
    166e:	2b 81       	ldd	r18, Y+3	; 0x03
    1670:	3c 81       	ldd	r19, Y+4	; 0x04
    1672:	22 30       	cpi	r18, 0x02	; 2
    1674:	31 05       	cpc	r19, r1
    1676:	81 f0       	breq	.+32     	; 0x1698 <GPIO_writePort+0x68>
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	9c 81       	ldd	r25, Y+4	; 0x04
    167c:	83 30       	cpi	r24, 0x03	; 3
    167e:	91 05       	cpc	r25, r1
    1680:	81 f0       	breq	.+32     	; 0x16a2 <GPIO_writePort+0x72>
    1682:	13 c0       	rjmp	.+38     	; 0x16aa <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA_REG.Byte = value;
    1684:	eb e3       	ldi	r30, 0x3B	; 59
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	80 83       	st	Z, r24
    168c:	0e c0       	rjmp	.+28     	; 0x16aa <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_REG.Byte = value;
    168e:	e8 e3       	ldi	r30, 0x38	; 56
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	80 83       	st	Z, r24
    1696:	09 c0       	rjmp	.+18     	; 0x16aa <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_REG.Byte = value;
    1698:	e5 e3       	ldi	r30, 0x35	; 53
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	80 83       	st	Z, r24
    16a0:	04 c0       	rjmp	.+8      	; 0x16aa <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_REG.Byte = value;
    16a2:	e2 e3       	ldi	r30, 0x32	; 50
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	80 83       	st	Z, r24
			break;
		}
	}
}
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	00 d0       	rcall	.+0      	; 0x16be <GPIO_readPort+0x6>
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <GPIO_readPort+0x8>
    16c0:	0f 92       	push	r0
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    16c8:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	84 30       	cpi	r24, 0x04	; 4
    16ce:	10 f0       	brcs	.+4      	; 0x16d4 <GPIO_readPort+0x1c>
	{
		return 0;
    16d0:	1d 82       	std	Y+5, r1	; 0x05
    16d2:	34 c0       	rjmp	.+104    	; 0x173c <GPIO_readPort+0x84>
	}
	else
	{
		/* Return the pin value */
		switch (port_num)
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	3c 83       	std	Y+4, r19	; 0x04
    16dc:	2b 83       	std	Y+3, r18	; 0x03
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	9c 81       	ldd	r25, Y+4	; 0x04
    16e2:	81 30       	cpi	r24, 0x01	; 1
    16e4:	91 05       	cpc	r25, r1
    16e6:	d1 f0       	breq	.+52     	; 0x171c <GPIO_readPort+0x64>
    16e8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ea:	3c 81       	ldd	r19, Y+4	; 0x04
    16ec:	22 30       	cpi	r18, 0x02	; 2
    16ee:	31 05       	cpc	r19, r1
    16f0:	2c f4       	brge	.+10     	; 0x16fc <GPIO_readPort+0x44>
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	61 f0       	breq	.+24     	; 0x1712 <GPIO_readPort+0x5a>
    16fa:	1e c0       	rjmp	.+60     	; 0x1738 <GPIO_readPort+0x80>
    16fc:	2b 81       	ldd	r18, Y+3	; 0x03
    16fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1700:	22 30       	cpi	r18, 0x02	; 2
    1702:	31 05       	cpc	r19, r1
    1704:	81 f0       	breq	.+32     	; 0x1726 <GPIO_readPort+0x6e>
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	83 30       	cpi	r24, 0x03	; 3
    170c:	91 05       	cpc	r25, r1
    170e:	81 f0       	breq	.+32     	; 0x1730 <GPIO_readPort+0x78>
    1710:	13 c0       	rjmp	.+38     	; 0x1738 <GPIO_readPort+0x80>
		{
		case PORTA_ID:
			value = PINA_REG.Byte;
    1712:	e9 e3       	ldi	r30, 0x39	; 57
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	0e c0       	rjmp	.+28     	; 0x1738 <GPIO_readPort+0x80>
			break;
		case PORTB_ID:
			value = PINB_REG.Byte;
    171c:	e6 e3       	ldi	r30, 0x36	; 54
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	09 c0       	rjmp	.+18     	; 0x1738 <GPIO_readPort+0x80>
			break;
		case PORTC_ID:
			value = PINC_REG.Byte;
    1726:	e3 e3       	ldi	r30, 0x33	; 51
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	04 c0       	rjmp	.+8      	; 0x1738 <GPIO_readPort+0x80>
			break;
		case PORTD_ID:
			value = PIND_REG.Byte;
    1730:	e0 e3       	ldi	r30, 0x30	; 48
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    1738:	99 81       	ldd	r25, Y+1	; 0x01
    173a:	9d 83       	std	Y+5, r25	; 0x05
    173c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <__vector_1>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(INT0_vect)
{
    174e:	1f 92       	push	r1
    1750:	0f 92       	push	r0
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	0f 92       	push	r0
    1756:	11 24       	eor	r1, r1
    1758:	2f 93       	push	r18
    175a:	3f 93       	push	r19
    175c:	4f 93       	push	r20
    175e:	5f 93       	push	r21
    1760:	6f 93       	push	r22
    1762:	7f 93       	push	r23
    1764:	8f 93       	push	r24
    1766:	9f 93       	push	r25
    1768:	af 93       	push	r26
    176a:	bf 93       	push	r27
    176c:	ef 93       	push	r30
    176e:	ff 93       	push	r31
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtrExtInt0 != NULL_PTR)
    1778:	80 91 a8 00 	lds	r24, 0x00A8
    177c:	90 91 a9 00 	lds	r25, 0x00A9
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	29 f0       	breq	.+10     	; 0x178e <__vector_1+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrExtInt0)();
    1784:	e0 91 a8 00 	lds	r30, 0x00A8
    1788:	f0 91 a9 00 	lds	r31, 0x00A9
    178c:	09 95       	icall
	}
}
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	ff 91       	pop	r31
    1794:	ef 91       	pop	r30
    1796:	bf 91       	pop	r27
    1798:	af 91       	pop	r26
    179a:	9f 91       	pop	r25
    179c:	8f 91       	pop	r24
    179e:	7f 91       	pop	r23
    17a0:	6f 91       	pop	r22
    17a2:	5f 91       	pop	r21
    17a4:	4f 91       	pop	r20
    17a6:	3f 91       	pop	r19
    17a8:	2f 91       	pop	r18
    17aa:	0f 90       	pop	r0
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	0f 90       	pop	r0
    17b0:	1f 90       	pop	r1
    17b2:	18 95       	reti

000017b4 <__vector_2>:

ISR(INT1_vect)
{
    17b4:	1f 92       	push	r1
    17b6:	0f 92       	push	r0
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	0f 92       	push	r0
    17bc:	11 24       	eor	r1, r1
    17be:	2f 93       	push	r18
    17c0:	3f 93       	push	r19
    17c2:	4f 93       	push	r20
    17c4:	5f 93       	push	r21
    17c6:	6f 93       	push	r22
    17c8:	7f 93       	push	r23
    17ca:	8f 93       	push	r24
    17cc:	9f 93       	push	r25
    17ce:	af 93       	push	r26
    17d0:	bf 93       	push	r27
    17d2:	ef 93       	push	r30
    17d4:	ff 93       	push	r31
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtrExtInt1 != NULL_PTR)
    17de:	80 91 aa 00 	lds	r24, 0x00AA
    17e2:	90 91 ab 00 	lds	r25, 0x00AB
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	29 f0       	breq	.+10     	; 0x17f4 <__vector_2+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrExtInt1)();
    17ea:	e0 91 aa 00 	lds	r30, 0x00AA
    17ee:	f0 91 ab 00 	lds	r31, 0x00AB
    17f2:	09 95       	icall
	}
}
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	ff 91       	pop	r31
    17fa:	ef 91       	pop	r30
    17fc:	bf 91       	pop	r27
    17fe:	af 91       	pop	r26
    1800:	9f 91       	pop	r25
    1802:	8f 91       	pop	r24
    1804:	7f 91       	pop	r23
    1806:	6f 91       	pop	r22
    1808:	5f 91       	pop	r21
    180a:	4f 91       	pop	r20
    180c:	3f 91       	pop	r19
    180e:	2f 91       	pop	r18
    1810:	0f 90       	pop	r0
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	0f 90       	pop	r0
    1816:	1f 90       	pop	r1
    1818:	18 95       	reti

0000181a <__vector_3>:

ISR(INT2_vect)
{
    181a:	1f 92       	push	r1
    181c:	0f 92       	push	r0
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	0f 92       	push	r0
    1822:	11 24       	eor	r1, r1
    1824:	2f 93       	push	r18
    1826:	3f 93       	push	r19
    1828:	4f 93       	push	r20
    182a:	5f 93       	push	r21
    182c:	6f 93       	push	r22
    182e:	7f 93       	push	r23
    1830:	8f 93       	push	r24
    1832:	9f 93       	push	r25
    1834:	af 93       	push	r26
    1836:	bf 93       	push	r27
    1838:	ef 93       	push	r30
    183a:	ff 93       	push	r31
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtrExtInt2 != NULL_PTR)
    1844:	80 91 ac 00 	lds	r24, 0x00AC
    1848:	90 91 ad 00 	lds	r25, 0x00AD
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	29 f0       	breq	.+10     	; 0x185a <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrExtInt2)();
    1850:	e0 91 ac 00 	lds	r30, 0x00AC
    1854:	f0 91 ad 00 	lds	r31, 0x00AD
    1858:	09 95       	icall
	}
}
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	ff 91       	pop	r31
    1860:	ef 91       	pop	r30
    1862:	bf 91       	pop	r27
    1864:	af 91       	pop	r26
    1866:	9f 91       	pop	r25
    1868:	8f 91       	pop	r24
    186a:	7f 91       	pop	r23
    186c:	6f 91       	pop	r22
    186e:	5f 91       	pop	r21
    1870:	4f 91       	pop	r20
    1872:	3f 91       	pop	r19
    1874:	2f 91       	pop	r18
    1876:	0f 90       	pop	r0
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	0f 90       	pop	r0
    187c:	1f 90       	pop	r1
    187e:	18 95       	reti

00001880 <EXT_INT0_init>:
/*
 * Description :
 * Function to initialize the EXT INT0 driver.
 */
void EXT_INT0_init(const EXT_INT0_ConfigType *Config_Ptr)
{
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	00 d0       	rcall	.+0      	; 0x1886 <EXT_INT0_init+0x6>
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	9a 83       	std	Y+2, r25	; 0x02
    188c:	89 83       	std	Y+1, r24	; 0x01
	/************************** MCUCR Description **************************
	 * ISC01, ISC00   	Interrupt Sense Control 0 , selected in configuration
	 ***********************************************************************/
	MCUCR_REG.Byte = (MCUCR_REG.Byte & 0xFC) | ((Config_Ptr->mode) & 0x03);
    188e:	a5 e5       	ldi	r26, 0x55	; 85
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e5 e5       	ldi	r30, 0x55	; 85
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	98 2f       	mov	r25, r24
    189a:	9c 7f       	andi	r25, 0xFC	; 252
    189c:	e9 81       	ldd	r30, Y+1	; 0x01
    189e:	fa 81       	ldd	r31, Y+2	; 0x02
    18a0:	80 81       	ld	r24, Z
    18a2:	83 70       	andi	r24, 0x03	; 3
    18a4:	89 2b       	or	r24, r25
    18a6:	8c 93       	st	X, r24

	/* Setup the INT0 pin as input */
	GPIO_setupPinDirection(INT0_PORTID, INT0_PINID, PIN_INPUT);
    18a8:	83 e0       	ldi	r24, 0x03	; 3
    18aa:	62 e0       	ldi	r22, 0x02	; 2
    18ac:	40 e0       	ldi	r20, 0x00	; 0
    18ae:	0e 94 63 08 	call	0x10c6	; 0x10c6 <GPIO_setupPinDirection>

	/* Enable External Interrupt Request 0 */
	GICR_REG.Bits.INT0_Bit = 1;
    18b2:	eb e5       	ldi	r30, 0x5B	; 91
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	80 64       	ori	r24, 0x40	; 64
    18ba:	80 83       	st	Z, r24
}
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <EXT_INT1_init>:
/*
 * Description :
 * Function to initialize the EXT INT1 driver.
 */
void EXT_INT1_init(const EXT_INT1_ConfigType *Config_Ptr)
{
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	00 d0       	rcall	.+0      	; 0x18cc <EXT_INT1_init+0x6>
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	9a 83       	std	Y+2, r25	; 0x02
    18d2:	89 83       	std	Y+1, r24	; 0x01
	/************************** MCUCR Description **************************
	 * ISC11, ISC10   	Interrupt Sense Control 1 , selected in configuration
	 ***********************************************************************/
	MCUCR_REG.Byte = (MCUCR_REG.Byte & 0xF3)
    18d4:	a5 e5       	ldi	r26, 0x55	; 85
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e5 e5       	ldi	r30, 0x55	; 85
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	28 2f       	mov	r18, r24
    18e0:	23 7f       	andi	r18, 0xF3	; 243
    18e2:	e9 81       	ldd	r30, Y+1	; 0x01
    18e4:	fa 81       	ldd	r31, Y+2	; 0x02
    18e6:	80 81       	ld	r24, Z
    18e8:	88 2f       	mov	r24, r24
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	83 70       	andi	r24, 0x03	; 3
    18ee:	90 70       	andi	r25, 0x00	; 0
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	82 2b       	or	r24, r18
    18fa:	8c 93       	st	X, r24
			| (((Config_Ptr->mode) & 0x03) << 2);

	/* Setup the INT1 pin as input */
	GPIO_setupPinDirection(INT1_PORTID, INT1_PINID, PIN_INPUT);
    18fc:	83 e0       	ldi	r24, 0x03	; 3
    18fe:	63 e0       	ldi	r22, 0x03	; 3
    1900:	40 e0       	ldi	r20, 0x00	; 0
    1902:	0e 94 63 08 	call	0x10c6	; 0x10c6 <GPIO_setupPinDirection>

	/* Enable External Interrupt Request 1 */
	GICR_REG.Bits.INT1_Bit = 1;
    1906:	eb e5       	ldi	r30, 0x5B	; 91
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	80 68       	ori	r24, 0x80	; 128
    190e:	80 83       	st	Z, r24
}
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <EXT_INT2_init>:
/*
 * Description :
 * Function to initialize the EXT INT2 driver.
 */
void EXT_INT2_init(const EXT_INT2_ConfigType *Config_Ptr)
{
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	00 d0       	rcall	.+0      	; 0x1920 <EXT_INT2_init+0x6>
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	9a 83       	std	Y+2, r25	; 0x02
    1926:	89 83       	std	Y+1, r24	; 0x01
	/************************** MCUCSR Description *************************
	 * ISC2 		Interrupt Sense Control 2 , selected in configuration
	 ***********************************************************************/
	if (Config_Ptr->mode == EXT_INT2_FALLING_EDGE)
    1928:	e9 81       	ldd	r30, Y+1	; 0x01
    192a:	fa 81       	ldd	r31, Y+2	; 0x02
    192c:	80 81       	ld	r24, Z
    192e:	88 23       	and	r24, r24
    1930:	31 f4       	brne	.+12     	; 0x193e <EXT_INT2_init+0x24>
	{
		MCUCSR_REG.Bits.ISC2_Bit = 0;
    1932:	e4 e5       	ldi	r30, 0x54	; 84
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	8f 7b       	andi	r24, 0xBF	; 191
    193a:	80 83       	st	Z, r24
    193c:	05 c0       	rjmp	.+10     	; 0x1948 <EXT_INT2_init+0x2e>
	}
	else
	{
		MCUCSR_REG.Bits.ISC2_Bit = 1;
    193e:	e4 e5       	ldi	r30, 0x54	; 84
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	80 64       	ori	r24, 0x40	; 64
    1946:	80 83       	st	Z, r24
	}

	/* Setup the INT2 pin as input */
	GPIO_setupPinDirection(INT2_PORTID, INT2_PINID, PIN_INPUT);
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	62 e0       	ldi	r22, 0x02	; 2
    194c:	40 e0       	ldi	r20, 0x00	; 0
    194e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <GPIO_setupPinDirection>

	/* Enable External Interrupt Request 2 */
	GICR_REG.Bits.INT2_Bit = 1;
    1952:	eb e5       	ldi	r30, 0x5B	; 91
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	80 62       	ori	r24, 0x20	; 32
    195a:	80 83       	st	Z, r24
}
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <EXT_INT0_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address.
 */
void EXT_INT0_setCallBack(void (*a_ptr)(void))
{
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	00 d0       	rcall	.+0      	; 0x196c <EXT_INT0_setCallBack+0x6>
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    1970:	9a 83       	std	Y+2, r25	; 0x02
    1972:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrExtInt0 = a_ptr;
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	9a 81       	ldd	r25, Y+2	; 0x02
    1978:	90 93 a9 00 	sts	0x00A9, r25
    197c:	80 93 a8 00 	sts	0x00A8, r24
}
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	08 95       	ret

0000198a <EXT_INT1_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address.
 */
void EXT_INT1_setCallBack(void (*a_ptr)(void))
{
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	00 d0       	rcall	.+0      	; 0x1990 <EXT_INT1_setCallBack+0x6>
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	9a 83       	std	Y+2, r25	; 0x02
    1996:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrExtInt1 = a_ptr;
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	9a 81       	ldd	r25, Y+2	; 0x02
    199c:	90 93 ab 00 	sts	0x00AB, r25
    19a0:	80 93 aa 00 	sts	0x00AA, r24
}
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	08 95       	ret

000019ae <EXT_INT2_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address.
 */
void EXT_INT2_setCallBack(void (*a_ptr)(void))
{
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	00 d0       	rcall	.+0      	; 0x19b4 <EXT_INT2_setCallBack+0x6>
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	9a 83       	std	Y+2, r25	; 0x02
    19ba:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrExtInt2 = a_ptr;
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	9a 81       	ldd	r25, Y+2	; 0x02
    19c0:	90 93 ad 00 	sts	0x00AD, r25
    19c4:	80 93 ac 00 	sts	0x00AC, r24
}
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(const ADC_ConfigType *Config_Ptr)
{
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	00 d0       	rcall	.+0      	; 0x19d8 <ADC_init+0x6>
    19d8:	0f 92       	push	r0
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	9a 83       	std	Y+2, r25	; 0x02
    19e0:	89 83       	std	Y+1, r24	; 0x01
	/* ADMUX Register Bits Description:
	 * REFS1:0 = (Config_Ptr->ref_volt) << 6
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX |= (1 << ADLAR);
    19e2:	a7 e2       	ldi	r26, 0x27	; 39
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e7 e2       	ldi	r30, 0x27	; 39
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	80 62       	ori	r24, 0x20	; 32
    19ee:	8c 93       	st	X, r24
	ADMUX = (ADMUX & 0x00) | ((Config_Ptr->ref_volt) << 6);
    19f0:	e7 e2       	ldi	r30, 0x27	; 39
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	a7 e2       	ldi	r26, 0x27	; 39
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e9 81       	ldd	r30, Y+1	; 0x01
    19fc:	fa 81       	ldd	r31, Y+2	; 0x02
    19fe:	80 81       	ld	r24, Z
    1a00:	88 2f       	mov	r24, r24
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	00 24       	eor	r0, r0
    1a06:	96 95       	lsr	r25
    1a08:	87 95       	ror	r24
    1a0a:	07 94       	ror	r0
    1a0c:	96 95       	lsr	r25
    1a0e:	87 95       	ror	r24
    1a10:	07 94       	ror	r0
    1a12:	98 2f       	mov	r25, r24
    1a14:	80 2d       	mov	r24, r0
    1a16:	8c 93       	st	X, r24
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = (Config_Ptr->prescaler)
	 */
	ADCSRA = (ADCSRA & 0xF8) | (Config_Ptr->prescaler);
    1a18:	a6 e2       	ldi	r26, 0x26	; 38
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e6 e2       	ldi	r30, 0x26	; 38
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	98 2f       	mov	r25, r24
    1a24:	98 7f       	andi	r25, 0xF8	; 248
    1a26:	e9 81       	ldd	r30, Y+1	; 0x01
    1a28:	fa 81       	ldd	r31, Y+2	; 0x02
    1a2a:	81 81       	ldd	r24, Z+1	; 0x01
    1a2c:	89 2b       	or	r24, r25
    1a2e:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADEN);
    1a30:	a6 e2       	ldi	r26, 0x26	; 38
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e6 e2       	ldi	r30, 0x26	; 38
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	80 68       	ori	r24, 0x80	; 128
    1a3c:	8c 93       	st	X, r24

}
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	0f 92       	push	r0
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	87 70       	andi	r24, 0x07	; 7
    1a5a:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    1a5c:	a7 e2       	ldi	r26, 0x27	; 39
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e7 e2       	ldi	r30, 0x27	; 39
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	80 7e       	andi	r24, 0xE0	; 224
    1a68:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
    1a6a:	a7 e2       	ldi	r26, 0x27	; 39
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e7 e2       	ldi	r30, 0x27	; 39
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	90 81       	ld	r25, Z
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	89 2b       	or	r24, r25
    1a78:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADSC); /* Start conversion write '1' to ADSC */
    1a7a:	a6 e2       	ldi	r26, 0x26	; 38
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e6 e2       	ldi	r30, 0x26	; 38
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	80 64       	ori	r24, 0x40	; 64
    1a86:	8c 93       	st	X, r24
	while (BIT_IS_CLEAR(ADCSRA, ADIF))
    1a88:	e6 e2       	ldi	r30, 0x26	; 38
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	88 2f       	mov	r24, r24
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	80 71       	andi	r24, 0x10	; 16
    1a94:	90 70       	andi	r25, 0x00	; 0
    1a96:	00 97       	sbiw	r24, 0x00	; 0
    1a98:	b9 f3       	breq	.-18     	; 0x1a88 <ADC_readChannel+0x3e>
		; /* Wait for conversion to complete, ADIF becomes '1' */
	SET_BIT(ADCSRA, ADIF); /* Clear ADIF by write '1' to it :) */
    1a9a:	a6 e2       	ldi	r26, 0x26	; 38
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e6 e2       	ldi	r30, 0x26	; 38
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	80 61       	ori	r24, 0x10	; 16
    1aa6:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
    1aa8:	e4 e2       	ldi	r30, 0x24	; 36
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	91 81       	ldd	r25, Z+1	; 0x01
}
    1ab0:	0f 90       	pop	r0
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <WaterPumb_Init>:
#include "WaterPumb.h"
#include "../../LIB/common_macros.h"
#include "../../MCAL/GPIO/gpio.h"

void WaterPumb_Init(void)
{
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
	/*out pin*/
	GPIO_setupPinDirection(WaterPumb_PORT, WaterPumb_PIN, PIN_OUTPUT);
    1ac0:	82 e0       	ldi	r24, 0x02	; 2
    1ac2:	64 e0       	ldi	r22, 0x04	; 4
    1ac4:	41 e0       	ldi	r20, 0x01	; 1
    1ac6:	0e 94 63 08 	call	0x10c6	; 0x10c6 <GPIO_setupPinDirection>
	/*Stop*/
	GPIO_writePin(WaterPumb_PORT, WaterPumb_PIN, LOGIC_LOW);
    1aca:	82 e0       	ldi	r24, 0x02	; 2
    1acc:	64 e0       	ldi	r22, 0x04	; 4
    1ace:	40 e0       	ldi	r20, 0x00	; 0
    1ad0:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
}
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <WaterPumb_States>:

void WaterPumb_States(WaterPumb_State state)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	0f 92       	push	r0
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    1ae4:	89 83       	std	Y+1, r24	; 0x01
	if (state == on)
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	81 30       	cpi	r24, 0x01	; 1
    1aea:	31 f4       	brne	.+12     	; 0x1af8 <WaterPumb_States+0x1e>
	{
		GPIO_writePin(WaterPumb_PORT, WaterPumb_PIN, LOGIC_HIGH);
    1aec:	82 e0       	ldi	r24, 0x02	; 2
    1aee:	64 e0       	ldi	r22, 0x04	; 4
    1af0:	41 e0       	ldi	r20, 0x01	; 1
    1af2:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
    1af6:	05 c0       	rjmp	.+10     	; 0x1b02 <WaterPumb_States+0x28>
	}
	else
	{
		GPIO_writePin(WaterPumb_PORT, WaterPumb_PIN, LOGIC_LOW);
    1af8:	82 e0       	ldi	r24, 0x02	; 2
    1afa:	64 e0       	ldi	r22, 0x04	; 4
    1afc:	40 e0       	ldi	r20, 0x00	; 0
    1afe:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
	}
}
    1b02:	0f 90       	pop	r0
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	08 95       	ret

00001b0a <Soilsensor_getValue>:
#include "../../LIB/std_types.h"
#include "SoilSensor.h"
#include "../../MCAL/ADC/adc.h"

uint16 Soilsensor_getValue(void)
{
    1b0a:	df 93       	push	r29
    1b0c:	cf 93       	push	r28
    1b0e:	00 d0       	rcall	.+0      	; 0x1b10 <Soilsensor_getValue+0x6>
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
	uint16 adc_value = 0;
    1b14:	1a 82       	std	Y+2, r1	; 0x02
    1b16:	19 82       	std	Y+1, r1	; 0x01
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <ADC_readChannel>
    1b1e:	9a 83       	std	Y+2, r25	; 0x02
    1b20:	89 83       	std	Y+1, r24	; 0x01
	return adc_value;
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	08 95       	ret

00001b30 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	2e 97       	sbiw	r28, 0x0e	; 14
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	61 e0       	ldi	r22, 0x01	; 1
    1b48:	41 e0       	ldi	r20, 0x01	; 1
    1b4a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	62 e0       	ldi	r22, 0x02	; 2
    1b52:	41 e0       	ldi	r20, 0x01	; 1
    1b54:	0e 94 63 08 	call	0x10c6	; 0x10c6 <GPIO_setupPinDirection>
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	a0 ea       	ldi	r26, 0xA0	; 160
    1b5e:	b1 e4       	ldi	r27, 0x41	; 65
    1b60:	8b 87       	std	Y+11, r24	; 0x0b
    1b62:	9c 87       	std	Y+12, r25	; 0x0c
    1b64:	ad 87       	std	Y+13, r26	; 0x0d
    1b66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	4a e7       	ldi	r20, 0x7A	; 122
    1b76:	55 e4       	ldi	r21, 0x45	; 69
    1b78:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	8f 83       	std	Y+7, r24	; 0x07
    1b82:	98 87       	std	Y+8, r25	; 0x08
    1b84:	a9 87       	std	Y+9, r26	; 0x09
    1b86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b88:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8a:	78 85       	ldd	r23, Y+8	; 0x08
    1b8c:	89 85       	ldd	r24, Y+9	; 0x09
    1b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e8       	ldi	r20, 0x80	; 128
    1b96:	5f e3       	ldi	r21, 0x3F	; 63
    1b98:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1b9c:	88 23       	and	r24, r24
    1b9e:	2c f4       	brge	.+10     	; 0x1baa <LCD_init+0x7a>
		__ticks = 1;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	9e 83       	std	Y+6, r25	; 0x06
    1ba6:	8d 83       	std	Y+5, r24	; 0x05
    1ba8:	3f c0       	rjmp	.+126    	; 0x1c28 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1baa:	6f 81       	ldd	r22, Y+7	; 0x07
    1bac:	78 85       	ldd	r23, Y+8	; 0x08
    1bae:	89 85       	ldd	r24, Y+9	; 0x09
    1bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	3f ef       	ldi	r19, 0xFF	; 255
    1bb6:	4f e7       	ldi	r20, 0x7F	; 127
    1bb8:	57 e4       	ldi	r21, 0x47	; 71
    1bba:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1bbe:	18 16       	cp	r1, r24
    1bc0:	4c f5       	brge	.+82     	; 0x1c14 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	40 e2       	ldi	r20, 0x20	; 32
    1bd0:	51 e4       	ldi	r21, 0x41	; 65
    1bd2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	bc 01       	movw	r22, r24
    1bdc:	cd 01       	movw	r24, r26
    1bde:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	9e 83       	std	Y+6, r25	; 0x06
    1be8:	8d 83       	std	Y+5, r24	; 0x05
    1bea:	0f c0       	rjmp	.+30     	; 0x1c0a <LCD_init+0xda>
    1bec:	80 e9       	ldi	r24, 0x90	; 144
    1bee:	91 e0       	ldi	r25, 0x01	; 1
    1bf0:	9c 83       	std	Y+4, r25	; 0x04
    1bf2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	f1 f7       	brne	.-4      	; 0x1bf8 <LCD_init+0xc8>
    1bfc:	9c 83       	std	Y+4, r25	; 0x04
    1bfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c00:	8d 81       	ldd	r24, Y+5	; 0x05
    1c02:	9e 81       	ldd	r25, Y+6	; 0x06
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	9e 83       	std	Y+6, r25	; 0x06
    1c08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	69 f7       	brne	.-38     	; 0x1bec <LCD_init+0xbc>
    1c12:	14 c0       	rjmp	.+40     	; 0x1c3c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c14:	6f 81       	ldd	r22, Y+7	; 0x07
    1c16:	78 85       	ldd	r23, Y+8	; 0x08
    1c18:	89 85       	ldd	r24, Y+9	; 0x09
    1c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	9e 83       	std	Y+6, r25	; 0x06
    1c26:	8d 83       	std	Y+5, r24	; 0x05
    1c28:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2c:	9a 83       	std	Y+2, r25	; 0x02
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	9a 81       	ldd	r25, Y+2	; 0x02
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	f1 f7       	brne	.-4      	; 0x1c34 <LCD_init+0x104>
    1c38:	9a 83       	std	Y+2, r25	; 0x02
    1c3a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20); /* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, PIN_OUTPUT);
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	63 e0       	ldi	r22, 0x03	; 3
    1c40:	41 e0       	ldi	r20, 0x01	; 1
    1c42:	0e 94 63 08 	call	0x10c6	; 0x10c6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, PIN_OUTPUT);
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	64 e0       	ldi	r22, 0x04	; 4
    1c4a:	41 e0       	ldi	r20, 0x01	; 1
    1c4c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, PIN_OUTPUT);
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	65 e0       	ldi	r22, 0x05	; 5
    1c54:	41 e0       	ldi	r20, 0x01	; 1
    1c56:	0e 94 63 08 	call	0x10c6	; 0x10c6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, PIN_OUTPUT);
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	66 e0       	ldi	r22, 0x06	; 6
    1c5e:	41 e0       	ldi	r20, 0x01	; 1
    1c60:	0e 94 63 08 	call	0x10c6	; 0x10c6 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1c64:	83 e3       	ldi	r24, 0x33	; 51
    1c66:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1c6a:	82 e3       	ldi	r24, 0x32	; 50
    1c6c:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1c70:	88 e2       	ldi	r24, 0x28	; 40
    1c72:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1c76:	8c e0       	ldi	r24, 0x0C	; 12
    1c78:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_sendCommand>
}
    1c82:	2e 96       	adiw	r28, 0x0e	; 14
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	cd bf       	out	0x3d, r28	; 61
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1c94:	0f 93       	push	r16
    1c96:	1f 93       	push	r17
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	c3 56       	subi	r28, 0x63	; 99
    1ca2:	d0 40       	sbci	r29, 0x00	; 0
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	fe 01       	movw	r30, r28
    1cb0:	ed 59       	subi	r30, 0x9D	; 157
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS=0 */
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	61 e0       	ldi	r22, 0x01	; 1
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	e1 5a       	subi	r30, 0xA1	; 161
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	a0 e8       	ldi	r26, 0x80	; 128
    1ccc:	bf e3       	ldi	r27, 0x3F	; 63
    1cce:	80 83       	st	Z, r24
    1cd0:	91 83       	std	Z+1, r25	; 0x01
    1cd2:	a2 83       	std	Z+2, r26	; 0x02
    1cd4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd6:	8e 01       	movw	r16, r28
    1cd8:	05 5a       	subi	r16, 0xA5	; 165
    1cda:	1f 4f       	sbci	r17, 0xFF	; 255
    1cdc:	fe 01       	movw	r30, r28
    1cde:	e1 5a       	subi	r30, 0xA1	; 161
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	60 81       	ld	r22, Z
    1ce4:	71 81       	ldd	r23, Z+1	; 0x01
    1ce6:	82 81       	ldd	r24, Z+2	; 0x02
    1ce8:	93 81       	ldd	r25, Z+3	; 0x03
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	4a e7       	ldi	r20, 0x7A	; 122
    1cf0:	55 e4       	ldi	r21, 0x45	; 69
    1cf2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	80 83       	st	Z, r24
    1cfe:	91 83       	std	Z+1, r25	; 0x01
    1d00:	a2 83       	std	Z+2, r26	; 0x02
    1d02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d04:	fe 01       	movw	r30, r28
    1d06:	e5 5a       	subi	r30, 0xA5	; 165
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	60 81       	ld	r22, Z
    1d0c:	71 81       	ldd	r23, Z+1	; 0x01
    1d0e:	82 81       	ldd	r24, Z+2	; 0x02
    1d10:	93 81       	ldd	r25, Z+3	; 0x03
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e8       	ldi	r20, 0x80	; 128
    1d18:	5f e3       	ldi	r21, 0x3F	; 63
    1d1a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1d1e:	88 23       	and	r24, r24
    1d20:	44 f4       	brge	.+16     	; 0x1d32 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1d22:	fe 01       	movw	r30, r28
    1d24:	e7 5a       	subi	r30, 0xA7	; 167
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	91 83       	std	Z+1, r25	; 0x01
    1d2e:	80 83       	st	Z, r24
    1d30:	64 c0       	rjmp	.+200    	; 0x1dfa <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1d32:	fe 01       	movw	r30, r28
    1d34:	e5 5a       	subi	r30, 0xA5	; 165
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	60 81       	ld	r22, Z
    1d3a:	71 81       	ldd	r23, Z+1	; 0x01
    1d3c:	82 81       	ldd	r24, Z+2	; 0x02
    1d3e:	93 81       	ldd	r25, Z+3	; 0x03
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	3f ef       	ldi	r19, 0xFF	; 255
    1d44:	4f e7       	ldi	r20, 0x7F	; 127
    1d46:	57 e4       	ldi	r21, 0x47	; 71
    1d48:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1d4c:	18 16       	cp	r1, r24
    1d4e:	0c f0       	brlt	.+2      	; 0x1d52 <LCD_sendCommand+0xbe>
    1d50:	43 c0       	rjmp	.+134    	; 0x1dd8 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d52:	fe 01       	movw	r30, r28
    1d54:	e1 5a       	subi	r30, 0xA1	; 161
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	60 81       	ld	r22, Z
    1d5a:	71 81       	ldd	r23, Z+1	; 0x01
    1d5c:	82 81       	ldd	r24, Z+2	; 0x02
    1d5e:	93 81       	ldd	r25, Z+3	; 0x03
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e2       	ldi	r20, 0x20	; 32
    1d66:	51 e4       	ldi	r21, 0x41	; 65
    1d68:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	8e 01       	movw	r16, r28
    1d72:	07 5a       	subi	r16, 0xA7	; 167
    1d74:	1f 4f       	sbci	r17, 0xFF	; 255
    1d76:	bc 01       	movw	r22, r24
    1d78:	cd 01       	movw	r24, r26
    1d7a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	f8 01       	movw	r30, r16
    1d84:	91 83       	std	Z+1, r25	; 0x01
    1d86:	80 83       	st	Z, r24
    1d88:	1f c0       	rjmp	.+62     	; 0x1dc8 <LCD_sendCommand+0x134>
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	e9 5a       	subi	r30, 0xA9	; 169
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	80 e9       	ldi	r24, 0x90	; 144
    1d92:	91 e0       	ldi	r25, 0x01	; 1
    1d94:	91 83       	std	Z+1, r25	; 0x01
    1d96:	80 83       	st	Z, r24
    1d98:	fe 01       	movw	r30, r28
    1d9a:	e9 5a       	subi	r30, 0xA9	; 169
    1d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9e:	80 81       	ld	r24, Z
    1da0:	91 81       	ldd	r25, Z+1	; 0x01
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <LCD_sendCommand+0x10e>
    1da6:	fe 01       	movw	r30, r28
    1da8:	e9 5a       	subi	r30, 0xA9	; 169
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	91 83       	std	Z+1, r25	; 0x01
    1dae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db0:	de 01       	movw	r26, r28
    1db2:	a7 5a       	subi	r26, 0xA7	; 167
    1db4:	bf 4f       	sbci	r27, 0xFF	; 255
    1db6:	fe 01       	movw	r30, r28
    1db8:	e7 5a       	subi	r30, 0xA7	; 167
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	80 81       	ld	r24, Z
    1dbe:	91 81       	ldd	r25, Z+1	; 0x01
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	11 96       	adiw	r26, 0x01	; 1
    1dc4:	9c 93       	st	X, r25
    1dc6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc8:	fe 01       	movw	r30, r28
    1dca:	e7 5a       	subi	r30, 0xA7	; 167
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	80 81       	ld	r24, Z
    1dd0:	91 81       	ldd	r25, Z+1	; 0x01
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	d1 f6       	brne	.-76     	; 0x1d8a <LCD_sendCommand+0xf6>
    1dd6:	27 c0       	rjmp	.+78     	; 0x1e26 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd8:	8e 01       	movw	r16, r28
    1dda:	07 5a       	subi	r16, 0xA7	; 167
    1ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dde:	fe 01       	movw	r30, r28
    1de0:	e5 5a       	subi	r30, 0xA5	; 165
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	60 81       	ld	r22, Z
    1de6:	71 81       	ldd	r23, Z+1	; 0x01
    1de8:	82 81       	ldd	r24, Z+2	; 0x02
    1dea:	93 81       	ldd	r25, Z+3	; 0x03
    1dec:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	f8 01       	movw	r30, r16
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	80 83       	st	Z, r24
    1dfa:	de 01       	movw	r26, r28
    1dfc:	ab 5a       	subi	r26, 0xAB	; 171
    1dfe:	bf 4f       	sbci	r27, 0xFF	; 255
    1e00:	fe 01       	movw	r30, r28
    1e02:	e7 5a       	subi	r30, 0xA7	; 167
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	80 81       	ld	r24, Z
    1e08:	91 81       	ldd	r25, Z+1	; 0x01
    1e0a:	8d 93       	st	X+, r24
    1e0c:	9c 93       	st	X, r25
    1e0e:	fe 01       	movw	r30, r28
    1e10:	eb 5a       	subi	r30, 0xAB	; 171
    1e12:	ff 4f       	sbci	r31, 0xFF	; 255
    1e14:	80 81       	ld	r24, Z
    1e16:	91 81       	ldd	r25, Z+1	; 0x01
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <LCD_sendCommand+0x184>
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	eb 5a       	subi	r30, 0xAB	; 171
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	91 83       	std	Z+1, r25	; 0x01
    1e24:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	62 e0       	ldi	r22, 0x02	; 2
    1e2a:	41 e0       	ldi	r20, 0x01	; 1
    1e2c:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
    1e30:	fe 01       	movw	r30, r28
    1e32:	ef 5a       	subi	r30, 0xAF	; 175
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	a0 e8       	ldi	r26, 0x80	; 128
    1e3c:	bf e3       	ldi	r27, 0x3F	; 63
    1e3e:	80 83       	st	Z, r24
    1e40:	91 83       	std	Z+1, r25	; 0x01
    1e42:	a2 83       	std	Z+2, r26	; 0x02
    1e44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e46:	8e 01       	movw	r16, r28
    1e48:	03 5b       	subi	r16, 0xB3	; 179
    1e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	ef 5a       	subi	r30, 0xAF	; 175
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	60 81       	ld	r22, Z
    1e54:	71 81       	ldd	r23, Z+1	; 0x01
    1e56:	82 81       	ldd	r24, Z+2	; 0x02
    1e58:	93 81       	ldd	r25, Z+3	; 0x03
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	4a e7       	ldi	r20, 0x7A	; 122
    1e60:	55 e4       	ldi	r21, 0x45	; 69
    1e62:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	f8 01       	movw	r30, r16
    1e6c:	80 83       	st	Z, r24
    1e6e:	91 83       	std	Z+1, r25	; 0x01
    1e70:	a2 83       	std	Z+2, r26	; 0x02
    1e72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e74:	fe 01       	movw	r30, r28
    1e76:	e3 5b       	subi	r30, 0xB3	; 179
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	60 81       	ld	r22, Z
    1e7c:	71 81       	ldd	r23, Z+1	; 0x01
    1e7e:	82 81       	ldd	r24, Z+2	; 0x02
    1e80:	93 81       	ldd	r25, Z+3	; 0x03
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e8       	ldi	r20, 0x80	; 128
    1e88:	5f e3       	ldi	r21, 0x3F	; 63
    1e8a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1e8e:	88 23       	and	r24, r24
    1e90:	44 f4       	brge	.+16     	; 0x1ea2 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1e92:	fe 01       	movw	r30, r28
    1e94:	e5 5b       	subi	r30, 0xB5	; 181
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	91 83       	std	Z+1, r25	; 0x01
    1e9e:	80 83       	st	Z, r24
    1ea0:	64 c0       	rjmp	.+200    	; 0x1f6a <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	e3 5b       	subi	r30, 0xB3	; 179
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	60 81       	ld	r22, Z
    1eaa:	71 81       	ldd	r23, Z+1	; 0x01
    1eac:	82 81       	ldd	r24, Z+2	; 0x02
    1eae:	93 81       	ldd	r25, Z+3	; 0x03
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	3f ef       	ldi	r19, 0xFF	; 255
    1eb4:	4f e7       	ldi	r20, 0x7F	; 127
    1eb6:	57 e4       	ldi	r21, 0x47	; 71
    1eb8:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1ebc:	18 16       	cp	r1, r24
    1ebe:	0c f0       	brlt	.+2      	; 0x1ec2 <LCD_sendCommand+0x22e>
    1ec0:	43 c0       	rjmp	.+134    	; 0x1f48 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec2:	fe 01       	movw	r30, r28
    1ec4:	ef 5a       	subi	r30, 0xAF	; 175
    1ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec8:	60 81       	ld	r22, Z
    1eca:	71 81       	ldd	r23, Z+1	; 0x01
    1ecc:	82 81       	ldd	r24, Z+2	; 0x02
    1ece:	93 81       	ldd	r25, Z+3	; 0x03
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e2       	ldi	r20, 0x20	; 32
    1ed6:	51 e4       	ldi	r21, 0x41	; 65
    1ed8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	8e 01       	movw	r16, r28
    1ee2:	05 5b       	subi	r16, 0xB5	; 181
    1ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	f8 01       	movw	r30, r16
    1ef4:	91 83       	std	Z+1, r25	; 0x01
    1ef6:	80 83       	st	Z, r24
    1ef8:	1f c0       	rjmp	.+62     	; 0x1f38 <LCD_sendCommand+0x2a4>
    1efa:	fe 01       	movw	r30, r28
    1efc:	e7 5b       	subi	r30, 0xB7	; 183
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	80 e9       	ldi	r24, 0x90	; 144
    1f02:	91 e0       	ldi	r25, 0x01	; 1
    1f04:	91 83       	std	Z+1, r25	; 0x01
    1f06:	80 83       	st	Z, r24
    1f08:	fe 01       	movw	r30, r28
    1f0a:	e7 5b       	subi	r30, 0xB7	; 183
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	80 81       	ld	r24, Z
    1f10:	91 81       	ldd	r25, Z+1	; 0x01
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	f1 f7       	brne	.-4      	; 0x1f12 <LCD_sendCommand+0x27e>
    1f16:	fe 01       	movw	r30, r28
    1f18:	e7 5b       	subi	r30, 0xB7	; 183
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	91 83       	std	Z+1, r25	; 0x01
    1f1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f20:	de 01       	movw	r26, r28
    1f22:	a5 5b       	subi	r26, 0xB5	; 181
    1f24:	bf 4f       	sbci	r27, 0xFF	; 255
    1f26:	fe 01       	movw	r30, r28
    1f28:	e5 5b       	subi	r30, 0xB5	; 181
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	80 81       	ld	r24, Z
    1f2e:	91 81       	ldd	r25, Z+1	; 0x01
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	11 96       	adiw	r26, 0x01	; 1
    1f34:	9c 93       	st	X, r25
    1f36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f38:	fe 01       	movw	r30, r28
    1f3a:	e5 5b       	subi	r30, 0xB5	; 181
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	80 81       	ld	r24, Z
    1f40:	91 81       	ldd	r25, Z+1	; 0x01
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	d1 f6       	brne	.-76     	; 0x1efa <LCD_sendCommand+0x266>
    1f46:	27 c0       	rjmp	.+78     	; 0x1f96 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f48:	8e 01       	movw	r16, r28
    1f4a:	05 5b       	subi	r16, 0xB5	; 181
    1f4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e3 5b       	subi	r30, 0xB3	; 179
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	60 81       	ld	r22, Z
    1f56:	71 81       	ldd	r23, Z+1	; 0x01
    1f58:	82 81       	ldd	r24, Z+2	; 0x02
    1f5a:	93 81       	ldd	r25, Z+3	; 0x03
    1f5c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	f8 01       	movw	r30, r16
    1f66:	91 83       	std	Z+1, r25	; 0x01
    1f68:	80 83       	st	Z, r24
    1f6a:	de 01       	movw	r26, r28
    1f6c:	a9 5b       	subi	r26, 0xB9	; 185
    1f6e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f70:	fe 01       	movw	r30, r28
    1f72:	e5 5b       	subi	r30, 0xB5	; 181
    1f74:	ff 4f       	sbci	r31, 0xFF	; 255
    1f76:	80 81       	ld	r24, Z
    1f78:	91 81       	ldd	r25, Z+1	; 0x01
    1f7a:	8d 93       	st	X+, r24
    1f7c:	9c 93       	st	X, r25
    1f7e:	fe 01       	movw	r30, r28
    1f80:	e9 5b       	subi	r30, 0xB9	; 185
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	80 81       	ld	r24, Z
    1f86:	91 81       	ldd	r25, Z+1	; 0x01
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <LCD_sendCommand+0x2f4>
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	e9 5b       	subi	r30, 0xB9	; 185
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	91 83       	std	Z+1, r25	; 0x01
    1f94:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command, 4));
    1f96:	fe 01       	movw	r30, r28
    1f98:	ed 59       	subi	r30, 0x9D	; 157
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	80 81       	ld	r24, Z
    1f9e:	88 2f       	mov	r24, r24
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	80 71       	andi	r24, 0x10	; 16
    1fa4:	90 70       	andi	r25, 0x00	; 0
    1fa6:	95 95       	asr	r25
    1fa8:	87 95       	ror	r24
    1faa:	95 95       	asr	r25
    1fac:	87 95       	ror	r24
    1fae:	95 95       	asr	r25
    1fb0:	87 95       	ror	r24
    1fb2:	95 95       	asr	r25
    1fb4:	87 95       	ror	r24
    1fb6:	98 2f       	mov	r25, r24
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	63 e0       	ldi	r22, 0x03	; 3
    1fbc:	49 2f       	mov	r20, r25
    1fbe:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command, 5));
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	ed 59       	subi	r30, 0x9D	; 157
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	80 81       	ld	r24, Z
    1fca:	88 2f       	mov	r24, r24
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	80 72       	andi	r24, 0x20	; 32
    1fd0:	90 70       	andi	r25, 0x00	; 0
    1fd2:	95 95       	asr	r25
    1fd4:	87 95       	ror	r24
    1fd6:	95 95       	asr	r25
    1fd8:	87 95       	ror	r24
    1fda:	95 95       	asr	r25
    1fdc:	87 95       	ror	r24
    1fde:	95 95       	asr	r25
    1fe0:	87 95       	ror	r24
    1fe2:	95 95       	asr	r25
    1fe4:	87 95       	ror	r24
    1fe6:	98 2f       	mov	r25, r24
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	64 e0       	ldi	r22, 0x04	; 4
    1fec:	49 2f       	mov	r20, r25
    1fee:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command, 6));
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	ed 59       	subi	r30, 0x9D	; 157
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	80 81       	ld	r24, Z
    1ffa:	88 2f       	mov	r24, r24
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	80 74       	andi	r24, 0x40	; 64
    2000:	90 70       	andi	r25, 0x00	; 0
    2002:	08 2e       	mov	r0, r24
    2004:	89 2f       	mov	r24, r25
    2006:	00 0c       	add	r0, r0
    2008:	88 1f       	adc	r24, r24
    200a:	99 0b       	sbc	r25, r25
    200c:	00 0c       	add	r0, r0
    200e:	88 1f       	adc	r24, r24
    2010:	99 1f       	adc	r25, r25
    2012:	98 2f       	mov	r25, r24
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	65 e0       	ldi	r22, 0x05	; 5
    2018:	49 2f       	mov	r20, r25
    201a:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command, 7));
    201e:	fe 01       	movw	r30, r28
    2020:	ed 59       	subi	r30, 0x9D	; 157
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	80 81       	ld	r24, Z
    2026:	98 2f       	mov	r25, r24
    2028:	99 1f       	adc	r25, r25
    202a:	99 27       	eor	r25, r25
    202c:	99 1f       	adc	r25, r25
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	66 e0       	ldi	r22, 0x06	; 6
    2032:	49 2f       	mov	r20, r25
    2034:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
    2038:	fe 01       	movw	r30, r28
    203a:	ed 5b       	subi	r30, 0xBD	; 189
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	a0 e8       	ldi	r26, 0x80	; 128
    2044:	bf e3       	ldi	r27, 0x3F	; 63
    2046:	80 83       	st	Z, r24
    2048:	91 83       	std	Z+1, r25	; 0x01
    204a:	a2 83       	std	Z+2, r26	; 0x02
    204c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    204e:	8e 01       	movw	r16, r28
    2050:	01 5c       	subi	r16, 0xC1	; 193
    2052:	1f 4f       	sbci	r17, 0xFF	; 255
    2054:	fe 01       	movw	r30, r28
    2056:	ed 5b       	subi	r30, 0xBD	; 189
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	60 81       	ld	r22, Z
    205c:	71 81       	ldd	r23, Z+1	; 0x01
    205e:	82 81       	ldd	r24, Z+2	; 0x02
    2060:	93 81       	ldd	r25, Z+3	; 0x03
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	4a e7       	ldi	r20, 0x7A	; 122
    2068:	55 e4       	ldi	r21, 0x45	; 69
    206a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	f8 01       	movw	r30, r16
    2074:	80 83       	st	Z, r24
    2076:	91 83       	std	Z+1, r25	; 0x01
    2078:	a2 83       	std	Z+2, r26	; 0x02
    207a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    207c:	fe 01       	movw	r30, r28
    207e:	ff 96       	adiw	r30, 0x3f	; 63
    2080:	60 81       	ld	r22, Z
    2082:	71 81       	ldd	r23, Z+1	; 0x01
    2084:	82 81       	ldd	r24, Z+2	; 0x02
    2086:	93 81       	ldd	r25, Z+3	; 0x03
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	40 e8       	ldi	r20, 0x80	; 128
    208e:	5f e3       	ldi	r21, 0x3F	; 63
    2090:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2094:	88 23       	and	r24, r24
    2096:	2c f4       	brge	.+10     	; 0x20a2 <LCD_sendCommand+0x40e>
		__ticks = 1;
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	9e af       	std	Y+62, r25	; 0x3e
    209e:	8d af       	std	Y+61, r24	; 0x3d
    20a0:	46 c0       	rjmp	.+140    	; 0x212e <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    20a2:	fe 01       	movw	r30, r28
    20a4:	ff 96       	adiw	r30, 0x3f	; 63
    20a6:	60 81       	ld	r22, Z
    20a8:	71 81       	ldd	r23, Z+1	; 0x01
    20aa:	82 81       	ldd	r24, Z+2	; 0x02
    20ac:	93 81       	ldd	r25, Z+3	; 0x03
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	3f ef       	ldi	r19, 0xFF	; 255
    20b2:	4f e7       	ldi	r20, 0x7F	; 127
    20b4:	57 e4       	ldi	r21, 0x47	; 71
    20b6:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    20ba:	18 16       	cp	r1, r24
    20bc:	64 f5       	brge	.+88     	; 0x2116 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20be:	fe 01       	movw	r30, r28
    20c0:	ed 5b       	subi	r30, 0xBD	; 189
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	60 81       	ld	r22, Z
    20c6:	71 81       	ldd	r23, Z+1	; 0x01
    20c8:	82 81       	ldd	r24, Z+2	; 0x02
    20ca:	93 81       	ldd	r25, Z+3	; 0x03
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e2       	ldi	r20, 0x20	; 32
    20d2:	51 e4       	ldi	r21, 0x41	; 65
    20d4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	bc 01       	movw	r22, r24
    20de:	cd 01       	movw	r24, r26
    20e0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	9e af       	std	Y+62, r25	; 0x3e
    20ea:	8d af       	std	Y+61, r24	; 0x3d
    20ec:	0f c0       	rjmp	.+30     	; 0x210c <LCD_sendCommand+0x478>
    20ee:	80 e9       	ldi	r24, 0x90	; 144
    20f0:	91 e0       	ldi	r25, 0x01	; 1
    20f2:	9c af       	std	Y+60, r25	; 0x3c
    20f4:	8b af       	std	Y+59, r24	; 0x3b
    20f6:	8b ad       	ldd	r24, Y+59	; 0x3b
    20f8:	9c ad       	ldd	r25, Y+60	; 0x3c
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <LCD_sendCommand+0x466>
    20fe:	9c af       	std	Y+60, r25	; 0x3c
    2100:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2102:	8d ad       	ldd	r24, Y+61	; 0x3d
    2104:	9e ad       	ldd	r25, Y+62	; 0x3e
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	9e af       	std	Y+62, r25	; 0x3e
    210a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210c:	8d ad       	ldd	r24, Y+61	; 0x3d
    210e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	69 f7       	brne	.-38     	; 0x20ee <LCD_sendCommand+0x45a>
    2114:	16 c0       	rjmp	.+44     	; 0x2142 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2116:	fe 01       	movw	r30, r28
    2118:	ff 96       	adiw	r30, 0x3f	; 63
    211a:	60 81       	ld	r22, Z
    211c:	71 81       	ldd	r23, Z+1	; 0x01
    211e:	82 81       	ldd	r24, Z+2	; 0x02
    2120:	93 81       	ldd	r25, Z+3	; 0x03
    2122:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	9e af       	std	Y+62, r25	; 0x3e
    212c:	8d af       	std	Y+61, r24	; 0x3d
    212e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2130:	9e ad       	ldd	r25, Y+62	; 0x3e
    2132:	9a af       	std	Y+58, r25	; 0x3a
    2134:	89 af       	std	Y+57, r24	; 0x39
    2136:	89 ad       	ldd	r24, Y+57	; 0x39
    2138:	9a ad       	ldd	r25, Y+58	; 0x3a
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <LCD_sendCommand+0x4a6>
    213e:	9a af       	std	Y+58, r25	; 0x3a
    2140:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	62 e0       	ldi	r22, 0x02	; 2
    2146:	40 e0       	ldi	r20, 0x00	; 0
    2148:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	a0 e8       	ldi	r26, 0x80	; 128
    2152:	bf e3       	ldi	r27, 0x3F	; 63
    2154:	8d ab       	std	Y+53, r24	; 0x35
    2156:	9e ab       	std	Y+54, r25	; 0x36
    2158:	af ab       	std	Y+55, r26	; 0x37
    215a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215c:	6d a9       	ldd	r22, Y+53	; 0x35
    215e:	7e a9       	ldd	r23, Y+54	; 0x36
    2160:	8f a9       	ldd	r24, Y+55	; 0x37
    2162:	98 ad       	ldd	r25, Y+56	; 0x38
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	4a e7       	ldi	r20, 0x7A	; 122
    216a:	55 e4       	ldi	r21, 0x45	; 69
    216c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	89 ab       	std	Y+49, r24	; 0x31
    2176:	9a ab       	std	Y+50, r25	; 0x32
    2178:	ab ab       	std	Y+51, r26	; 0x33
    217a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    217c:	69 a9       	ldd	r22, Y+49	; 0x31
    217e:	7a a9       	ldd	r23, Y+50	; 0x32
    2180:	8b a9       	ldd	r24, Y+51	; 0x33
    2182:	9c a9       	ldd	r25, Y+52	; 0x34
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e8       	ldi	r20, 0x80	; 128
    218a:	5f e3       	ldi	r21, 0x3F	; 63
    218c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2190:	88 23       	and	r24, r24
    2192:	2c f4       	brge	.+10     	; 0x219e <LCD_sendCommand+0x50a>
		__ticks = 1;
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	98 ab       	std	Y+48, r25	; 0x30
    219a:	8f a7       	std	Y+47, r24	; 0x2f
    219c:	3f c0       	rjmp	.+126    	; 0x221c <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    219e:	69 a9       	ldd	r22, Y+49	; 0x31
    21a0:	7a a9       	ldd	r23, Y+50	; 0x32
    21a2:	8b a9       	ldd	r24, Y+51	; 0x33
    21a4:	9c a9       	ldd	r25, Y+52	; 0x34
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	3f ef       	ldi	r19, 0xFF	; 255
    21aa:	4f e7       	ldi	r20, 0x7F	; 127
    21ac:	57 e4       	ldi	r21, 0x47	; 71
    21ae:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    21b2:	18 16       	cp	r1, r24
    21b4:	4c f5       	brge	.+82     	; 0x2208 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b6:	6d a9       	ldd	r22, Y+53	; 0x35
    21b8:	7e a9       	ldd	r23, Y+54	; 0x36
    21ba:	8f a9       	ldd	r24, Y+55	; 0x37
    21bc:	98 ad       	ldd	r25, Y+56	; 0x38
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e2       	ldi	r20, 0x20	; 32
    21c4:	51 e4       	ldi	r21, 0x41	; 65
    21c6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	bc 01       	movw	r22, r24
    21d0:	cd 01       	movw	r24, r26
    21d2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	98 ab       	std	Y+48, r25	; 0x30
    21dc:	8f a7       	std	Y+47, r24	; 0x2f
    21de:	0f c0       	rjmp	.+30     	; 0x21fe <LCD_sendCommand+0x56a>
    21e0:	80 e9       	ldi	r24, 0x90	; 144
    21e2:	91 e0       	ldi	r25, 0x01	; 1
    21e4:	9e a7       	std	Y+46, r25	; 0x2e
    21e6:	8d a7       	std	Y+45, r24	; 0x2d
    21e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    21ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <LCD_sendCommand+0x558>
    21f0:	9e a7       	std	Y+46, r25	; 0x2e
    21f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    21f6:	98 a9       	ldd	r25, Y+48	; 0x30
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	98 ab       	std	Y+48, r25	; 0x30
    21fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2200:	98 a9       	ldd	r25, Y+48	; 0x30
    2202:	00 97       	sbiw	r24, 0x00	; 0
    2204:	69 f7       	brne	.-38     	; 0x21e0 <LCD_sendCommand+0x54c>
    2206:	14 c0       	rjmp	.+40     	; 0x2230 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2208:	69 a9       	ldd	r22, Y+49	; 0x31
    220a:	7a a9       	ldd	r23, Y+50	; 0x32
    220c:	8b a9       	ldd	r24, Y+51	; 0x33
    220e:	9c a9       	ldd	r25, Y+52	; 0x34
    2210:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	98 ab       	std	Y+48, r25	; 0x30
    221a:	8f a7       	std	Y+47, r24	; 0x2f
    221c:	8f a5       	ldd	r24, Y+47	; 0x2f
    221e:	98 a9       	ldd	r25, Y+48	; 0x30
    2220:	9c a7       	std	Y+44, r25	; 0x2c
    2222:	8b a7       	std	Y+43, r24	; 0x2b
    2224:	8b a5       	ldd	r24, Y+43	; 0x2b
    2226:	9c a5       	ldd	r25, Y+44	; 0x2c
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	f1 f7       	brne	.-4      	; 0x2228 <LCD_sendCommand+0x594>
    222c:	9c a7       	std	Y+44, r25	; 0x2c
    222e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	62 e0       	ldi	r22, 0x02	; 2
    2234:	41 e0       	ldi	r20, 0x01	; 1
    2236:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	a0 e8       	ldi	r26, 0x80	; 128
    2240:	bf e3       	ldi	r27, 0x3F	; 63
    2242:	8f a3       	std	Y+39, r24	; 0x27
    2244:	98 a7       	std	Y+40, r25	; 0x28
    2246:	a9 a7       	std	Y+41, r26	; 0x29
    2248:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224a:	6f a1       	ldd	r22, Y+39	; 0x27
    224c:	78 a5       	ldd	r23, Y+40	; 0x28
    224e:	89 a5       	ldd	r24, Y+41	; 0x29
    2250:	9a a5       	ldd	r25, Y+42	; 0x2a
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	4a e7       	ldi	r20, 0x7A	; 122
    2258:	55 e4       	ldi	r21, 0x45	; 69
    225a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	8b a3       	std	Y+35, r24	; 0x23
    2264:	9c a3       	std	Y+36, r25	; 0x24
    2266:	ad a3       	std	Y+37, r26	; 0x25
    2268:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    226a:	6b a1       	ldd	r22, Y+35	; 0x23
    226c:	7c a1       	ldd	r23, Y+36	; 0x24
    226e:	8d a1       	ldd	r24, Y+37	; 0x25
    2270:	9e a1       	ldd	r25, Y+38	; 0x26
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	40 e8       	ldi	r20, 0x80	; 128
    2278:	5f e3       	ldi	r21, 0x3F	; 63
    227a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    227e:	88 23       	and	r24, r24
    2280:	2c f4       	brge	.+10     	; 0x228c <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	9a a3       	std	Y+34, r25	; 0x22
    2288:	89 a3       	std	Y+33, r24	; 0x21
    228a:	3f c0       	rjmp	.+126    	; 0x230a <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    228c:	6b a1       	ldd	r22, Y+35	; 0x23
    228e:	7c a1       	ldd	r23, Y+36	; 0x24
    2290:	8d a1       	ldd	r24, Y+37	; 0x25
    2292:	9e a1       	ldd	r25, Y+38	; 0x26
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	3f ef       	ldi	r19, 0xFF	; 255
    2298:	4f e7       	ldi	r20, 0x7F	; 127
    229a:	57 e4       	ldi	r21, 0x47	; 71
    229c:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    22a0:	18 16       	cp	r1, r24
    22a2:	4c f5       	brge	.+82     	; 0x22f6 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a4:	6f a1       	ldd	r22, Y+39	; 0x27
    22a6:	78 a5       	ldd	r23, Y+40	; 0x28
    22a8:	89 a5       	ldd	r24, Y+41	; 0x29
    22aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e2       	ldi	r20, 0x20	; 32
    22b2:	51 e4       	ldi	r21, 0x41	; 65
    22b4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	bc 01       	movw	r22, r24
    22be:	cd 01       	movw	r24, r26
    22c0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	9a a3       	std	Y+34, r25	; 0x22
    22ca:	89 a3       	std	Y+33, r24	; 0x21
    22cc:	0f c0       	rjmp	.+30     	; 0x22ec <LCD_sendCommand+0x658>
    22ce:	80 e9       	ldi	r24, 0x90	; 144
    22d0:	91 e0       	ldi	r25, 0x01	; 1
    22d2:	98 a3       	std	Y+32, r25	; 0x20
    22d4:	8f 8f       	std	Y+31, r24	; 0x1f
    22d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22d8:	98 a1       	ldd	r25, Y+32	; 0x20
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <LCD_sendCommand+0x646>
    22de:	98 a3       	std	Y+32, r25	; 0x20
    22e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e2:	89 a1       	ldd	r24, Y+33	; 0x21
    22e4:	9a a1       	ldd	r25, Y+34	; 0x22
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	9a a3       	std	Y+34, r25	; 0x22
    22ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ec:	89 a1       	ldd	r24, Y+33	; 0x21
    22ee:	9a a1       	ldd	r25, Y+34	; 0x22
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	69 f7       	brne	.-38     	; 0x22ce <LCD_sendCommand+0x63a>
    22f4:	14 c0       	rjmp	.+40     	; 0x231e <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f6:	6b a1       	ldd	r22, Y+35	; 0x23
    22f8:	7c a1       	ldd	r23, Y+36	; 0x24
    22fa:	8d a1       	ldd	r24, Y+37	; 0x25
    22fc:	9e a1       	ldd	r25, Y+38	; 0x26
    22fe:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	9a a3       	std	Y+34, r25	; 0x22
    2308:	89 a3       	std	Y+33, r24	; 0x21
    230a:	89 a1       	ldd	r24, Y+33	; 0x21
    230c:	9a a1       	ldd	r25, Y+34	; 0x22
    230e:	9e 8f       	std	Y+30, r25	; 0x1e
    2310:	8d 8f       	std	Y+29, r24	; 0x1d
    2312:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2314:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	f1 f7       	brne	.-4      	; 0x2316 <LCD_sendCommand+0x682>
    231a:	9e 8f       	std	Y+30, r25	; 0x1e
    231c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command, 0));
    231e:	fe 01       	movw	r30, r28
    2320:	ed 59       	subi	r30, 0x9D	; 157
    2322:	ff 4f       	sbci	r31, 0xFF	; 255
    2324:	80 81       	ld	r24, Z
    2326:	98 2f       	mov	r25, r24
    2328:	91 70       	andi	r25, 0x01	; 1
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	63 e0       	ldi	r22, 0x03	; 3
    232e:	49 2f       	mov	r20, r25
    2330:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command, 1));
    2334:	fe 01       	movw	r30, r28
    2336:	ed 59       	subi	r30, 0x9D	; 157
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	80 81       	ld	r24, Z
    233c:	88 2f       	mov	r24, r24
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	82 70       	andi	r24, 0x02	; 2
    2342:	90 70       	andi	r25, 0x00	; 0
    2344:	95 95       	asr	r25
    2346:	87 95       	ror	r24
    2348:	98 2f       	mov	r25, r24
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	64 e0       	ldi	r22, 0x04	; 4
    234e:	49 2f       	mov	r20, r25
    2350:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command, 2));
    2354:	fe 01       	movw	r30, r28
    2356:	ed 59       	subi	r30, 0x9D	; 157
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	80 81       	ld	r24, Z
    235c:	88 2f       	mov	r24, r24
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	84 70       	andi	r24, 0x04	; 4
    2362:	90 70       	andi	r25, 0x00	; 0
    2364:	95 95       	asr	r25
    2366:	87 95       	ror	r24
    2368:	95 95       	asr	r25
    236a:	87 95       	ror	r24
    236c:	98 2f       	mov	r25, r24
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	65 e0       	ldi	r22, 0x05	; 5
    2372:	49 2f       	mov	r20, r25
    2374:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command, 3));
    2378:	fe 01       	movw	r30, r28
    237a:	ed 59       	subi	r30, 0x9D	; 157
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	80 81       	ld	r24, Z
    2380:	88 2f       	mov	r24, r24
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	88 70       	andi	r24, 0x08	; 8
    2386:	90 70       	andi	r25, 0x00	; 0
    2388:	95 95       	asr	r25
    238a:	87 95       	ror	r24
    238c:	95 95       	asr	r25
    238e:	87 95       	ror	r24
    2390:	95 95       	asr	r25
    2392:	87 95       	ror	r24
    2394:	98 2f       	mov	r25, r24
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	66 e0       	ldi	r22, 0x06	; 6
    239a:	49 2f       	mov	r20, r25
    239c:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	a0 e8       	ldi	r26, 0x80	; 128
    23a6:	bf e3       	ldi	r27, 0x3F	; 63
    23a8:	89 8f       	std	Y+25, r24	; 0x19
    23aa:	9a 8f       	std	Y+26, r25	; 0x1a
    23ac:	ab 8f       	std	Y+27, r26	; 0x1b
    23ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b0:	69 8d       	ldd	r22, Y+25	; 0x19
    23b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	4a e7       	ldi	r20, 0x7A	; 122
    23be:	55 e4       	ldi	r21, 0x45	; 69
    23c0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	8d 8b       	std	Y+21, r24	; 0x15
    23ca:	9e 8b       	std	Y+22, r25	; 0x16
    23cc:	af 8b       	std	Y+23, r26	; 0x17
    23ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23d0:	6d 89       	ldd	r22, Y+21	; 0x15
    23d2:	7e 89       	ldd	r23, Y+22	; 0x16
    23d4:	8f 89       	ldd	r24, Y+23	; 0x17
    23d6:	98 8d       	ldd	r25, Y+24	; 0x18
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e8       	ldi	r20, 0x80	; 128
    23de:	5f e3       	ldi	r21, 0x3F	; 63
    23e0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    23e4:	88 23       	and	r24, r24
    23e6:	2c f4       	brge	.+10     	; 0x23f2 <LCD_sendCommand+0x75e>
		__ticks = 1;
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	9c 8b       	std	Y+20, r25	; 0x14
    23ee:	8b 8b       	std	Y+19, r24	; 0x13
    23f0:	3f c0       	rjmp	.+126    	; 0x2470 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    23f2:	6d 89       	ldd	r22, Y+21	; 0x15
    23f4:	7e 89       	ldd	r23, Y+22	; 0x16
    23f6:	8f 89       	ldd	r24, Y+23	; 0x17
    23f8:	98 8d       	ldd	r25, Y+24	; 0x18
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	3f ef       	ldi	r19, 0xFF	; 255
    23fe:	4f e7       	ldi	r20, 0x7F	; 127
    2400:	57 e4       	ldi	r21, 0x47	; 71
    2402:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2406:	18 16       	cp	r1, r24
    2408:	4c f5       	brge	.+82     	; 0x245c <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240a:	69 8d       	ldd	r22, Y+25	; 0x19
    240c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    240e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2410:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 e2       	ldi	r20, 0x20	; 32
    2418:	51 e4       	ldi	r21, 0x41	; 65
    241a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	bc 01       	movw	r22, r24
    2424:	cd 01       	movw	r24, r26
    2426:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	9c 8b       	std	Y+20, r25	; 0x14
    2430:	8b 8b       	std	Y+19, r24	; 0x13
    2432:	0f c0       	rjmp	.+30     	; 0x2452 <LCD_sendCommand+0x7be>
    2434:	80 e9       	ldi	r24, 0x90	; 144
    2436:	91 e0       	ldi	r25, 0x01	; 1
    2438:	9a 8b       	std	Y+18, r25	; 0x12
    243a:	89 8b       	std	Y+17, r24	; 0x11
    243c:	89 89       	ldd	r24, Y+17	; 0x11
    243e:	9a 89       	ldd	r25, Y+18	; 0x12
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	f1 f7       	brne	.-4      	; 0x2440 <LCD_sendCommand+0x7ac>
    2444:	9a 8b       	std	Y+18, r25	; 0x12
    2446:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2448:	8b 89       	ldd	r24, Y+19	; 0x13
    244a:	9c 89       	ldd	r25, Y+20	; 0x14
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	9c 8b       	std	Y+20, r25	; 0x14
    2450:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2452:	8b 89       	ldd	r24, Y+19	; 0x13
    2454:	9c 89       	ldd	r25, Y+20	; 0x14
    2456:	00 97       	sbiw	r24, 0x00	; 0
    2458:	69 f7       	brne	.-38     	; 0x2434 <LCD_sendCommand+0x7a0>
    245a:	14 c0       	rjmp	.+40     	; 0x2484 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245c:	6d 89       	ldd	r22, Y+21	; 0x15
    245e:	7e 89       	ldd	r23, Y+22	; 0x16
    2460:	8f 89       	ldd	r24, Y+23	; 0x17
    2462:	98 8d       	ldd	r25, Y+24	; 0x18
    2464:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	9c 8b       	std	Y+20, r25	; 0x14
    246e:	8b 8b       	std	Y+19, r24	; 0x13
    2470:	8b 89       	ldd	r24, Y+19	; 0x13
    2472:	9c 89       	ldd	r25, Y+20	; 0x14
    2474:	98 8b       	std	Y+16, r25	; 0x10
    2476:	8f 87       	std	Y+15, r24	; 0x0f
    2478:	8f 85       	ldd	r24, Y+15	; 0x0f
    247a:	98 89       	ldd	r25, Y+16	; 0x10
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	f1 f7       	brne	.-4      	; 0x247c <LCD_sendCommand+0x7e8>
    2480:	98 8b       	std	Y+16, r25	; 0x10
    2482:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	62 e0       	ldi	r22, 0x02	; 2
    2488:	40 e0       	ldi	r20, 0x00	; 0
    248a:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	a0 e8       	ldi	r26, 0x80	; 128
    2494:	bf e3       	ldi	r27, 0x3F	; 63
    2496:	8b 87       	std	Y+11, r24	; 0x0b
    2498:	9c 87       	std	Y+12, r25	; 0x0c
    249a:	ad 87       	std	Y+13, r26	; 0x0d
    249c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    249e:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	4a e7       	ldi	r20, 0x7A	; 122
    24ac:	55 e4       	ldi	r21, 0x45	; 69
    24ae:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	8f 83       	std	Y+7, r24	; 0x07
    24b8:	98 87       	std	Y+8, r25	; 0x08
    24ba:	a9 87       	std	Y+9, r26	; 0x09
    24bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24be:	6f 81       	ldd	r22, Y+7	; 0x07
    24c0:	78 85       	ldd	r23, Y+8	; 0x08
    24c2:	89 85       	ldd	r24, Y+9	; 0x09
    24c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e8       	ldi	r20, 0x80	; 128
    24cc:	5f e3       	ldi	r21, 0x3F	; 63
    24ce:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    24d2:	88 23       	and	r24, r24
    24d4:	2c f4       	brge	.+10     	; 0x24e0 <LCD_sendCommand+0x84c>
		__ticks = 1;
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	9e 83       	std	Y+6, r25	; 0x06
    24dc:	8d 83       	std	Y+5, r24	; 0x05
    24de:	3f c0       	rjmp	.+126    	; 0x255e <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    24e0:	6f 81       	ldd	r22, Y+7	; 0x07
    24e2:	78 85       	ldd	r23, Y+8	; 0x08
    24e4:	89 85       	ldd	r24, Y+9	; 0x09
    24e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	3f ef       	ldi	r19, 0xFF	; 255
    24ec:	4f e7       	ldi	r20, 0x7F	; 127
    24ee:	57 e4       	ldi	r21, 0x47	; 71
    24f0:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    24f4:	18 16       	cp	r1, r24
    24f6:	4c f5       	brge	.+82     	; 0x254a <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    24fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	40 e2       	ldi	r20, 0x20	; 32
    2506:	51 e4       	ldi	r21, 0x41	; 65
    2508:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	bc 01       	movw	r22, r24
    2512:	cd 01       	movw	r24, r26
    2514:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	9e 83       	std	Y+6, r25	; 0x06
    251e:	8d 83       	std	Y+5, r24	; 0x05
    2520:	0f c0       	rjmp	.+30     	; 0x2540 <LCD_sendCommand+0x8ac>
    2522:	80 e9       	ldi	r24, 0x90	; 144
    2524:	91 e0       	ldi	r25, 0x01	; 1
    2526:	9c 83       	std	Y+4, r25	; 0x04
    2528:	8b 83       	std	Y+3, r24	; 0x03
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	9c 81       	ldd	r25, Y+4	; 0x04
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	f1 f7       	brne	.-4      	; 0x252e <LCD_sendCommand+0x89a>
    2532:	9c 83       	std	Y+4, r25	; 0x04
    2534:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2536:	8d 81       	ldd	r24, Y+5	; 0x05
    2538:	9e 81       	ldd	r25, Y+6	; 0x06
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	9e 83       	std	Y+6, r25	; 0x06
    253e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2540:	8d 81       	ldd	r24, Y+5	; 0x05
    2542:	9e 81       	ldd	r25, Y+6	; 0x06
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	69 f7       	brne	.-38     	; 0x2522 <LCD_sendCommand+0x88e>
    2548:	14 c0       	rjmp	.+40     	; 0x2572 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254a:	6f 81       	ldd	r22, Y+7	; 0x07
    254c:	78 85       	ldd	r23, Y+8	; 0x08
    254e:	89 85       	ldd	r24, Y+9	; 0x09
    2550:	9a 85       	ldd	r25, Y+10	; 0x0a
    2552:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	9e 83       	std	Y+6, r25	; 0x06
    255c:	8d 83       	std	Y+5, r24	; 0x05
    255e:	8d 81       	ldd	r24, Y+5	; 0x05
    2560:	9e 81       	ldd	r25, Y+6	; 0x06
    2562:	9a 83       	std	Y+2, r25	; 0x02
    2564:	89 83       	std	Y+1, r24	; 0x01
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	9a 81       	ldd	r25, Y+2	; 0x02
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	f1 f7       	brne	.-4      	; 0x256a <LCD_sendCommand+0x8d6>
    256e:	9a 83       	std	Y+2, r25	; 0x02
    2570:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID, command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2572:	cd 59       	subi	r28, 0x9D	; 157
    2574:	df 4f       	sbci	r29, 0xFF	; 255
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	1f 91       	pop	r17
    2586:	0f 91       	pop	r16
    2588:	08 95       	ret

0000258a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    258a:	0f 93       	push	r16
    258c:	1f 93       	push	r17
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	c3 56       	subi	r28, 0x63	; 99
    2598:	d0 40       	sbci	r29, 0x00	; 0
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	de bf       	out	0x3e, r29	; 62
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	cd bf       	out	0x3d, r28	; 61
    25a4:	fe 01       	movw	r30, r28
    25a6:	ed 59       	subi	r30, 0x9D	; 157
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS=1 */
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	61 e0       	ldi	r22, 0x01	; 1
    25b0:	41 e0       	ldi	r20, 0x01	; 1
    25b2:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
    25b6:	fe 01       	movw	r30, r28
    25b8:	e1 5a       	subi	r30, 0xA1	; 161
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	a0 e8       	ldi	r26, 0x80	; 128
    25c2:	bf e3       	ldi	r27, 0x3F	; 63
    25c4:	80 83       	st	Z, r24
    25c6:	91 83       	std	Z+1, r25	; 0x01
    25c8:	a2 83       	std	Z+2, r26	; 0x02
    25ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25cc:	8e 01       	movw	r16, r28
    25ce:	05 5a       	subi	r16, 0xA5	; 165
    25d0:	1f 4f       	sbci	r17, 0xFF	; 255
    25d2:	fe 01       	movw	r30, r28
    25d4:	e1 5a       	subi	r30, 0xA1	; 161
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	60 81       	ld	r22, Z
    25da:	71 81       	ldd	r23, Z+1	; 0x01
    25dc:	82 81       	ldd	r24, Z+2	; 0x02
    25de:	93 81       	ldd	r25, Z+3	; 0x03
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	4a e7       	ldi	r20, 0x7A	; 122
    25e6:	55 e4       	ldi	r21, 0x45	; 69
    25e8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	f8 01       	movw	r30, r16
    25f2:	80 83       	st	Z, r24
    25f4:	91 83       	std	Z+1, r25	; 0x01
    25f6:	a2 83       	std	Z+2, r26	; 0x02
    25f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25fa:	fe 01       	movw	r30, r28
    25fc:	e5 5a       	subi	r30, 0xA5	; 165
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	60 81       	ld	r22, Z
    2602:	71 81       	ldd	r23, Z+1	; 0x01
    2604:	82 81       	ldd	r24, Z+2	; 0x02
    2606:	93 81       	ldd	r25, Z+3	; 0x03
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e8       	ldi	r20, 0x80	; 128
    260e:	5f e3       	ldi	r21, 0x3F	; 63
    2610:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2614:	88 23       	and	r24, r24
    2616:	44 f4       	brge	.+16     	; 0x2628 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2618:	fe 01       	movw	r30, r28
    261a:	e7 5a       	subi	r30, 0xA7	; 167
    261c:	ff 4f       	sbci	r31, 0xFF	; 255
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	91 83       	std	Z+1, r25	; 0x01
    2624:	80 83       	st	Z, r24
    2626:	64 c0       	rjmp	.+200    	; 0x26f0 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2628:	fe 01       	movw	r30, r28
    262a:	e5 5a       	subi	r30, 0xA5	; 165
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	60 81       	ld	r22, Z
    2630:	71 81       	ldd	r23, Z+1	; 0x01
    2632:	82 81       	ldd	r24, Z+2	; 0x02
    2634:	93 81       	ldd	r25, Z+3	; 0x03
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	3f ef       	ldi	r19, 0xFF	; 255
    263a:	4f e7       	ldi	r20, 0x7F	; 127
    263c:	57 e4       	ldi	r21, 0x47	; 71
    263e:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2642:	18 16       	cp	r1, r24
    2644:	0c f0       	brlt	.+2      	; 0x2648 <LCD_displayCharacter+0xbe>
    2646:	43 c0       	rjmp	.+134    	; 0x26ce <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2648:	fe 01       	movw	r30, r28
    264a:	e1 5a       	subi	r30, 0xA1	; 161
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	60 81       	ld	r22, Z
    2650:	71 81       	ldd	r23, Z+1	; 0x01
    2652:	82 81       	ldd	r24, Z+2	; 0x02
    2654:	93 81       	ldd	r25, Z+3	; 0x03
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	40 e2       	ldi	r20, 0x20	; 32
    265c:	51 e4       	ldi	r21, 0x41	; 65
    265e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	8e 01       	movw	r16, r28
    2668:	07 5a       	subi	r16, 0xA7	; 167
    266a:	1f 4f       	sbci	r17, 0xFF	; 255
    266c:	bc 01       	movw	r22, r24
    266e:	cd 01       	movw	r24, r26
    2670:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	f8 01       	movw	r30, r16
    267a:	91 83       	std	Z+1, r25	; 0x01
    267c:	80 83       	st	Z, r24
    267e:	1f c0       	rjmp	.+62     	; 0x26be <LCD_displayCharacter+0x134>
    2680:	fe 01       	movw	r30, r28
    2682:	e9 5a       	subi	r30, 0xA9	; 169
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	80 e9       	ldi	r24, 0x90	; 144
    2688:	91 e0       	ldi	r25, 0x01	; 1
    268a:	91 83       	std	Z+1, r25	; 0x01
    268c:	80 83       	st	Z, r24
    268e:	fe 01       	movw	r30, r28
    2690:	e9 5a       	subi	r30, 0xA9	; 169
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	80 81       	ld	r24, Z
    2696:	91 81       	ldd	r25, Z+1	; 0x01
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <LCD_displayCharacter+0x10e>
    269c:	fe 01       	movw	r30, r28
    269e:	e9 5a       	subi	r30, 0xA9	; 169
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	91 83       	std	Z+1, r25	; 0x01
    26a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a6:	de 01       	movw	r26, r28
    26a8:	a7 5a       	subi	r26, 0xA7	; 167
    26aa:	bf 4f       	sbci	r27, 0xFF	; 255
    26ac:	fe 01       	movw	r30, r28
    26ae:	e7 5a       	subi	r30, 0xA7	; 167
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	80 81       	ld	r24, Z
    26b4:	91 81       	ldd	r25, Z+1	; 0x01
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	11 96       	adiw	r26, 0x01	; 1
    26ba:	9c 93       	st	X, r25
    26bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26be:	fe 01       	movw	r30, r28
    26c0:	e7 5a       	subi	r30, 0xA7	; 167
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	80 81       	ld	r24, Z
    26c6:	91 81       	ldd	r25, Z+1	; 0x01
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	d1 f6       	brne	.-76     	; 0x2680 <LCD_displayCharacter+0xf6>
    26cc:	27 c0       	rjmp	.+78     	; 0x271c <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ce:	8e 01       	movw	r16, r28
    26d0:	07 5a       	subi	r16, 0xA7	; 167
    26d2:	1f 4f       	sbci	r17, 0xFF	; 255
    26d4:	fe 01       	movw	r30, r28
    26d6:	e5 5a       	subi	r30, 0xA5	; 165
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	60 81       	ld	r22, Z
    26dc:	71 81       	ldd	r23, Z+1	; 0x01
    26de:	82 81       	ldd	r24, Z+2	; 0x02
    26e0:	93 81       	ldd	r25, Z+3	; 0x03
    26e2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	f8 01       	movw	r30, r16
    26ec:	91 83       	std	Z+1, r25	; 0x01
    26ee:	80 83       	st	Z, r24
    26f0:	de 01       	movw	r26, r28
    26f2:	ab 5a       	subi	r26, 0xAB	; 171
    26f4:	bf 4f       	sbci	r27, 0xFF	; 255
    26f6:	fe 01       	movw	r30, r28
    26f8:	e7 5a       	subi	r30, 0xA7	; 167
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	80 81       	ld	r24, Z
    26fe:	91 81       	ldd	r25, Z+1	; 0x01
    2700:	8d 93       	st	X+, r24
    2702:	9c 93       	st	X, r25
    2704:	fe 01       	movw	r30, r28
    2706:	eb 5a       	subi	r30, 0xAB	; 171
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	80 81       	ld	r24, Z
    270c:	91 81       	ldd	r25, Z+1	; 0x01
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	f1 f7       	brne	.-4      	; 0x270e <LCD_displayCharacter+0x184>
    2712:	fe 01       	movw	r30, r28
    2714:	eb 5a       	subi	r30, 0xAB	; 171
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	91 83       	std	Z+1, r25	; 0x01
    271a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	62 e0       	ldi	r22, 0x02	; 2
    2720:	41 e0       	ldi	r20, 0x01	; 1
    2722:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
    2726:	fe 01       	movw	r30, r28
    2728:	ef 5a       	subi	r30, 0xAF	; 175
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	a0 e8       	ldi	r26, 0x80	; 128
    2732:	bf e3       	ldi	r27, 0x3F	; 63
    2734:	80 83       	st	Z, r24
    2736:	91 83       	std	Z+1, r25	; 0x01
    2738:	a2 83       	std	Z+2, r26	; 0x02
    273a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273c:	8e 01       	movw	r16, r28
    273e:	03 5b       	subi	r16, 0xB3	; 179
    2740:	1f 4f       	sbci	r17, 0xFF	; 255
    2742:	fe 01       	movw	r30, r28
    2744:	ef 5a       	subi	r30, 0xAF	; 175
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	60 81       	ld	r22, Z
    274a:	71 81       	ldd	r23, Z+1	; 0x01
    274c:	82 81       	ldd	r24, Z+2	; 0x02
    274e:	93 81       	ldd	r25, Z+3	; 0x03
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	4a e7       	ldi	r20, 0x7A	; 122
    2756:	55 e4       	ldi	r21, 0x45	; 69
    2758:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	f8 01       	movw	r30, r16
    2762:	80 83       	st	Z, r24
    2764:	91 83       	std	Z+1, r25	; 0x01
    2766:	a2 83       	std	Z+2, r26	; 0x02
    2768:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    276a:	fe 01       	movw	r30, r28
    276c:	e3 5b       	subi	r30, 0xB3	; 179
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	60 81       	ld	r22, Z
    2772:	71 81       	ldd	r23, Z+1	; 0x01
    2774:	82 81       	ldd	r24, Z+2	; 0x02
    2776:	93 81       	ldd	r25, Z+3	; 0x03
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 e8       	ldi	r20, 0x80	; 128
    277e:	5f e3       	ldi	r21, 0x3F	; 63
    2780:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2784:	88 23       	and	r24, r24
    2786:	44 f4       	brge	.+16     	; 0x2798 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2788:	fe 01       	movw	r30, r28
    278a:	e5 5b       	subi	r30, 0xB5	; 181
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	91 83       	std	Z+1, r25	; 0x01
    2794:	80 83       	st	Z, r24
    2796:	64 c0       	rjmp	.+200    	; 0x2860 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2798:	fe 01       	movw	r30, r28
    279a:	e3 5b       	subi	r30, 0xB3	; 179
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	60 81       	ld	r22, Z
    27a0:	71 81       	ldd	r23, Z+1	; 0x01
    27a2:	82 81       	ldd	r24, Z+2	; 0x02
    27a4:	93 81       	ldd	r25, Z+3	; 0x03
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	3f ef       	ldi	r19, 0xFF	; 255
    27aa:	4f e7       	ldi	r20, 0x7F	; 127
    27ac:	57 e4       	ldi	r21, 0x47	; 71
    27ae:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    27b2:	18 16       	cp	r1, r24
    27b4:	0c f0       	brlt	.+2      	; 0x27b8 <LCD_displayCharacter+0x22e>
    27b6:	43 c0       	rjmp	.+134    	; 0x283e <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b8:	fe 01       	movw	r30, r28
    27ba:	ef 5a       	subi	r30, 0xAF	; 175
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	60 81       	ld	r22, Z
    27c0:	71 81       	ldd	r23, Z+1	; 0x01
    27c2:	82 81       	ldd	r24, Z+2	; 0x02
    27c4:	93 81       	ldd	r25, Z+3	; 0x03
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	40 e2       	ldi	r20, 0x20	; 32
    27cc:	51 e4       	ldi	r21, 0x41	; 65
    27ce:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	8e 01       	movw	r16, r28
    27d8:	05 5b       	subi	r16, 0xB5	; 181
    27da:	1f 4f       	sbci	r17, 0xFF	; 255
    27dc:	bc 01       	movw	r22, r24
    27de:	cd 01       	movw	r24, r26
    27e0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	f8 01       	movw	r30, r16
    27ea:	91 83       	std	Z+1, r25	; 0x01
    27ec:	80 83       	st	Z, r24
    27ee:	1f c0       	rjmp	.+62     	; 0x282e <LCD_displayCharacter+0x2a4>
    27f0:	fe 01       	movw	r30, r28
    27f2:	e7 5b       	subi	r30, 0xB7	; 183
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	80 e9       	ldi	r24, 0x90	; 144
    27f8:	91 e0       	ldi	r25, 0x01	; 1
    27fa:	91 83       	std	Z+1, r25	; 0x01
    27fc:	80 83       	st	Z, r24
    27fe:	fe 01       	movw	r30, r28
    2800:	e7 5b       	subi	r30, 0xB7	; 183
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	80 81       	ld	r24, Z
    2806:	91 81       	ldd	r25, Z+1	; 0x01
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	f1 f7       	brne	.-4      	; 0x2808 <LCD_displayCharacter+0x27e>
    280c:	fe 01       	movw	r30, r28
    280e:	e7 5b       	subi	r30, 0xB7	; 183
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	91 83       	std	Z+1, r25	; 0x01
    2814:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2816:	de 01       	movw	r26, r28
    2818:	a5 5b       	subi	r26, 0xB5	; 181
    281a:	bf 4f       	sbci	r27, 0xFF	; 255
    281c:	fe 01       	movw	r30, r28
    281e:	e5 5b       	subi	r30, 0xB5	; 181
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	80 81       	ld	r24, Z
    2824:	91 81       	ldd	r25, Z+1	; 0x01
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	11 96       	adiw	r26, 0x01	; 1
    282a:	9c 93       	st	X, r25
    282c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282e:	fe 01       	movw	r30, r28
    2830:	e5 5b       	subi	r30, 0xB5	; 181
    2832:	ff 4f       	sbci	r31, 0xFF	; 255
    2834:	80 81       	ld	r24, Z
    2836:	91 81       	ldd	r25, Z+1	; 0x01
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	d1 f6       	brne	.-76     	; 0x27f0 <LCD_displayCharacter+0x266>
    283c:	27 c0       	rjmp	.+78     	; 0x288c <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283e:	8e 01       	movw	r16, r28
    2840:	05 5b       	subi	r16, 0xB5	; 181
    2842:	1f 4f       	sbci	r17, 0xFF	; 255
    2844:	fe 01       	movw	r30, r28
    2846:	e3 5b       	subi	r30, 0xB3	; 179
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	60 81       	ld	r22, Z
    284c:	71 81       	ldd	r23, Z+1	; 0x01
    284e:	82 81       	ldd	r24, Z+2	; 0x02
    2850:	93 81       	ldd	r25, Z+3	; 0x03
    2852:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	f8 01       	movw	r30, r16
    285c:	91 83       	std	Z+1, r25	; 0x01
    285e:	80 83       	st	Z, r24
    2860:	de 01       	movw	r26, r28
    2862:	a9 5b       	subi	r26, 0xB9	; 185
    2864:	bf 4f       	sbci	r27, 0xFF	; 255
    2866:	fe 01       	movw	r30, r28
    2868:	e5 5b       	subi	r30, 0xB5	; 181
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	80 81       	ld	r24, Z
    286e:	91 81       	ldd	r25, Z+1	; 0x01
    2870:	8d 93       	st	X+, r24
    2872:	9c 93       	st	X, r25
    2874:	fe 01       	movw	r30, r28
    2876:	e9 5b       	subi	r30, 0xB9	; 185
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	80 81       	ld	r24, Z
    287c:	91 81       	ldd	r25, Z+1	; 0x01
    287e:	01 97       	sbiw	r24, 0x01	; 1
    2880:	f1 f7       	brne	.-4      	; 0x287e <LCD_displayCharacter+0x2f4>
    2882:	fe 01       	movw	r30, r28
    2884:	e9 5b       	subi	r30, 0xB9	; 185
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	91 83       	std	Z+1, r25	; 0x01
    288a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data, 4));
    288c:	fe 01       	movw	r30, r28
    288e:	ed 59       	subi	r30, 0x9D	; 157
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	80 81       	ld	r24, Z
    2894:	88 2f       	mov	r24, r24
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	80 71       	andi	r24, 0x10	; 16
    289a:	90 70       	andi	r25, 0x00	; 0
    289c:	95 95       	asr	r25
    289e:	87 95       	ror	r24
    28a0:	95 95       	asr	r25
    28a2:	87 95       	ror	r24
    28a4:	95 95       	asr	r25
    28a6:	87 95       	ror	r24
    28a8:	95 95       	asr	r25
    28aa:	87 95       	ror	r24
    28ac:	98 2f       	mov	r25, r24
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	63 e0       	ldi	r22, 0x03	; 3
    28b2:	49 2f       	mov	r20, r25
    28b4:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data, 5));
    28b8:	fe 01       	movw	r30, r28
    28ba:	ed 59       	subi	r30, 0x9D	; 157
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	80 81       	ld	r24, Z
    28c0:	88 2f       	mov	r24, r24
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	80 72       	andi	r24, 0x20	; 32
    28c6:	90 70       	andi	r25, 0x00	; 0
    28c8:	95 95       	asr	r25
    28ca:	87 95       	ror	r24
    28cc:	95 95       	asr	r25
    28ce:	87 95       	ror	r24
    28d0:	95 95       	asr	r25
    28d2:	87 95       	ror	r24
    28d4:	95 95       	asr	r25
    28d6:	87 95       	ror	r24
    28d8:	95 95       	asr	r25
    28da:	87 95       	ror	r24
    28dc:	98 2f       	mov	r25, r24
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	64 e0       	ldi	r22, 0x04	; 4
    28e2:	49 2f       	mov	r20, r25
    28e4:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data, 6));
    28e8:	fe 01       	movw	r30, r28
    28ea:	ed 59       	subi	r30, 0x9D	; 157
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	80 81       	ld	r24, Z
    28f0:	88 2f       	mov	r24, r24
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	80 74       	andi	r24, 0x40	; 64
    28f6:	90 70       	andi	r25, 0x00	; 0
    28f8:	08 2e       	mov	r0, r24
    28fa:	89 2f       	mov	r24, r25
    28fc:	00 0c       	add	r0, r0
    28fe:	88 1f       	adc	r24, r24
    2900:	99 0b       	sbc	r25, r25
    2902:	00 0c       	add	r0, r0
    2904:	88 1f       	adc	r24, r24
    2906:	99 1f       	adc	r25, r25
    2908:	98 2f       	mov	r25, r24
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	65 e0       	ldi	r22, 0x05	; 5
    290e:	49 2f       	mov	r20, r25
    2910:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data, 7));
    2914:	fe 01       	movw	r30, r28
    2916:	ed 59       	subi	r30, 0x9D	; 157
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	80 81       	ld	r24, Z
    291c:	98 2f       	mov	r25, r24
    291e:	99 1f       	adc	r25, r25
    2920:	99 27       	eor	r25, r25
    2922:	99 1f       	adc	r25, r25
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	66 e0       	ldi	r22, 0x06	; 6
    2928:	49 2f       	mov	r20, r25
    292a:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
    292e:	fe 01       	movw	r30, r28
    2930:	ed 5b       	subi	r30, 0xBD	; 189
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	a0 e8       	ldi	r26, 0x80	; 128
    293a:	bf e3       	ldi	r27, 0x3F	; 63
    293c:	80 83       	st	Z, r24
    293e:	91 83       	std	Z+1, r25	; 0x01
    2940:	a2 83       	std	Z+2, r26	; 0x02
    2942:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2944:	8e 01       	movw	r16, r28
    2946:	01 5c       	subi	r16, 0xC1	; 193
    2948:	1f 4f       	sbci	r17, 0xFF	; 255
    294a:	fe 01       	movw	r30, r28
    294c:	ed 5b       	subi	r30, 0xBD	; 189
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	60 81       	ld	r22, Z
    2952:	71 81       	ldd	r23, Z+1	; 0x01
    2954:	82 81       	ldd	r24, Z+2	; 0x02
    2956:	93 81       	ldd	r25, Z+3	; 0x03
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	4a e7       	ldi	r20, 0x7A	; 122
    295e:	55 e4       	ldi	r21, 0x45	; 69
    2960:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	f8 01       	movw	r30, r16
    296a:	80 83       	st	Z, r24
    296c:	91 83       	std	Z+1, r25	; 0x01
    296e:	a2 83       	std	Z+2, r26	; 0x02
    2970:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2972:	fe 01       	movw	r30, r28
    2974:	ff 96       	adiw	r30, 0x3f	; 63
    2976:	60 81       	ld	r22, Z
    2978:	71 81       	ldd	r23, Z+1	; 0x01
    297a:	82 81       	ldd	r24, Z+2	; 0x02
    297c:	93 81       	ldd	r25, Z+3	; 0x03
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	40 e8       	ldi	r20, 0x80	; 128
    2984:	5f e3       	ldi	r21, 0x3F	; 63
    2986:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    298a:	88 23       	and	r24, r24
    298c:	2c f4       	brge	.+10     	; 0x2998 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	9e af       	std	Y+62, r25	; 0x3e
    2994:	8d af       	std	Y+61, r24	; 0x3d
    2996:	46 c0       	rjmp	.+140    	; 0x2a24 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2998:	fe 01       	movw	r30, r28
    299a:	ff 96       	adiw	r30, 0x3f	; 63
    299c:	60 81       	ld	r22, Z
    299e:	71 81       	ldd	r23, Z+1	; 0x01
    29a0:	82 81       	ldd	r24, Z+2	; 0x02
    29a2:	93 81       	ldd	r25, Z+3	; 0x03
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	3f ef       	ldi	r19, 0xFF	; 255
    29a8:	4f e7       	ldi	r20, 0x7F	; 127
    29aa:	57 e4       	ldi	r21, 0x47	; 71
    29ac:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    29b0:	18 16       	cp	r1, r24
    29b2:	64 f5       	brge	.+88     	; 0x2a0c <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b4:	fe 01       	movw	r30, r28
    29b6:	ed 5b       	subi	r30, 0xBD	; 189
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	60 81       	ld	r22, Z
    29bc:	71 81       	ldd	r23, Z+1	; 0x01
    29be:	82 81       	ldd	r24, Z+2	; 0x02
    29c0:	93 81       	ldd	r25, Z+3	; 0x03
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	40 e2       	ldi	r20, 0x20	; 32
    29c8:	51 e4       	ldi	r21, 0x41	; 65
    29ca:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	bc 01       	movw	r22, r24
    29d4:	cd 01       	movw	r24, r26
    29d6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	9e af       	std	Y+62, r25	; 0x3e
    29e0:	8d af       	std	Y+61, r24	; 0x3d
    29e2:	0f c0       	rjmp	.+30     	; 0x2a02 <LCD_displayCharacter+0x478>
    29e4:	80 e9       	ldi	r24, 0x90	; 144
    29e6:	91 e0       	ldi	r25, 0x01	; 1
    29e8:	9c af       	std	Y+60, r25	; 0x3c
    29ea:	8b af       	std	Y+59, r24	; 0x3b
    29ec:	8b ad       	ldd	r24, Y+59	; 0x3b
    29ee:	9c ad       	ldd	r25, Y+60	; 0x3c
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	f1 f7       	brne	.-4      	; 0x29f0 <LCD_displayCharacter+0x466>
    29f4:	9c af       	std	Y+60, r25	; 0x3c
    29f6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    29fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	9e af       	std	Y+62, r25	; 0x3e
    2a00:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a02:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a04:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a06:	00 97       	sbiw	r24, 0x00	; 0
    2a08:	69 f7       	brne	.-38     	; 0x29e4 <LCD_displayCharacter+0x45a>
    2a0a:	16 c0       	rjmp	.+44     	; 0x2a38 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	ff 96       	adiw	r30, 0x3f	; 63
    2a10:	60 81       	ld	r22, Z
    2a12:	71 81       	ldd	r23, Z+1	; 0x01
    2a14:	82 81       	ldd	r24, Z+2	; 0x02
    2a16:	93 81       	ldd	r25, Z+3	; 0x03
    2a18:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	9e af       	std	Y+62, r25	; 0x3e
    2a22:	8d af       	std	Y+61, r24	; 0x3d
    2a24:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a26:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a28:	9a af       	std	Y+58, r25	; 0x3a
    2a2a:	89 af       	std	Y+57, r24	; 0x39
    2a2c:	89 ad       	ldd	r24, Y+57	; 0x39
    2a2e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	f1 f7       	brne	.-4      	; 0x2a30 <LCD_displayCharacter+0x4a6>
    2a34:	9a af       	std	Y+58, r25	; 0x3a
    2a36:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	62 e0       	ldi	r22, 0x02	; 2
    2a3c:	40 e0       	ldi	r20, 0x00	; 0
    2a3e:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	a0 e8       	ldi	r26, 0x80	; 128
    2a48:	bf e3       	ldi	r27, 0x3F	; 63
    2a4a:	8d ab       	std	Y+53, r24	; 0x35
    2a4c:	9e ab       	std	Y+54, r25	; 0x36
    2a4e:	af ab       	std	Y+55, r26	; 0x37
    2a50:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a52:	6d a9       	ldd	r22, Y+53	; 0x35
    2a54:	7e a9       	ldd	r23, Y+54	; 0x36
    2a56:	8f a9       	ldd	r24, Y+55	; 0x37
    2a58:	98 ad       	ldd	r25, Y+56	; 0x38
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	4a e7       	ldi	r20, 0x7A	; 122
    2a60:	55 e4       	ldi	r21, 0x45	; 69
    2a62:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	89 ab       	std	Y+49, r24	; 0x31
    2a6c:	9a ab       	std	Y+50, r25	; 0x32
    2a6e:	ab ab       	std	Y+51, r26	; 0x33
    2a70:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a72:	69 a9       	ldd	r22, Y+49	; 0x31
    2a74:	7a a9       	ldd	r23, Y+50	; 0x32
    2a76:	8b a9       	ldd	r24, Y+51	; 0x33
    2a78:	9c a9       	ldd	r25, Y+52	; 0x34
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	40 e8       	ldi	r20, 0x80	; 128
    2a80:	5f e3       	ldi	r21, 0x3F	; 63
    2a82:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2a86:	88 23       	and	r24, r24
    2a88:	2c f4       	brge	.+10     	; 0x2a94 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	98 ab       	std	Y+48, r25	; 0x30
    2a90:	8f a7       	std	Y+47, r24	; 0x2f
    2a92:	3f c0       	rjmp	.+126    	; 0x2b12 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2a94:	69 a9       	ldd	r22, Y+49	; 0x31
    2a96:	7a a9       	ldd	r23, Y+50	; 0x32
    2a98:	8b a9       	ldd	r24, Y+51	; 0x33
    2a9a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	3f ef       	ldi	r19, 0xFF	; 255
    2aa0:	4f e7       	ldi	r20, 0x7F	; 127
    2aa2:	57 e4       	ldi	r21, 0x47	; 71
    2aa4:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2aa8:	18 16       	cp	r1, r24
    2aaa:	4c f5       	brge	.+82     	; 0x2afe <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aac:	6d a9       	ldd	r22, Y+53	; 0x35
    2aae:	7e a9       	ldd	r23, Y+54	; 0x36
    2ab0:	8f a9       	ldd	r24, Y+55	; 0x37
    2ab2:	98 ad       	ldd	r25, Y+56	; 0x38
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	40 e2       	ldi	r20, 0x20	; 32
    2aba:	51 e4       	ldi	r21, 0x41	; 65
    2abc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	bc 01       	movw	r22, r24
    2ac6:	cd 01       	movw	r24, r26
    2ac8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	98 ab       	std	Y+48, r25	; 0x30
    2ad2:	8f a7       	std	Y+47, r24	; 0x2f
    2ad4:	0f c0       	rjmp	.+30     	; 0x2af4 <LCD_displayCharacter+0x56a>
    2ad6:	80 e9       	ldi	r24, 0x90	; 144
    2ad8:	91 e0       	ldi	r25, 0x01	; 1
    2ada:	9e a7       	std	Y+46, r25	; 0x2e
    2adc:	8d a7       	std	Y+45, r24	; 0x2d
    2ade:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ae0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	f1 f7       	brne	.-4      	; 0x2ae2 <LCD_displayCharacter+0x558>
    2ae6:	9e a7       	std	Y+46, r25	; 0x2e
    2ae8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aea:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aec:	98 a9       	ldd	r25, Y+48	; 0x30
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	98 ab       	std	Y+48, r25	; 0x30
    2af2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2af6:	98 a9       	ldd	r25, Y+48	; 0x30
    2af8:	00 97       	sbiw	r24, 0x00	; 0
    2afa:	69 f7       	brne	.-38     	; 0x2ad6 <LCD_displayCharacter+0x54c>
    2afc:	14 c0       	rjmp	.+40     	; 0x2b26 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afe:	69 a9       	ldd	r22, Y+49	; 0x31
    2b00:	7a a9       	ldd	r23, Y+50	; 0x32
    2b02:	8b a9       	ldd	r24, Y+51	; 0x33
    2b04:	9c a9       	ldd	r25, Y+52	; 0x34
    2b06:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	98 ab       	std	Y+48, r25	; 0x30
    2b10:	8f a7       	std	Y+47, r24	; 0x2f
    2b12:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b14:	98 a9       	ldd	r25, Y+48	; 0x30
    2b16:	9c a7       	std	Y+44, r25	; 0x2c
    2b18:	8b a7       	std	Y+43, r24	; 0x2b
    2b1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	f1 f7       	brne	.-4      	; 0x2b1e <LCD_displayCharacter+0x594>
    2b22:	9c a7       	std	Y+44, r25	; 0x2c
    2b24:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	62 e0       	ldi	r22, 0x02	; 2
    2b2a:	41 e0       	ldi	r20, 0x01	; 1
    2b2c:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	a0 e8       	ldi	r26, 0x80	; 128
    2b36:	bf e3       	ldi	r27, 0x3F	; 63
    2b38:	8f a3       	std	Y+39, r24	; 0x27
    2b3a:	98 a7       	std	Y+40, r25	; 0x28
    2b3c:	a9 a7       	std	Y+41, r26	; 0x29
    2b3e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b40:	6f a1       	ldd	r22, Y+39	; 0x27
    2b42:	78 a5       	ldd	r23, Y+40	; 0x28
    2b44:	89 a5       	ldd	r24, Y+41	; 0x29
    2b46:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	4a e7       	ldi	r20, 0x7A	; 122
    2b4e:	55 e4       	ldi	r21, 0x45	; 69
    2b50:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	8b a3       	std	Y+35, r24	; 0x23
    2b5a:	9c a3       	std	Y+36, r25	; 0x24
    2b5c:	ad a3       	std	Y+37, r26	; 0x25
    2b5e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b60:	6b a1       	ldd	r22, Y+35	; 0x23
    2b62:	7c a1       	ldd	r23, Y+36	; 0x24
    2b64:	8d a1       	ldd	r24, Y+37	; 0x25
    2b66:	9e a1       	ldd	r25, Y+38	; 0x26
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	40 e8       	ldi	r20, 0x80	; 128
    2b6e:	5f e3       	ldi	r21, 0x3F	; 63
    2b70:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2b74:	88 23       	and	r24, r24
    2b76:	2c f4       	brge	.+10     	; 0x2b82 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	9a a3       	std	Y+34, r25	; 0x22
    2b7e:	89 a3       	std	Y+33, r24	; 0x21
    2b80:	3f c0       	rjmp	.+126    	; 0x2c00 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2b82:	6b a1       	ldd	r22, Y+35	; 0x23
    2b84:	7c a1       	ldd	r23, Y+36	; 0x24
    2b86:	8d a1       	ldd	r24, Y+37	; 0x25
    2b88:	9e a1       	ldd	r25, Y+38	; 0x26
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	3f ef       	ldi	r19, 0xFF	; 255
    2b8e:	4f e7       	ldi	r20, 0x7F	; 127
    2b90:	57 e4       	ldi	r21, 0x47	; 71
    2b92:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2b96:	18 16       	cp	r1, r24
    2b98:	4c f5       	brge	.+82     	; 0x2bec <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b9a:	6f a1       	ldd	r22, Y+39	; 0x27
    2b9c:	78 a5       	ldd	r23, Y+40	; 0x28
    2b9e:	89 a5       	ldd	r24, Y+41	; 0x29
    2ba0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	40 e2       	ldi	r20, 0x20	; 32
    2ba8:	51 e4       	ldi	r21, 0x41	; 65
    2baa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	bc 01       	movw	r22, r24
    2bb4:	cd 01       	movw	r24, r26
    2bb6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	9a a3       	std	Y+34, r25	; 0x22
    2bc0:	89 a3       	std	Y+33, r24	; 0x21
    2bc2:	0f c0       	rjmp	.+30     	; 0x2be2 <LCD_displayCharacter+0x658>
    2bc4:	80 e9       	ldi	r24, 0x90	; 144
    2bc6:	91 e0       	ldi	r25, 0x01	; 1
    2bc8:	98 a3       	std	Y+32, r25	; 0x20
    2bca:	8f 8f       	std	Y+31, r24	; 0x1f
    2bcc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bce:	98 a1       	ldd	r25, Y+32	; 0x20
    2bd0:	01 97       	sbiw	r24, 0x01	; 1
    2bd2:	f1 f7       	brne	.-4      	; 0x2bd0 <LCD_displayCharacter+0x646>
    2bd4:	98 a3       	std	Y+32, r25	; 0x20
    2bd6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd8:	89 a1       	ldd	r24, Y+33	; 0x21
    2bda:	9a a1       	ldd	r25, Y+34	; 0x22
    2bdc:	01 97       	sbiw	r24, 0x01	; 1
    2bde:	9a a3       	std	Y+34, r25	; 0x22
    2be0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be2:	89 a1       	ldd	r24, Y+33	; 0x21
    2be4:	9a a1       	ldd	r25, Y+34	; 0x22
    2be6:	00 97       	sbiw	r24, 0x00	; 0
    2be8:	69 f7       	brne	.-38     	; 0x2bc4 <LCD_displayCharacter+0x63a>
    2bea:	14 c0       	rjmp	.+40     	; 0x2c14 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bec:	6b a1       	ldd	r22, Y+35	; 0x23
    2bee:	7c a1       	ldd	r23, Y+36	; 0x24
    2bf0:	8d a1       	ldd	r24, Y+37	; 0x25
    2bf2:	9e a1       	ldd	r25, Y+38	; 0x26
    2bf4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	9a a3       	std	Y+34, r25	; 0x22
    2bfe:	89 a3       	std	Y+33, r24	; 0x21
    2c00:	89 a1       	ldd	r24, Y+33	; 0x21
    2c02:	9a a1       	ldd	r25, Y+34	; 0x22
    2c04:	9e 8f       	std	Y+30, r25	; 0x1e
    2c06:	8d 8f       	std	Y+29, r24	; 0x1d
    2c08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	f1 f7       	brne	.-4      	; 0x2c0c <LCD_displayCharacter+0x682>
    2c10:	9e 8f       	std	Y+30, r25	; 0x1e
    2c12:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data, 0));
    2c14:	fe 01       	movw	r30, r28
    2c16:	ed 59       	subi	r30, 0x9D	; 157
    2c18:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1a:	80 81       	ld	r24, Z
    2c1c:	98 2f       	mov	r25, r24
    2c1e:	91 70       	andi	r25, 0x01	; 1
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	63 e0       	ldi	r22, 0x03	; 3
    2c24:	49 2f       	mov	r20, r25
    2c26:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data, 1));
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	ed 59       	subi	r30, 0x9D	; 157
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	80 81       	ld	r24, Z
    2c32:	88 2f       	mov	r24, r24
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	82 70       	andi	r24, 0x02	; 2
    2c38:	90 70       	andi	r25, 0x00	; 0
    2c3a:	95 95       	asr	r25
    2c3c:	87 95       	ror	r24
    2c3e:	98 2f       	mov	r25, r24
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	64 e0       	ldi	r22, 0x04	; 4
    2c44:	49 2f       	mov	r20, r25
    2c46:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data, 2));
    2c4a:	fe 01       	movw	r30, r28
    2c4c:	ed 59       	subi	r30, 0x9D	; 157
    2c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c50:	80 81       	ld	r24, Z
    2c52:	88 2f       	mov	r24, r24
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	84 70       	andi	r24, 0x04	; 4
    2c58:	90 70       	andi	r25, 0x00	; 0
    2c5a:	95 95       	asr	r25
    2c5c:	87 95       	ror	r24
    2c5e:	95 95       	asr	r25
    2c60:	87 95       	ror	r24
    2c62:	98 2f       	mov	r25, r24
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	65 e0       	ldi	r22, 0x05	; 5
    2c68:	49 2f       	mov	r20, r25
    2c6a:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data, 3));
    2c6e:	fe 01       	movw	r30, r28
    2c70:	ed 59       	subi	r30, 0x9D	; 157
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	80 81       	ld	r24, Z
    2c76:	88 2f       	mov	r24, r24
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	88 70       	andi	r24, 0x08	; 8
    2c7c:	90 70       	andi	r25, 0x00	; 0
    2c7e:	95 95       	asr	r25
    2c80:	87 95       	ror	r24
    2c82:	95 95       	asr	r25
    2c84:	87 95       	ror	r24
    2c86:	95 95       	asr	r25
    2c88:	87 95       	ror	r24
    2c8a:	98 2f       	mov	r25, r24
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	66 e0       	ldi	r22, 0x06	; 6
    2c90:	49 2f       	mov	r20, r25
    2c92:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
    2c96:	80 e0       	ldi	r24, 0x00	; 0
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	a0 e8       	ldi	r26, 0x80	; 128
    2c9c:	bf e3       	ldi	r27, 0x3F	; 63
    2c9e:	89 8f       	std	Y+25, r24	; 0x19
    2ca0:	9a 8f       	std	Y+26, r25	; 0x1a
    2ca2:	ab 8f       	std	Y+27, r26	; 0x1b
    2ca4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ca8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2caa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	4a e7       	ldi	r20, 0x7A	; 122
    2cb4:	55 e4       	ldi	r21, 0x45	; 69
    2cb6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	8d 8b       	std	Y+21, r24	; 0x15
    2cc0:	9e 8b       	std	Y+22, r25	; 0x16
    2cc2:	af 8b       	std	Y+23, r26	; 0x17
    2cc4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cc6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cc8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cca:	8f 89       	ldd	r24, Y+23	; 0x17
    2ccc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	40 e8       	ldi	r20, 0x80	; 128
    2cd4:	5f e3       	ldi	r21, 0x3F	; 63
    2cd6:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2cda:	88 23       	and	r24, r24
    2cdc:	2c f4       	brge	.+10     	; 0x2ce8 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	9c 8b       	std	Y+20, r25	; 0x14
    2ce4:	8b 8b       	std	Y+19, r24	; 0x13
    2ce6:	3f c0       	rjmp	.+126    	; 0x2d66 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2ce8:	6d 89       	ldd	r22, Y+21	; 0x15
    2cea:	7e 89       	ldd	r23, Y+22	; 0x16
    2cec:	8f 89       	ldd	r24, Y+23	; 0x17
    2cee:	98 8d       	ldd	r25, Y+24	; 0x18
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	3f ef       	ldi	r19, 0xFF	; 255
    2cf4:	4f e7       	ldi	r20, 0x7F	; 127
    2cf6:	57 e4       	ldi	r21, 0x47	; 71
    2cf8:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2cfc:	18 16       	cp	r1, r24
    2cfe:	4c f5       	brge	.+82     	; 0x2d52 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d00:	69 8d       	ldd	r22, Y+25	; 0x19
    2d02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	40 e2       	ldi	r20, 0x20	; 32
    2d0e:	51 e4       	ldi	r21, 0x41	; 65
    2d10:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	bc 01       	movw	r22, r24
    2d1a:	cd 01       	movw	r24, r26
    2d1c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	9c 8b       	std	Y+20, r25	; 0x14
    2d26:	8b 8b       	std	Y+19, r24	; 0x13
    2d28:	0f c0       	rjmp	.+30     	; 0x2d48 <LCD_displayCharacter+0x7be>
    2d2a:	80 e9       	ldi	r24, 0x90	; 144
    2d2c:	91 e0       	ldi	r25, 0x01	; 1
    2d2e:	9a 8b       	std	Y+18, r25	; 0x12
    2d30:	89 8b       	std	Y+17, r24	; 0x11
    2d32:	89 89       	ldd	r24, Y+17	; 0x11
    2d34:	9a 89       	ldd	r25, Y+18	; 0x12
    2d36:	01 97       	sbiw	r24, 0x01	; 1
    2d38:	f1 f7       	brne	.-4      	; 0x2d36 <LCD_displayCharacter+0x7ac>
    2d3a:	9a 8b       	std	Y+18, r25	; 0x12
    2d3c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d40:	9c 89       	ldd	r25, Y+20	; 0x14
    2d42:	01 97       	sbiw	r24, 0x01	; 1
    2d44:	9c 8b       	std	Y+20, r25	; 0x14
    2d46:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d48:	8b 89       	ldd	r24, Y+19	; 0x13
    2d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d4c:	00 97       	sbiw	r24, 0x00	; 0
    2d4e:	69 f7       	brne	.-38     	; 0x2d2a <LCD_displayCharacter+0x7a0>
    2d50:	14 c0       	rjmp	.+40     	; 0x2d7a <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d52:	6d 89       	ldd	r22, Y+21	; 0x15
    2d54:	7e 89       	ldd	r23, Y+22	; 0x16
    2d56:	8f 89       	ldd	r24, Y+23	; 0x17
    2d58:	98 8d       	ldd	r25, Y+24	; 0x18
    2d5a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	9c 8b       	std	Y+20, r25	; 0x14
    2d64:	8b 8b       	std	Y+19, r24	; 0x13
    2d66:	8b 89       	ldd	r24, Y+19	; 0x13
    2d68:	9c 89       	ldd	r25, Y+20	; 0x14
    2d6a:	98 8b       	std	Y+16, r25	; 0x10
    2d6c:	8f 87       	std	Y+15, r24	; 0x0f
    2d6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d70:	98 89       	ldd	r25, Y+16	; 0x10
    2d72:	01 97       	sbiw	r24, 0x01	; 1
    2d74:	f1 f7       	brne	.-4      	; 0x2d72 <LCD_displayCharacter+0x7e8>
    2d76:	98 8b       	std	Y+16, r25	; 0x10
    2d78:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	62 e0       	ldi	r22, 0x02	; 2
    2d7e:	40 e0       	ldi	r20, 0x00	; 0
    2d80:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	a0 e8       	ldi	r26, 0x80	; 128
    2d8a:	bf e3       	ldi	r27, 0x3F	; 63
    2d8c:	8b 87       	std	Y+11, r24	; 0x0b
    2d8e:	9c 87       	std	Y+12, r25	; 0x0c
    2d90:	ad 87       	std	Y+13, r26	; 0x0d
    2d92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d94:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d96:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	4a e7       	ldi	r20, 0x7A	; 122
    2da2:	55 e4       	ldi	r21, 0x45	; 69
    2da4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	8f 83       	std	Y+7, r24	; 0x07
    2dae:	98 87       	std	Y+8, r25	; 0x08
    2db0:	a9 87       	std	Y+9, r26	; 0x09
    2db2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2db4:	6f 81       	ldd	r22, Y+7	; 0x07
    2db6:	78 85       	ldd	r23, Y+8	; 0x08
    2db8:	89 85       	ldd	r24, Y+9	; 0x09
    2dba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	40 e8       	ldi	r20, 0x80	; 128
    2dc2:	5f e3       	ldi	r21, 0x3F	; 63
    2dc4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2dc8:	88 23       	and	r24, r24
    2dca:	2c f4       	brge	.+10     	; 0x2dd6 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	9e 83       	std	Y+6, r25	; 0x06
    2dd2:	8d 83       	std	Y+5, r24	; 0x05
    2dd4:	3f c0       	rjmp	.+126    	; 0x2e54 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2dd6:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd8:	78 85       	ldd	r23, Y+8	; 0x08
    2dda:	89 85       	ldd	r24, Y+9	; 0x09
    2ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	3f ef       	ldi	r19, 0xFF	; 255
    2de2:	4f e7       	ldi	r20, 0x7F	; 127
    2de4:	57 e4       	ldi	r21, 0x47	; 71
    2de6:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2dea:	18 16       	cp	r1, r24
    2dec:	4c f5       	brge	.+82     	; 0x2e40 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dee:	6b 85       	ldd	r22, Y+11	; 0x0b
    2df0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2df2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2df4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	40 e2       	ldi	r20, 0x20	; 32
    2dfc:	51 e4       	ldi	r21, 0x41	; 65
    2dfe:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	bc 01       	movw	r22, r24
    2e08:	cd 01       	movw	r24, r26
    2e0a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	9e 83       	std	Y+6, r25	; 0x06
    2e14:	8d 83       	std	Y+5, r24	; 0x05
    2e16:	0f c0       	rjmp	.+30     	; 0x2e36 <LCD_displayCharacter+0x8ac>
    2e18:	80 e9       	ldi	r24, 0x90	; 144
    2e1a:	91 e0       	ldi	r25, 0x01	; 1
    2e1c:	9c 83       	std	Y+4, r25	; 0x04
    2e1e:	8b 83       	std	Y+3, r24	; 0x03
    2e20:	8b 81       	ldd	r24, Y+3	; 0x03
    2e22:	9c 81       	ldd	r25, Y+4	; 0x04
    2e24:	01 97       	sbiw	r24, 0x01	; 1
    2e26:	f1 f7       	brne	.-4      	; 0x2e24 <LCD_displayCharacter+0x89a>
    2e28:	9c 83       	std	Y+4, r25	; 0x04
    2e2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	9e 83       	std	Y+6, r25	; 0x06
    2e34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e36:	8d 81       	ldd	r24, Y+5	; 0x05
    2e38:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3a:	00 97       	sbiw	r24, 0x00	; 0
    2e3c:	69 f7       	brne	.-38     	; 0x2e18 <LCD_displayCharacter+0x88e>
    2e3e:	14 c0       	rjmp	.+40     	; 0x2e68 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e40:	6f 81       	ldd	r22, Y+7	; 0x07
    2e42:	78 85       	ldd	r23, Y+8	; 0x08
    2e44:	89 85       	ldd	r24, Y+9	; 0x09
    2e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e48:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	9e 83       	std	Y+6, r25	; 0x06
    2e52:	8d 83       	std	Y+5, r24	; 0x05
    2e54:	8d 81       	ldd	r24, Y+5	; 0x05
    2e56:	9e 81       	ldd	r25, Y+6	; 0x06
    2e58:	9a 83       	std	Y+2, r25	; 0x02
    2e5a:	89 83       	std	Y+1, r24	; 0x01
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
    2e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e60:	01 97       	sbiw	r24, 0x01	; 1
    2e62:	f1 f7       	brne	.-4      	; 0x2e60 <LCD_displayCharacter+0x8d6>
    2e64:	9a 83       	std	Y+2, r25	; 0x02
    2e66:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID, data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2e68:	cd 59       	subi	r28, 0x9D	; 157
    2e6a:	df 4f       	sbci	r29, 0xFF	; 255
    2e6c:	0f b6       	in	r0, 0x3f	; 63
    2e6e:	f8 94       	cli
    2e70:	de bf       	out	0x3e, r29	; 62
    2e72:	0f be       	out	0x3f, r0	; 63
    2e74:	cd bf       	out	0x3d, r28	; 61
    2e76:	cf 91       	pop	r28
    2e78:	df 91       	pop	r29
    2e7a:	1f 91       	pop	r17
    2e7c:	0f 91       	pop	r16
    2e7e:	08 95       	ret

00002e80 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2e80:	df 93       	push	r29
    2e82:	cf 93       	push	r28
    2e84:	00 d0       	rcall	.+0      	; 0x2e86 <LCD_displayString+0x6>
    2e86:	0f 92       	push	r0
    2e88:	cd b7       	in	r28, 0x3d	; 61
    2e8a:	de b7       	in	r29, 0x3e	; 62
    2e8c:	9b 83       	std	Y+3, r25	; 0x03
    2e8e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e90:	19 82       	std	Y+1, r1	; 0x01
    2e92:	0e c0       	rjmp	.+28     	; 0x2eb0 <LCD_displayString+0x30>
	while (Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2e94:	89 81       	ldd	r24, Y+1	; 0x01
    2e96:	28 2f       	mov	r18, r24
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	e2 0f       	add	r30, r18
    2ea2:	f3 1f       	adc	r31, r19
    2ea4:	80 81       	ld	r24, Z
    2ea6:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_displayCharacter>
		i++;
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
    2eac:	8f 5f       	subi	r24, 0xFF	; 255
    2eae:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while (Str[i] != '\0')
    2eb0:	89 81       	ldd	r24, Y+1	; 0x01
    2eb2:	28 2f       	mov	r18, r24
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eba:	fc 01       	movw	r30, r24
    2ebc:	e2 0f       	add	r30, r18
    2ebe:	f3 1f       	adc	r31, r19
    2ec0:	80 81       	ld	r24, Z
    2ec2:	88 23       	and	r24, r24
    2ec4:	39 f7       	brne	.-50     	; 0x2e94 <LCD_displayString+0x14>
	 {
	 LCD_displayCharacter(*Str);
	 Str++;
	 }
	 *********************************************************/
}
    2ec6:	0f 90       	pop	r0
    2ec8:	0f 90       	pop	r0
    2eca:	0f 90       	pop	r0
    2ecc:	cf 91       	pop	r28
    2ece:	df 91       	pop	r29
    2ed0:	08 95       	ret

00002ed2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row, uint8 col)
{
    2ed2:	df 93       	push	r29
    2ed4:	cf 93       	push	r28
    2ed6:	00 d0       	rcall	.+0      	; 0x2ed8 <LCD_moveCursor+0x6>
    2ed8:	00 d0       	rcall	.+0      	; 0x2eda <LCD_moveCursor+0x8>
    2eda:	0f 92       	push	r0
    2edc:	cd b7       	in	r28, 0x3d	; 61
    2ede:	de b7       	in	r29, 0x3e	; 62
    2ee0:	8a 83       	std	Y+2, r24	; 0x02
    2ee2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch (row)
    2ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee6:	28 2f       	mov	r18, r24
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	3d 83       	std	Y+5, r19	; 0x05
    2eec:	2c 83       	std	Y+4, r18	; 0x04
    2eee:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ef2:	81 30       	cpi	r24, 0x01	; 1
    2ef4:	91 05       	cpc	r25, r1
    2ef6:	c1 f0       	breq	.+48     	; 0x2f28 <LCD_moveCursor+0x56>
    2ef8:	2c 81       	ldd	r18, Y+4	; 0x04
    2efa:	3d 81       	ldd	r19, Y+5	; 0x05
    2efc:	22 30       	cpi	r18, 0x02	; 2
    2efe:	31 05       	cpc	r19, r1
    2f00:	2c f4       	brge	.+10     	; 0x2f0c <LCD_moveCursor+0x3a>
    2f02:	8c 81       	ldd	r24, Y+4	; 0x04
    2f04:	9d 81       	ldd	r25, Y+5	; 0x05
    2f06:	00 97       	sbiw	r24, 0x00	; 0
    2f08:	61 f0       	breq	.+24     	; 0x2f22 <LCD_moveCursor+0x50>
    2f0a:	19 c0       	rjmp	.+50     	; 0x2f3e <LCD_moveCursor+0x6c>
    2f0c:	2c 81       	ldd	r18, Y+4	; 0x04
    2f0e:	3d 81       	ldd	r19, Y+5	; 0x05
    2f10:	22 30       	cpi	r18, 0x02	; 2
    2f12:	31 05       	cpc	r19, r1
    2f14:	69 f0       	breq	.+26     	; 0x2f30 <LCD_moveCursor+0x5e>
    2f16:	8c 81       	ldd	r24, Y+4	; 0x04
    2f18:	9d 81       	ldd	r25, Y+5	; 0x05
    2f1a:	83 30       	cpi	r24, 0x03	; 3
    2f1c:	91 05       	cpc	r25, r1
    2f1e:	61 f0       	breq	.+24     	; 0x2f38 <LCD_moveCursor+0x66>
    2f20:	0e c0       	rjmp	.+28     	; 0x2f3e <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address = col;
    2f22:	8b 81       	ldd	r24, Y+3	; 0x03
    2f24:	89 83       	std	Y+1, r24	; 0x01
    2f26:	0b c0       	rjmp	.+22     	; 0x2f3e <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col + 0x40;
    2f28:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2a:	80 5c       	subi	r24, 0xC0	; 192
    2f2c:	89 83       	std	Y+1, r24	; 0x01
    2f2e:	07 c0       	rjmp	.+14     	; 0x2f3e <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col + 0x10;
    2f30:	8b 81       	ldd	r24, Y+3	; 0x03
    2f32:	80 5f       	subi	r24, 0xF0	; 240
    2f34:	89 83       	std	Y+1, r24	; 0x01
    2f36:	03 c0       	rjmp	.+6      	; 0x2f3e <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col + 0x50;
    2f38:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3a:	80 5b       	subi	r24, 0xB0	; 176
    2f3c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	80 68       	ori	r24, 0x80	; 128
    2f42:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_sendCommand>
}
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	cf 91       	pop	r28
    2f52:	df 91       	pop	r29
    2f54:	08 95       	ret

00002f56 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str)
{
    2f56:	df 93       	push	r29
    2f58:	cf 93       	push	r28
    2f5a:	00 d0       	rcall	.+0      	; 0x2f5c <LCD_displayStringRowColumn+0x6>
    2f5c:	00 d0       	rcall	.+0      	; 0x2f5e <LCD_displayStringRowColumn+0x8>
    2f5e:	cd b7       	in	r28, 0x3d	; 61
    2f60:	de b7       	in	r29, 0x3e	; 62
    2f62:	89 83       	std	Y+1, r24	; 0x01
    2f64:	6a 83       	std	Y+2, r22	; 0x02
    2f66:	5c 83       	std	Y+4, r21	; 0x04
    2f68:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col); /* go to to the required LCD position */
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
    2f6c:	6a 81       	ldd	r22, Y+2	; 0x02
    2f6e:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2f72:	8b 81       	ldd	r24, Y+3	; 0x03
    2f74:	9c 81       	ldd	r25, Y+4	; 0x04
    2f76:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>
}
    2f7a:	0f 90       	pop	r0
    2f7c:	0f 90       	pop	r0
    2f7e:	0f 90       	pop	r0
    2f80:	0f 90       	pop	r0
    2f82:	cf 91       	pop	r28
    2f84:	df 91       	pop	r29
    2f86:	08 95       	ret

00002f88 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(uint16 data)
{
    2f88:	df 93       	push	r29
    2f8a:	cf 93       	push	r28
    2f8c:	cd b7       	in	r28, 0x3d	; 61
    2f8e:	de b7       	in	r29, 0x3e	; 62
    2f90:	62 97       	sbiw	r28, 0x12	; 18
    2f92:	0f b6       	in	r0, 0x3f	; 63
    2f94:	f8 94       	cli
    2f96:	de bf       	out	0x3e, r29	; 62
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	cd bf       	out	0x3d, r28	; 61
    2f9c:	9a 8b       	std	Y+18, r25	; 0x12
    2f9e:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data, buff, 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2fa0:	89 89       	ldd	r24, Y+17	; 0x11
    2fa2:	9a 89       	ldd	r25, Y+18	; 0x12
    2fa4:	9e 01       	movw	r18, r28
    2fa6:	2f 5f       	subi	r18, 0xFF	; 255
    2fa8:	3f 4f       	sbci	r19, 0xFF	; 255
    2faa:	b9 01       	movw	r22, r18
    2fac:	4a e0       	ldi	r20, 0x0A	; 10
    2fae:	50 e0       	ldi	r21, 0x00	; 0
    2fb0:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <itoa>
	LCD_displayString(buff); /* Display the string */
    2fb4:	ce 01       	movw	r24, r28
    2fb6:	01 96       	adiw	r24, 0x01	; 1
    2fb8:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>

}
    2fbc:	62 96       	adiw	r28, 0x12	; 18
    2fbe:	0f b6       	in	r0, 0x3f	; 63
    2fc0:	f8 94       	cli
    2fc2:	de bf       	out	0x3e, r29	; 62
    2fc4:	0f be       	out	0x3f, r0	; 63
    2fc6:	cd bf       	out	0x3d, r28	; 61
    2fc8:	cf 91       	pop	r28
    2fca:	df 91       	pop	r29
    2fcc:	08 95       	ret

00002fce <LCD_floatToString>:
/*
 * Description :
 * Display the required Float decimal value on the screen
 */
void LCD_floatToString(float32 data)
{
    2fce:	0f 93       	push	r16
    2fd0:	1f 93       	push	r17
    2fd2:	df 93       	push	r29
    2fd4:	cf 93       	push	r28
    2fd6:	cd b7       	in	r28, 0x3d	; 61
    2fd8:	de b7       	in	r29, 0x3e	; 62
    2fda:	64 97       	sbiw	r28, 0x14	; 20
    2fdc:	0f b6       	in	r0, 0x3f	; 63
    2fde:	f8 94       	cli
    2fe0:	de bf       	out	0x3e, r29	; 62
    2fe2:	0f be       	out	0x3f, r0	; 63
    2fe4:	cd bf       	out	0x3d, r28	; 61
    2fe6:	69 8b       	std	Y+17, r22	; 0x11
    2fe8:	7a 8b       	std	Y+18, r23	; 0x12
    2fea:	8b 8b       	std	Y+19, r24	; 0x13
    2fec:	9c 8b       	std	Y+20, r25	; 0x14
	char buff[16]; /* String to hold the ascii result */
	dtostrf(data, 6, 3, buff); /* Use dtostrf C function to convert the data to its corresponding ASCII value, 10 for float decimal */
    2fee:	89 89       	ldd	r24, Y+17	; 0x11
    2ff0:	9a 89       	ldd	r25, Y+18	; 0x12
    2ff2:	ab 89       	ldd	r26, Y+19	; 0x13
    2ff4:	bc 89       	ldd	r27, Y+20	; 0x14
    2ff6:	bc 01       	movw	r22, r24
    2ff8:	cd 01       	movw	r24, r26
    2ffa:	46 e0       	ldi	r20, 0x06	; 6
    2ffc:	50 e0       	ldi	r21, 0x00	; 0
    2ffe:	23 e0       	ldi	r18, 0x03	; 3
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	fe 01       	movw	r30, r28
    3004:	31 96       	adiw	r30, 0x01	; 1
    3006:	8f 01       	movw	r16, r30
    3008:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <dtostrf>
	LCD_displayString(buff); /* Display the string */
    300c:	ce 01       	movw	r24, r28
    300e:	01 96       	adiw	r24, 0x01	; 1
    3010:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>
}
    3014:	64 96       	adiw	r28, 0x14	; 20
    3016:	0f b6       	in	r0, 0x3f	; 63
    3018:	f8 94       	cli
    301a:	de bf       	out	0x3e, r29	; 62
    301c:	0f be       	out	0x3f, r0	; 63
    301e:	cd bf       	out	0x3d, r28	; 61
    3020:	cf 91       	pop	r28
    3022:	df 91       	pop	r29
    3024:	1f 91       	pop	r17
    3026:	0f 91       	pop	r16
    3028:	08 95       	ret

0000302a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    302a:	df 93       	push	r29
    302c:	cf 93       	push	r28
    302e:	cd b7       	in	r28, 0x3d	; 61
    3030:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_sendCommand>
}
    3038:	cf 91       	pop	r28
    303a:	df 91       	pop	r29
    303c:	08 95       	ret

0000303e <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    303e:	df 93       	push	r29
    3040:	cf 93       	push	r28
    3042:	cd b7       	in	r28, 0x3d	; 61
    3044:	de b7       	in	r29, 0x3e	; 62
    3046:	60 97       	sbiw	r28, 0x10	; 16
    3048:	0f b6       	in	r0, 0x3f	; 63
    304a:	f8 94       	cli
    304c:	de bf       	out	0x3e, r29	; 62
    304e:	0f be       	out	0x3f, r0	; 63
    3050:	cd bf       	out	0x3d, r28	; 61
	uint8 col, row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID,
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	60 e0       	ldi	r22, 0x00	; 0
    3056:	40 e0       	ldi	r20, 0x00	; 0
    3058:	0e 94 63 08 	call	0x10c6	; 0x10c6 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, LOGIC_HIGH);
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	60 e0       	ldi	r22, 0x00	; 0
    3060:	41 e0       	ldi	r20, 0x01	; 1
    3062:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 1,
    3066:	81 e0       	ldi	r24, 0x01	; 1
    3068:	61 e0       	ldi	r22, 0x01	; 1
    306a:	40 e0       	ldi	r20, 0x00	; 0
    306c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 1, LOGIC_HIGH);
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	61 e0       	ldi	r22, 0x01	; 1
    3074:	41 e0       	ldi	r20, 0x01	; 1
    3076:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 2,
    307a:	81 e0       	ldi	r24, 0x01	; 1
    307c:	62 e0       	ldi	r22, 0x02	; 2
    307e:	40 e0       	ldi	r20, 0x00	; 0
    3080:	0e 94 63 08 	call	0x10c6	; 0x10c6 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 2, LOGIC_HIGH);
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	62 e0       	ldi	r22, 0x02	; 2
    3088:	41 e0       	ldi	r20, 0x01	; 1
    308a:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 3,
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	63 e0       	ldi	r22, 0x03	; 3
    3092:	40 e0       	ldi	r20, 0x00	; 0
    3094:	0e 94 63 08 	call	0x10c6	; 0x10c6 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 3, LOGIC_HIGH);
    3098:	81 e0       	ldi	r24, 0x01	; 1
    309a:	63 e0       	ldi	r22, 0x03	; 3
    309c:	41 e0       	ldi	r20, 0x01	; 1
    309e:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID,
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	64 e0       	ldi	r22, 0x04	; 4
    30a6:	40 e0       	ldi	r20, 0x00	; 0
    30a8:	0e 94 63 08 	call	0x10c6	; 0x10c6 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, LOGIC_HIGH);
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	64 e0       	ldi	r22, 0x04	; 4
    30b0:	41 e0       	ldi	r20, 0x01	; 1
    30b2:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 1,
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	65 e0       	ldi	r22, 0x05	; 5
    30ba:	40 e0       	ldi	r20, 0x00	; 0
    30bc:	0e 94 63 08 	call	0x10c6	; 0x10c6 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 1, LOGIC_HIGH);
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	65 e0       	ldi	r22, 0x05	; 5
    30c4:	41 e0       	ldi	r20, 0x01	; 1
    30c6:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 2,
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	66 e0       	ldi	r22, 0x06	; 6
    30ce:	40 e0       	ldi	r20, 0x00	; 0
    30d0:	0e 94 63 08 	call	0x10c6	; 0x10c6 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 2, LOGIC_HIGH);
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	66 e0       	ldi	r22, 0x06	; 6
    30d8:	41 e0       	ldi	r20, 0x01	; 1
    30da:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 3,
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	67 e0       	ldi	r22, 0x07	; 7
    30e2:	40 e0       	ldi	r20, 0x00	; 0
    30e4:	0e 94 63 08 	call	0x10c6	; 0x10c6 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 3, LOGIC_HIGH);
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	67 e0       	ldi	r22, 0x07	; 7
    30ec:	41 e0       	ldi	r20, 0x01	; 1
    30ee:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
#endif
	while (1)
	{
		for (row = 0; row < KEYPAD_NUM_ROWS; row++) /* loop for rows */
    30f2:	1f 86       	std	Y+15, r1	; 0x0f
    30f4:	ab c0       	rjmp	.+342    	; 0x324c <KEYPAD_getPressedKey+0x20e>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	6f 85       	ldd	r22, Y+15	; 0x0f
    30fa:	41 e0       	ldi	r20, 0x01	; 1
    30fc:	0e 94 63 08 	call	0x10c6	; 0x10c6 <GPIO_setupPinDirection>
			KEYPAD_FIRST_ROW_PIN_ID + row, PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row,
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	6f 85       	ldd	r22, Y+15	; 0x0f
    3104:	40 e0       	ldi	r20, 0x00	; 0
    3106:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePin>
			KEYPAD_BUTTON_PRESSED);

			for (col = 0; col < KEYPAD_NUM_COLS; col++) /* loop for columns */
    310a:	18 8a       	std	Y+16, r1	; 0x10
    310c:	22 c0       	rjmp	.+68     	; 0x3152 <KEYPAD_getPressedKey+0x114>
			{
				/* Check if the switch is pressed in this column */
				if (GPIO_readPin(KEYPAD_COL_PORT_ID,
    310e:	88 89       	ldd	r24, Y+16	; 0x10
    3110:	98 2f       	mov	r25, r24
    3112:	9c 5f       	subi	r25, 0xFC	; 252
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	69 2f       	mov	r22, r25
    3118:	0e 94 39 0a 	call	0x1472	; 0x1472 <GPIO_readPin>
    311c:	88 23       	and	r24, r24
    311e:	b1 f4       	brne	.+44     	; 0x314c <KEYPAD_getPressedKey+0x10e>
#endif
#elif (KEYPAD_NUM_COLS == 4)
#ifdef STANDARD_KEYPAD
					return ((row * KEYPAD_NUM_COLS) + col + 1);
#else
					return KEYPAD_4x4_adjustKeyNumber(
    3120:	8f 85       	ldd	r24, Y+15	; 0x0f
    3122:	88 2f       	mov	r24, r24
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	88 0f       	add	r24, r24
    3128:	99 1f       	adc	r25, r25
    312a:	88 0f       	add	r24, r24
    312c:	99 1f       	adc	r25, r25
    312e:	98 2f       	mov	r25, r24
    3130:	88 89       	ldd	r24, Y+16	; 0x10
    3132:	89 0f       	add	r24, r25
    3134:	8f 5f       	subi	r24, 0xFF	; 255
    3136:	0e 94 2b 19 	call	0x3256	; 0x3256 <KEYPAD_4x4_adjustKeyNumber>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
			KEYPAD_FIRST_ROW_PIN_ID + row, PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    313a:	60 96       	adiw	r28, 0x10	; 16
    313c:	0f b6       	in	r0, 0x3f	; 63
    313e:	f8 94       	cli
    3140:	de bf       	out	0x3e, r29	; 62
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	cd bf       	out	0x3d, r28	; 61
    3146:	cf 91       	pop	r28
    3148:	df 91       	pop	r29
    314a:	08 95       	ret

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row,
			KEYPAD_BUTTON_PRESSED);

			for (col = 0; col < KEYPAD_NUM_COLS; col++) /* loop for columns */
    314c:	88 89       	ldd	r24, Y+16	; 0x10
    314e:	8f 5f       	subi	r24, 0xFF	; 255
    3150:	88 8b       	std	Y+16, r24	; 0x10
    3152:	88 89       	ldd	r24, Y+16	; 0x10
    3154:	84 30       	cpi	r24, 0x04	; 4
    3156:	d8 f2       	brcs	.-74     	; 0x310e <KEYPAD_getPressedKey+0xd0>
							(row * KEYPAD_NUM_COLS) + col + 1);
#endif
#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	6f 85       	ldd	r22, Y+15	; 0x0f
    315c:	40 e0       	ldi	r20, 0x00	; 0
    315e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <GPIO_setupPinDirection>
    3162:	80 e0       	ldi	r24, 0x00	; 0
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	a0 ea       	ldi	r26, 0xA0	; 160
    3168:	b0 e4       	ldi	r27, 0x40	; 64
    316a:	8b 87       	std	Y+11, r24	; 0x0b
    316c:	9c 87       	std	Y+12, r25	; 0x0c
    316e:	ad 87       	std	Y+13, r26	; 0x0d
    3170:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3172:	6b 85       	ldd	r22, Y+11	; 0x0b
    3174:	7c 85       	ldd	r23, Y+12	; 0x0c
    3176:	8d 85       	ldd	r24, Y+13	; 0x0d
    3178:	9e 85       	ldd	r25, Y+14	; 0x0e
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	4a e7       	ldi	r20, 0x7A	; 122
    3180:	55 e4       	ldi	r21, 0x45	; 69
    3182:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	8f 83       	std	Y+7, r24	; 0x07
    318c:	98 87       	std	Y+8, r25	; 0x08
    318e:	a9 87       	std	Y+9, r26	; 0x09
    3190:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3192:	6f 81       	ldd	r22, Y+7	; 0x07
    3194:	78 85       	ldd	r23, Y+8	; 0x08
    3196:	89 85       	ldd	r24, Y+9	; 0x09
    3198:	9a 85       	ldd	r25, Y+10	; 0x0a
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	40 e8       	ldi	r20, 0x80	; 128
    31a0:	5f e3       	ldi	r21, 0x3F	; 63
    31a2:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    31a6:	88 23       	and	r24, r24
    31a8:	2c f4       	brge	.+10     	; 0x31b4 <KEYPAD_getPressedKey+0x176>
		__ticks = 1;
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	9e 83       	std	Y+6, r25	; 0x06
    31b0:	8d 83       	std	Y+5, r24	; 0x05
    31b2:	3f c0       	rjmp	.+126    	; 0x3232 <KEYPAD_getPressedKey+0x1f4>
	else if (__tmp > 65535)
    31b4:	6f 81       	ldd	r22, Y+7	; 0x07
    31b6:	78 85       	ldd	r23, Y+8	; 0x08
    31b8:	89 85       	ldd	r24, Y+9	; 0x09
    31ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	3f ef       	ldi	r19, 0xFF	; 255
    31c0:	4f e7       	ldi	r20, 0x7F	; 127
    31c2:	57 e4       	ldi	r21, 0x47	; 71
    31c4:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    31c8:	18 16       	cp	r1, r24
    31ca:	4c f5       	brge	.+82     	; 0x321e <KEYPAD_getPressedKey+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    31d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	40 e2       	ldi	r20, 0x20	; 32
    31da:	51 e4       	ldi	r21, 0x41	; 65
    31dc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	bc 01       	movw	r22, r24
    31e6:	cd 01       	movw	r24, r26
    31e8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	9e 83       	std	Y+6, r25	; 0x06
    31f2:	8d 83       	std	Y+5, r24	; 0x05
    31f4:	0f c0       	rjmp	.+30     	; 0x3214 <KEYPAD_getPressedKey+0x1d6>
    31f6:	80 e9       	ldi	r24, 0x90	; 144
    31f8:	91 e0       	ldi	r25, 0x01	; 1
    31fa:	9c 83       	std	Y+4, r25	; 0x04
    31fc:	8b 83       	std	Y+3, r24	; 0x03
    31fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3200:	9c 81       	ldd	r25, Y+4	; 0x04
    3202:	01 97       	sbiw	r24, 0x01	; 1
    3204:	f1 f7       	brne	.-4      	; 0x3202 <KEYPAD_getPressedKey+0x1c4>
    3206:	9c 83       	std	Y+4, r25	; 0x04
    3208:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    320a:	8d 81       	ldd	r24, Y+5	; 0x05
    320c:	9e 81       	ldd	r25, Y+6	; 0x06
    320e:	01 97       	sbiw	r24, 0x01	; 1
    3210:	9e 83       	std	Y+6, r25	; 0x06
    3212:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3214:	8d 81       	ldd	r24, Y+5	; 0x05
    3216:	9e 81       	ldd	r25, Y+6	; 0x06
    3218:	00 97       	sbiw	r24, 0x00	; 0
    321a:	69 f7       	brne	.-38     	; 0x31f6 <KEYPAD_getPressedKey+0x1b8>
    321c:	14 c0       	rjmp	.+40     	; 0x3246 <KEYPAD_getPressedKey+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    321e:	6f 81       	ldd	r22, Y+7	; 0x07
    3220:	78 85       	ldd	r23, Y+8	; 0x08
    3222:	89 85       	ldd	r24, Y+9	; 0x09
    3224:	9a 85       	ldd	r25, Y+10	; 0x0a
    3226:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    322a:	dc 01       	movw	r26, r24
    322c:	cb 01       	movw	r24, r22
    322e:	9e 83       	std	Y+6, r25	; 0x06
    3230:	8d 83       	std	Y+5, r24	; 0x05
    3232:	8d 81       	ldd	r24, Y+5	; 0x05
    3234:	9e 81       	ldd	r25, Y+6	; 0x06
    3236:	9a 83       	std	Y+2, r25	; 0x02
    3238:	89 83       	std	Y+1, r24	; 0x01
    323a:	89 81       	ldd	r24, Y+1	; 0x01
    323c:	9a 81       	ldd	r25, Y+2	; 0x02
    323e:	01 97       	sbiw	r24, 0x01	; 1
    3240:	f1 f7       	brne	.-4      	; 0x323e <KEYPAD_getPressedKey+0x200>
    3242:	9a 83       	std	Y+2, r25	; 0x02
    3244:	89 83       	std	Y+1, r24	; 0x01
			PIN_INPUT);
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 3, LOGIC_HIGH);
#endif
	while (1)
	{
		for (row = 0; row < KEYPAD_NUM_ROWS; row++) /* loop for rows */
    3246:	8f 85       	ldd	r24, Y+15	; 0x0f
    3248:	8f 5f       	subi	r24, 0xFF	; 255
    324a:	8f 87       	std	Y+15, r24	; 0x0f
    324c:	8f 85       	ldd	r24, Y+15	; 0x0f
    324e:	84 30       	cpi	r24, 0x04	; 4
    3250:	08 f4       	brcc	.+2      	; 0x3254 <KEYPAD_getPressedKey+0x216>
    3252:	51 cf       	rjmp	.-350    	; 0x30f6 <KEYPAD_getPressedKey+0xb8>
    3254:	4e cf       	rjmp	.-356    	; 0x30f2 <KEYPAD_getPressedKey+0xb4>

00003256 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    3256:	df 93       	push	r29
    3258:	cf 93       	push	r28
    325a:	00 d0       	rcall	.+0      	; 0x325c <KEYPAD_4x4_adjustKeyNumber+0x6>
    325c:	00 d0       	rcall	.+0      	; 0x325e <KEYPAD_4x4_adjustKeyNumber+0x8>
    325e:	cd b7       	in	r28, 0x3d	; 61
    3260:	de b7       	in	r29, 0x3e	; 62
    3262:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    3264:	19 82       	std	Y+1, r1	; 0x01
	switch (button_number)
    3266:	8a 81       	ldd	r24, Y+2	; 0x02
    3268:	28 2f       	mov	r18, r24
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	3c 83       	std	Y+4, r19	; 0x04
    326e:	2b 83       	std	Y+3, r18	; 0x03
    3270:	8b 81       	ldd	r24, Y+3	; 0x03
    3272:	9c 81       	ldd	r25, Y+4	; 0x04
    3274:	88 30       	cpi	r24, 0x08	; 8
    3276:	91 05       	cpc	r25, r1
    3278:	09 f4       	brne	.+2      	; 0x327c <KEYPAD_4x4_adjustKeyNumber+0x26>
    327a:	70 c0       	rjmp	.+224    	; 0x335c <KEYPAD_4x4_adjustKeyNumber+0x106>
    327c:	2b 81       	ldd	r18, Y+3	; 0x03
    327e:	3c 81       	ldd	r19, Y+4	; 0x04
    3280:	29 30       	cpi	r18, 0x09	; 9
    3282:	31 05       	cpc	r19, r1
    3284:	5c f5       	brge	.+86     	; 0x32dc <KEYPAD_4x4_adjustKeyNumber+0x86>
    3286:	8b 81       	ldd	r24, Y+3	; 0x03
    3288:	9c 81       	ldd	r25, Y+4	; 0x04
    328a:	84 30       	cpi	r24, 0x04	; 4
    328c:	91 05       	cpc	r25, r1
    328e:	09 f4       	brne	.+2      	; 0x3292 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    3290:	59 c0       	rjmp	.+178    	; 0x3344 <KEYPAD_4x4_adjustKeyNumber+0xee>
    3292:	2b 81       	ldd	r18, Y+3	; 0x03
    3294:	3c 81       	ldd	r19, Y+4	; 0x04
    3296:	25 30       	cpi	r18, 0x05	; 5
    3298:	31 05       	cpc	r19, r1
    329a:	9c f4       	brge	.+38     	; 0x32c2 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    329c:	8b 81       	ldd	r24, Y+3	; 0x03
    329e:	9c 81       	ldd	r25, Y+4	; 0x04
    32a0:	82 30       	cpi	r24, 0x02	; 2
    32a2:	91 05       	cpc	r25, r1
    32a4:	09 f4       	brne	.+2      	; 0x32a8 <KEYPAD_4x4_adjustKeyNumber+0x52>
    32a6:	48 c0       	rjmp	.+144    	; 0x3338 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    32a8:	2b 81       	ldd	r18, Y+3	; 0x03
    32aa:	3c 81       	ldd	r19, Y+4	; 0x04
    32ac:	23 30       	cpi	r18, 0x03	; 3
    32ae:	31 05       	cpc	r19, r1
    32b0:	0c f0       	brlt	.+2      	; 0x32b4 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    32b2:	45 c0       	rjmp	.+138    	; 0x333e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    32b4:	8b 81       	ldd	r24, Y+3	; 0x03
    32b6:	9c 81       	ldd	r25, Y+4	; 0x04
    32b8:	81 30       	cpi	r24, 0x01	; 1
    32ba:	91 05       	cpc	r25, r1
    32bc:	09 f4       	brne	.+2      	; 0x32c0 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    32be:	39 c0       	rjmp	.+114    	; 0x3332 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    32c0:	67 c0       	rjmp	.+206    	; 0x3390 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    32c2:	2b 81       	ldd	r18, Y+3	; 0x03
    32c4:	3c 81       	ldd	r19, Y+4	; 0x04
    32c6:	26 30       	cpi	r18, 0x06	; 6
    32c8:	31 05       	cpc	r19, r1
    32ca:	09 f4       	brne	.+2      	; 0x32ce <KEYPAD_4x4_adjustKeyNumber+0x78>
    32cc:	41 c0       	rjmp	.+130    	; 0x3350 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    32ce:	8b 81       	ldd	r24, Y+3	; 0x03
    32d0:	9c 81       	ldd	r25, Y+4	; 0x04
    32d2:	87 30       	cpi	r24, 0x07	; 7
    32d4:	91 05       	cpc	r25, r1
    32d6:	0c f0       	brlt	.+2      	; 0x32da <KEYPAD_4x4_adjustKeyNumber+0x84>
    32d8:	3e c0       	rjmp	.+124    	; 0x3356 <KEYPAD_4x4_adjustKeyNumber+0x100>
    32da:	37 c0       	rjmp	.+110    	; 0x334a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    32dc:	2b 81       	ldd	r18, Y+3	; 0x03
    32de:	3c 81       	ldd	r19, Y+4	; 0x04
    32e0:	2c 30       	cpi	r18, 0x0C	; 12
    32e2:	31 05       	cpc	r19, r1
    32e4:	09 f4       	brne	.+2      	; 0x32e8 <KEYPAD_4x4_adjustKeyNumber+0x92>
    32e6:	46 c0       	rjmp	.+140    	; 0x3374 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    32e8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ea:	9c 81       	ldd	r25, Y+4	; 0x04
    32ec:	8d 30       	cpi	r24, 0x0D	; 13
    32ee:	91 05       	cpc	r25, r1
    32f0:	5c f4       	brge	.+22     	; 0x3308 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    32f2:	2b 81       	ldd	r18, Y+3	; 0x03
    32f4:	3c 81       	ldd	r19, Y+4	; 0x04
    32f6:	2a 30       	cpi	r18, 0x0A	; 10
    32f8:	31 05       	cpc	r19, r1
    32fa:	b1 f1       	breq	.+108    	; 0x3368 <KEYPAD_4x4_adjustKeyNumber+0x112>
    32fc:	8b 81       	ldd	r24, Y+3	; 0x03
    32fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3300:	8b 30       	cpi	r24, 0x0B	; 11
    3302:	91 05       	cpc	r25, r1
    3304:	a4 f5       	brge	.+104    	; 0x336e <KEYPAD_4x4_adjustKeyNumber+0x118>
    3306:	2d c0       	rjmp	.+90     	; 0x3362 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    3308:	2b 81       	ldd	r18, Y+3	; 0x03
    330a:	3c 81       	ldd	r19, Y+4	; 0x04
    330c:	2e 30       	cpi	r18, 0x0E	; 14
    330e:	31 05       	cpc	r19, r1
    3310:	b9 f1       	breq	.+110    	; 0x3380 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    3312:	8b 81       	ldd	r24, Y+3	; 0x03
    3314:	9c 81       	ldd	r25, Y+4	; 0x04
    3316:	8e 30       	cpi	r24, 0x0E	; 14
    3318:	91 05       	cpc	r25, r1
    331a:	7c f1       	brlt	.+94     	; 0x337a <KEYPAD_4x4_adjustKeyNumber+0x124>
    331c:	2b 81       	ldd	r18, Y+3	; 0x03
    331e:	3c 81       	ldd	r19, Y+4	; 0x04
    3320:	2f 30       	cpi	r18, 0x0F	; 15
    3322:	31 05       	cpc	r19, r1
    3324:	79 f1       	breq	.+94     	; 0x3384 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    3326:	8b 81       	ldd	r24, Y+3	; 0x03
    3328:	9c 81       	ldd	r25, Y+4	; 0x04
    332a:	80 31       	cpi	r24, 0x10	; 16
    332c:	91 05       	cpc	r25, r1
    332e:	69 f1       	breq	.+90     	; 0x338a <KEYPAD_4x4_adjustKeyNumber+0x134>
    3330:	2f c0       	rjmp	.+94     	; 0x3390 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1:
		keypad_button = 1;
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	89 83       	std	Y+1, r24	; 0x01
    3336:	2e c0       	rjmp	.+92     	; 0x3394 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 2:
		keypad_button = 2;
    3338:	82 e0       	ldi	r24, 0x02	; 2
    333a:	89 83       	std	Y+1, r24	; 0x01
    333c:	2b c0       	rjmp	.+86     	; 0x3394 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 3:
		keypad_button = 3;
    333e:	83 e0       	ldi	r24, 0x03	; 3
    3340:	89 83       	std	Y+1, r24	; 0x01
    3342:	28 c0       	rjmp	.+80     	; 0x3394 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 4:
		keypad_button = '^';
    3344:	8e e5       	ldi	r24, 0x5E	; 94
    3346:	89 83       	std	Y+1, r24	; 0x01
    3348:	25 c0       	rjmp	.+74     	; 0x3394 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 5:
		keypad_button = 4;
    334a:	84 e0       	ldi	r24, 0x04	; 4
    334c:	89 83       	std	Y+1, r24	; 0x01
    334e:	22 c0       	rjmp	.+68     	; 0x3394 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 6:
		keypad_button = 5;
    3350:	85 e0       	ldi	r24, 0x05	; 5
    3352:	89 83       	std	Y+1, r24	; 0x01
    3354:	1f c0       	rjmp	.+62     	; 0x3394 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 7:
		keypad_button = 6;
    3356:	86 e0       	ldi	r24, 0x06	; 6
    3358:	89 83       	std	Y+1, r24	; 0x01
    335a:	1c c0       	rjmp	.+56     	; 0x3394 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 8:
		keypad_button = '^';
    335c:	8e e5       	ldi	r24, 0x5E	; 94
    335e:	89 83       	std	Y+1, r24	; 0x01
    3360:	19 c0       	rjmp	.+50     	; 0x3394 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 9:
		keypad_button = 7;
    3362:	87 e0       	ldi	r24, 0x07	; 7
    3364:	89 83       	std	Y+1, r24	; 0x01
    3366:	16 c0       	rjmp	.+44     	; 0x3394 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 10:
		keypad_button = 8;
    3368:	88 e0       	ldi	r24, 0x08	; 8
    336a:	89 83       	std	Y+1, r24	; 0x01
    336c:	13 c0       	rjmp	.+38     	; 0x3394 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 11:
		keypad_button = 9;
    336e:	89 e0       	ldi	r24, 0x09	; 9
    3370:	89 83       	std	Y+1, r24	; 0x01
    3372:	10 c0       	rjmp	.+32     	; 0x3394 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 12:
		keypad_button = '^';
    3374:	8e e5       	ldi	r24, 0x5E	; 94
    3376:	89 83       	std	Y+1, r24	; 0x01
    3378:	0d c0       	rjmp	.+26     	; 0x3394 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 13:
		keypad_button = '^';
    337a:	8e e5       	ldi	r24, 0x5E	; 94
    337c:	89 83       	std	Y+1, r24	; 0x01
    337e:	0a c0       	rjmp	.+20     	; 0x3394 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 14:
		keypad_button = 0;
    3380:	19 82       	std	Y+1, r1	; 0x01
    3382:	08 c0       	rjmp	.+16     	; 0x3394 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 15:
		keypad_button = '#';
    3384:	83 e2       	ldi	r24, 0x23	; 35
    3386:	89 83       	std	Y+1, r24	; 0x01
    3388:	05 c0       	rjmp	.+10     	; 0x3394 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 16:
		keypad_button = '^';
    338a:	8e e5       	ldi	r24, 0x5E	; 94
    338c:	89 83       	std	Y+1, r24	; 0x01
    338e:	02 c0       	rjmp	.+4      	; 0x3394 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	default:
		keypad_button = button_number;
    3390:	8a 81       	ldd	r24, Y+2	; 0x02
    3392:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypad_button;
    3394:	89 81       	ldd	r24, Y+1	; 0x01
}
    3396:	0f 90       	pop	r0
    3398:	0f 90       	pop	r0
    339a:	0f 90       	pop	r0
    339c:	0f 90       	pop	r0
    339e:	cf 91       	pop	r28
    33a0:	df 91       	pop	r29
    33a2:	08 95       	ret

000033a4 <main>:
 * Function output: void.
 */
void TIMER0_Func(void);

int main(void)
{
    33a4:	df 93       	push	r29
    33a6:	cf 93       	push	r28
    33a8:	cd b7       	in	r28, 0x3d	; 61
    33aa:	de b7       	in	r29, 0x3e	; 62
    33ac:	ac 97       	sbiw	r28, 0x2c	; 44
    33ae:	0f b6       	in	r0, 0x3f	; 63
    33b0:	f8 94       	cli
    33b2:	de bf       	out	0x3e, r29	; 62
    33b4:	0f be       	out	0x3f, r0	; 63
    33b6:	cd bf       	out	0x3d, r28	; 61
	/* array for the period which user will enter */
	uint8 entredPeriod[PERIOD_LENGTH];

	/* select the configuration of ADC */
	ADC_ConfigType ADC_Soil =
	{ AVCC_5V, ADC_F_CPU_Pre_128 };
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	8f 8f       	std	Y+31, r24	; 0x1f
    33bc:	87 e0       	ldi	r24, 0x07	; 7
    33be:	88 a3       	std	Y+32, r24	; 0x20

	/* select the configuration of EXT0 */
	EXT_INT0_ConfigType EXT_INT0_Config =
	{ FALLING_EDGE };
    33c0:	82 e0       	ldi	r24, 0x02	; 2
    33c2:	89 a3       	std	Y+33, r24	; 0x21

	/* select the configuration of EXT1 */
	EXT_INT1_ConfigType EXT_INT1_Config =
	{ FALLING_EDGE };
    33c4:	82 e0       	ldi	r24, 0x02	; 2
    33c6:	8a a3       	std	Y+34, r24	; 0x22

	/* select the configuration of TIMER0 */
	TIMER0_ConfigType TIMER0_Config =
	{ CTC_INITIAL_VALUE, CTC_VALUE, CTC_MODE, PRESCALER_1024,
			NORMAL_MODE_OC0_DISCONNECTED };
    33c8:	ae 01       	movw	r20, r28
    33ca:	4d 5d       	subi	r20, 0xDD	; 221
    33cc:	5f 4f       	sbci	r21, 0xFF	; 255
    33ce:	59 a7       	std	Y+41, r21	; 0x29
    33d0:	48 a7       	std	Y+40, r20	; 0x28
    33d2:	80 ea       	ldi	r24, 0xA0	; 160
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	9b a7       	std	Y+43, r25	; 0x2b
    33d8:	8a a7       	std	Y+42, r24	; 0x2a
    33da:	95 e0       	ldi	r25, 0x05	; 5
    33dc:	9c a7       	std	Y+44, r25	; 0x2c
    33de:	ea a5       	ldd	r30, Y+42	; 0x2a
    33e0:	fb a5       	ldd	r31, Y+43	; 0x2b
    33e2:	00 80       	ld	r0, Z
    33e4:	4a a5       	ldd	r20, Y+42	; 0x2a
    33e6:	5b a5       	ldd	r21, Y+43	; 0x2b
    33e8:	4f 5f       	subi	r20, 0xFF	; 255
    33ea:	5f 4f       	sbci	r21, 0xFF	; 255
    33ec:	5b a7       	std	Y+43, r21	; 0x2b
    33ee:	4a a7       	std	Y+42, r20	; 0x2a
    33f0:	e8 a5       	ldd	r30, Y+40	; 0x28
    33f2:	f9 a5       	ldd	r31, Y+41	; 0x29
    33f4:	00 82       	st	Z, r0
    33f6:	48 a5       	ldd	r20, Y+40	; 0x28
    33f8:	59 a5       	ldd	r21, Y+41	; 0x29
    33fa:	4f 5f       	subi	r20, 0xFF	; 255
    33fc:	5f 4f       	sbci	r21, 0xFF	; 255
    33fe:	59 a7       	std	Y+41, r21	; 0x29
    3400:	48 a7       	std	Y+40, r20	; 0x28
    3402:	5c a5       	ldd	r21, Y+44	; 0x2c
    3404:	51 50       	subi	r21, 0x01	; 1
    3406:	5c a7       	std	Y+44, r21	; 0x2c
    3408:	8c a5       	ldd	r24, Y+44	; 0x2c
    340a:	88 23       	and	r24, r24
    340c:	41 f7       	brne	.-48     	; 0x33de <main+0x3a>

	/* passing the configuration to initialization function of TIMER0 */
	Timer0_init(&TIMER0_Config);
    340e:	ce 01       	movw	r24, r28
    3410:	83 96       	adiw	r24, 0x23	; 35
    3412:	0e 94 64 07 	call	0xec8	; 0xec8 <Timer0_init>

	/* passing the configuration to initialization function of EXT0 */
	EXT_INT0_init(&EXT_INT0_Config);
    3416:	ce 01       	movw	r24, r28
    3418:	81 96       	adiw	r24, 0x21	; 33
    341a:	0e 94 40 0c 	call	0x1880	; 0x1880 <EXT_INT0_init>
	/* passing the configuration to initialization function of EXT01 */
	EXT_INT1_init(&EXT_INT1_Config);
    341e:	ce 01       	movw	r24, r28
    3420:	82 96       	adiw	r24, 0x22	; 34
    3422:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <EXT_INT1_init>

	/* passing the configuration to initialization function of ADC */
	ADC_init(&ADC_Soil);
    3426:	ce 01       	movw	r24, r28
    3428:	4f 96       	adiw	r24, 0x1f	; 31
    342a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <ADC_init>

	/* setup the call back function */
	EXT_INT0_setCallBack(INT0_Func);
    342e:	8f e5       	ldi	r24, 0x5F	; 95
    3430:	9d e1       	ldi	r25, 0x1D	; 29
    3432:	0e 94 b3 0c 	call	0x1966	; 0x1966 <EXT_INT0_setCallBack>
	/* setup the call back function */
	EXT_INT1_setCallBack(INT1_Func);
    3436:	88 e6       	ldi	r24, 0x68	; 104
    3438:	9d e1       	ldi	r25, 0x1D	; 29
    343a:	0e 94 c5 0c 	call	0x198a	; 0x198a <EXT_INT1_setCallBack>

	/* setup the call back function */
	Timer0_setCallBack(TIMER0_Func);
    343e:	82 e7       	ldi	r24, 0x72	; 114
    3440:	9d e1       	ldi	r25, 0x1D	; 29
    3442:	0e 94 28 08 	call	0x1050	; 0x1050 <Timer0_setCallBack>

	/* initialization function of UART with baud rate 9600 */
	UART_init(9600);
    3446:	60 e8       	ldi	r22, 0x80	; 128
    3448:	75 e2       	ldi	r23, 0x25	; 37
    344a:	80 e0       	ldi	r24, 0x00	; 0
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	0e 94 20 06 	call	0xc40	; 0xc40 <UART_init>

	/* call the initialization function of LCD */
	LCD_init();
    3452:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <LCD_init>

	/* call the initialization function of Water Pump */
	WaterPumb_Init();
    3456:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <WaterPumb_Init>

	/* global interrupt enable */
	SREG_REG.Bits.I_Bit = 1;
    345a:	ef e5       	ldi	r30, 0x5F	; 95
    345c:	f0 e0       	ldi	r31, 0x00	; 0
    345e:	80 81       	ld	r24, Z
    3460:	80 68       	ori	r24, 0x80	; 128
    3462:	80 83       	st	Z, r24
    3464:	72 c0       	rjmp	.+228    	; 0x354a <main+0x1a6>
	{
		/* if the selected mode is the first mode */
		while (g_Mode == 0)
		{
			/* to print the state of water pump and the percentage of ADC reading */
			LCD_displayStringRowColumn(0, 0, "Water Pump: ");
    3466:	20 e6       	ldi	r18, 0x60	; 96
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	80 e0       	ldi	r24, 0x00	; 0
    346c:	60 e0       	ldi	r22, 0x00	; 0
    346e:	a9 01       	movw	r20, r18
    3470:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "Value: ");
    3474:	2d e6       	ldi	r18, 0x6D	; 109
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	81 e0       	ldi	r24, 0x01	; 1
    347a:	60 e0       	ldi	r22, 0x00	; 0
    347c:	a9 01       	movw	r20, r18
    347e:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_displayStringRowColumn>
			/* get the value from the ADC channel */
			adcValue = Soilsensor_getValue();
    3482:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <Soilsensor_getValue>
    3486:	80 93 b0 00 	sts	0x00B0, r24
			/* calculate the percentage of reading */
			percentageOfRead = 100 - ((uint32) (adcValue * 100) / 255);
    348a:	80 91 b0 00 	lds	r24, 0x00B0
    348e:	28 2f       	mov	r18, r24
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	84 e6       	ldi	r24, 0x64	; 100
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	fc 01       	movw	r30, r24
    3498:	2e 9f       	mul	r18, r30
    349a:	c0 01       	movw	r24, r0
    349c:	2f 9f       	mul	r18, r31
    349e:	90 0d       	add	r25, r0
    34a0:	3e 9f       	mul	r19, r30
    34a2:	90 0d       	add	r25, r0
    34a4:	11 24       	eor	r1, r1
    34a6:	aa 27       	eor	r26, r26
    34a8:	97 fd       	sbrc	r25, 7
    34aa:	a0 95       	com	r26
    34ac:	ba 2f       	mov	r27, r26
    34ae:	2f ef       	ldi	r18, 0xFF	; 255
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	40 e0       	ldi	r20, 0x00	; 0
    34b4:	50 e0       	ldi	r21, 0x00	; 0
    34b6:	bc 01       	movw	r22, r24
    34b8:	cd 01       	movw	r24, r26
    34ba:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <__udivmodsi4>
    34be:	da 01       	movw	r26, r20
    34c0:	c9 01       	movw	r24, r18
    34c2:	98 2f       	mov	r25, r24
    34c4:	84 e6       	ldi	r24, 0x64	; 100
    34c6:	89 1b       	sub	r24, r25
    34c8:	80 93 bb 00 	sts	0x00BB, r24
			/* display it in its place in LCD */
			LCD_moveCursor(1, 7);
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	67 e0       	ldi	r22, 0x07	; 7
    34d0:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <LCD_moveCursor>
			LCD_intgerToString(percentageOfRead);
    34d4:	80 91 bb 00 	lds	r24, 0x00BB
    34d8:	88 2f       	mov	r24, r24
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <LCD_intgerToString>
			LCD_displayCharacter('%');
    34e0:	85 e2       	ldi	r24, 0x25	; 37
    34e2:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_displayCharacter>
			/*
			 * check the state of reading, if less than or equal 50 then activate the water pump
			 * else turn off the water pump
			 */
			if (percentageOfRead <= 50)
    34e6:	80 91 bb 00 	lds	r24, 0x00BB
    34ea:	83 33       	cpi	r24, 0x33	; 51
    34ec:	70 f4       	brcc	.+28     	; 0x350a <main+0x166>
			{
				LCD_displayStringRowColumn(0, 12, "ON");
    34ee:	25 e7       	ldi	r18, 0x75	; 117
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	80 e0       	ldi	r24, 0x00	; 0
    34f4:	6c e0       	ldi	r22, 0x0C	; 12
    34f6:	a9 01       	movw	r20, r18
    34f8:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_displayStringRowColumn>
				/*
				 * this to only this the character after ON is space
				 * when switch from OFF to ON we need to remove the last F latter
				 */
				LCD_displayCharacter(' ');
    34fc:	80 e2       	ldi	r24, 0x20	; 32
    34fe:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_displayCharacter>
				WaterPumb_States(on);
    3502:	81 e0       	ldi	r24, 0x01	; 1
    3504:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <WaterPumb_States>
    3508:	0a c0       	rjmp	.+20     	; 0x351e <main+0x17a>
			}
			else
			{
				LCD_displayStringRowColumn(0, 12, "OFF");
    350a:	28 e7       	ldi	r18, 0x78	; 120
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	80 e0       	ldi	r24, 0x00	; 0
    3510:	6c e0       	ldi	r22, 0x0C	; 12
    3512:	a9 01       	movw	r20, r18
    3514:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_displayStringRowColumn>
				WaterPumb_States(off);
    3518:	80 e0       	ldi	r24, 0x00	; 0
    351a:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <WaterPumb_States>
			}
			/* this condition only for LCD display the specific digits from the data  */
			if (percentageOfRead < 100)
    351e:	80 91 bb 00 	lds	r24, 0x00BB
    3522:	84 36       	cpi	r24, 0x64	; 100
    3524:	38 f4       	brcc	.+14     	; 0x3534 <main+0x190>
			{
				LCD_moveCursor(1, 10);
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	6a e0       	ldi	r22, 0x0A	; 10
    352a:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <LCD_moveCursor>
				LCD_displayCharacter(' ');
    352e:	80 e2       	ldi	r24, 0x20	; 32
    3530:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_displayCharacter>
			}
			if (percentageOfRead < 10)
    3534:	80 91 bb 00 	lds	r24, 0x00BB
    3538:	8a 30       	cpi	r24, 0x0A	; 10
    353a:	38 f4       	brcc	.+14     	; 0x354a <main+0x1a6>
			{
				LCD_moveCursor(1, 9);
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	69 e0       	ldi	r22, 0x09	; 9
    3540:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <LCD_moveCursor>
				LCD_displayCharacter(' ');
    3544:	80 e2       	ldi	r24, 0x20	; 32
    3546:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_displayCharacter>
	SREG_REG.Bits.I_Bit = 1;

	for (;;)
	{
		/* if the selected mode is the first mode */
		while (g_Mode == 0)
    354a:	80 91 ae 00 	lds	r24, 0x00AE
    354e:	88 23       	and	r24, r24
    3550:	09 f4       	brne	.+2      	; 0x3554 <main+0x1b0>
    3552:	89 cf       	rjmp	.-238    	; 0x3466 <main+0xc2>
    3554:	50 c1       	rjmp	.+672    	; 0x37f6 <main+0x452>
		}
		/* if the selected mode is the second mode */
		while (g_Mode == 1)
		{
			/* turn off the pump */
			WaterPumb_States(off);
    3556:	80 e0       	ldi	r24, 0x00	; 0
    3558:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <WaterPumb_States>
			LCD_clearScreen();
    355c:	0e 94 15 18 	call	0x302a	; 0x302a <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "Enter Period");
    3560:	2c e7       	ldi	r18, 0x7C	; 124
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	80 e0       	ldi	r24, 0x00	; 0
    3566:	60 e0       	ldi	r22, 0x00	; 0
    3568:	a9 01       	movw	r20, r18
    356a:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 0);
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	60 e0       	ldi	r22, 0x00	; 0
    3572:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <LCD_moveCursor>
			/* wait for the user to enter the period */
			getPeriodFromKeypad(entredPeriod);
    3576:	ce 01       	movw	r24, r28
    3578:	4d 96       	adiw	r24, 0x1d	; 29
    357a:	0e 94 b3 1c 	call	0x3966	; 0x3966 <getPeriodFromKeypad>
    357e:	80 e0       	ldi	r24, 0x00	; 0
    3580:	90 e8       	ldi	r25, 0x80	; 128
    3582:	ab eb       	ldi	r26, 0xBB	; 187
    3584:	b4 e4       	ldi	r27, 0x44	; 68
    3586:	89 8f       	std	Y+25, r24	; 0x19
    3588:	9a 8f       	std	Y+26, r25	; 0x1a
    358a:	ab 8f       	std	Y+27, r26	; 0x1b
    358c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    358e:	69 8d       	ldd	r22, Y+25	; 0x19
    3590:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3592:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3594:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3596:	20 e0       	ldi	r18, 0x00	; 0
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	4a e7       	ldi	r20, 0x7A	; 122
    359c:	55 e4       	ldi	r21, 0x45	; 69
    359e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    35a2:	dc 01       	movw	r26, r24
    35a4:	cb 01       	movw	r24, r22
    35a6:	8d 8b       	std	Y+21, r24	; 0x15
    35a8:	9e 8b       	std	Y+22, r25	; 0x16
    35aa:	af 8b       	std	Y+23, r26	; 0x17
    35ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    35ae:	6d 89       	ldd	r22, Y+21	; 0x15
    35b0:	7e 89       	ldd	r23, Y+22	; 0x16
    35b2:	8f 89       	ldd	r24, Y+23	; 0x17
    35b4:	98 8d       	ldd	r25, Y+24	; 0x18
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	40 e8       	ldi	r20, 0x80	; 128
    35bc:	5f e3       	ldi	r21, 0x3F	; 63
    35be:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    35c2:	88 23       	and	r24, r24
    35c4:	2c f4       	brge	.+10     	; 0x35d0 <main+0x22c>
		__ticks = 1;
    35c6:	81 e0       	ldi	r24, 0x01	; 1
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	9c 8b       	std	Y+20, r25	; 0x14
    35cc:	8b 8b       	std	Y+19, r24	; 0x13
    35ce:	3f c0       	rjmp	.+126    	; 0x364e <main+0x2aa>
	else if (__tmp > 65535)
    35d0:	6d 89       	ldd	r22, Y+21	; 0x15
    35d2:	7e 89       	ldd	r23, Y+22	; 0x16
    35d4:	8f 89       	ldd	r24, Y+23	; 0x17
    35d6:	98 8d       	ldd	r25, Y+24	; 0x18
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	3f ef       	ldi	r19, 0xFF	; 255
    35dc:	4f e7       	ldi	r20, 0x7F	; 127
    35de:	57 e4       	ldi	r21, 0x47	; 71
    35e0:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    35e4:	18 16       	cp	r1, r24
    35e6:	4c f5       	brge	.+82     	; 0x363a <main+0x296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35e8:	69 8d       	ldd	r22, Y+25	; 0x19
    35ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35f0:	20 e0       	ldi	r18, 0x00	; 0
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	40 e2       	ldi	r20, 0x20	; 32
    35f6:	51 e4       	ldi	r21, 0x41	; 65
    35f8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    35fc:	dc 01       	movw	r26, r24
    35fe:	cb 01       	movw	r24, r22
    3600:	bc 01       	movw	r22, r24
    3602:	cd 01       	movw	r24, r26
    3604:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	9c 8b       	std	Y+20, r25	; 0x14
    360e:	8b 8b       	std	Y+19, r24	; 0x13
    3610:	0f c0       	rjmp	.+30     	; 0x3630 <main+0x28c>
    3612:	80 e9       	ldi	r24, 0x90	; 144
    3614:	91 e0       	ldi	r25, 0x01	; 1
    3616:	9a 8b       	std	Y+18, r25	; 0x12
    3618:	89 8b       	std	Y+17, r24	; 0x11
    361a:	89 89       	ldd	r24, Y+17	; 0x11
    361c:	9a 89       	ldd	r25, Y+18	; 0x12
    361e:	01 97       	sbiw	r24, 0x01	; 1
    3620:	f1 f7       	brne	.-4      	; 0x361e <main+0x27a>
    3622:	9a 8b       	std	Y+18, r25	; 0x12
    3624:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3626:	8b 89       	ldd	r24, Y+19	; 0x13
    3628:	9c 89       	ldd	r25, Y+20	; 0x14
    362a:	01 97       	sbiw	r24, 0x01	; 1
    362c:	9c 8b       	std	Y+20, r25	; 0x14
    362e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3630:	8b 89       	ldd	r24, Y+19	; 0x13
    3632:	9c 89       	ldd	r25, Y+20	; 0x14
    3634:	00 97       	sbiw	r24, 0x00	; 0
    3636:	69 f7       	brne	.-38     	; 0x3612 <main+0x26e>
    3638:	14 c0       	rjmp	.+40     	; 0x3662 <main+0x2be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    363a:	6d 89       	ldd	r22, Y+21	; 0x15
    363c:	7e 89       	ldd	r23, Y+22	; 0x16
    363e:	8f 89       	ldd	r24, Y+23	; 0x17
    3640:	98 8d       	ldd	r25, Y+24	; 0x18
    3642:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3646:	dc 01       	movw	r26, r24
    3648:	cb 01       	movw	r24, r22
    364a:	9c 8b       	std	Y+20, r25	; 0x14
    364c:	8b 8b       	std	Y+19, r24	; 0x13
    364e:	8b 89       	ldd	r24, Y+19	; 0x13
    3650:	9c 89       	ldd	r25, Y+20	; 0x14
    3652:	98 8b       	std	Y+16, r25	; 0x10
    3654:	8f 87       	std	Y+15, r24	; 0x0f
    3656:	8f 85       	ldd	r24, Y+15	; 0x0f
    3658:	98 89       	ldd	r25, Y+16	; 0x10
    365a:	01 97       	sbiw	r24, 0x01	; 1
    365c:	f1 f7       	brne	.-4      	; 0x365a <main+0x2b6>
    365e:	98 8b       	std	Y+16, r25	; 0x10
    3660:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1500);
			LCD_clearScreen();
    3662:	0e 94 15 18 	call	0x302a	; 0x302a <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 6, "DONE");
    3666:	29 e8       	ldi	r18, 0x89	; 137
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	66 e0       	ldi	r22, 0x06	; 6
    366e:	a9 01       	movw	r20, r18
    3670:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_displayStringRowColumn>
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	90 e8       	ldi	r25, 0x80	; 128
    3678:	ab eb       	ldi	r26, 0xBB	; 187
    367a:	b4 e4       	ldi	r27, 0x44	; 68
    367c:	8b 87       	std	Y+11, r24	; 0x0b
    367e:	9c 87       	std	Y+12, r25	; 0x0c
    3680:	ad 87       	std	Y+13, r26	; 0x0d
    3682:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3684:	6b 85       	ldd	r22, Y+11	; 0x0b
    3686:	7c 85       	ldd	r23, Y+12	; 0x0c
    3688:	8d 85       	ldd	r24, Y+13	; 0x0d
    368a:	9e 85       	ldd	r25, Y+14	; 0x0e
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	4a e7       	ldi	r20, 0x7A	; 122
    3692:	55 e4       	ldi	r21, 0x45	; 69
    3694:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3698:	dc 01       	movw	r26, r24
    369a:	cb 01       	movw	r24, r22
    369c:	8f 83       	std	Y+7, r24	; 0x07
    369e:	98 87       	std	Y+8, r25	; 0x08
    36a0:	a9 87       	std	Y+9, r26	; 0x09
    36a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36a4:	6f 81       	ldd	r22, Y+7	; 0x07
    36a6:	78 85       	ldd	r23, Y+8	; 0x08
    36a8:	89 85       	ldd	r24, Y+9	; 0x09
    36aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	40 e8       	ldi	r20, 0x80	; 128
    36b2:	5f e3       	ldi	r21, 0x3F	; 63
    36b4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    36b8:	88 23       	and	r24, r24
    36ba:	2c f4       	brge	.+10     	; 0x36c6 <main+0x322>
		__ticks = 1;
    36bc:	81 e0       	ldi	r24, 0x01	; 1
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	9e 83       	std	Y+6, r25	; 0x06
    36c2:	8d 83       	std	Y+5, r24	; 0x05
    36c4:	3f c0       	rjmp	.+126    	; 0x3744 <main+0x3a0>
	else if (__tmp > 65535)
    36c6:	6f 81       	ldd	r22, Y+7	; 0x07
    36c8:	78 85       	ldd	r23, Y+8	; 0x08
    36ca:	89 85       	ldd	r24, Y+9	; 0x09
    36cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ce:	20 e0       	ldi	r18, 0x00	; 0
    36d0:	3f ef       	ldi	r19, 0xFF	; 255
    36d2:	4f e7       	ldi	r20, 0x7F	; 127
    36d4:	57 e4       	ldi	r21, 0x47	; 71
    36d6:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    36da:	18 16       	cp	r1, r24
    36dc:	4c f5       	brge	.+82     	; 0x3730 <main+0x38c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36de:	6b 85       	ldd	r22, Y+11	; 0x0b
    36e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    36e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    36e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    36e6:	20 e0       	ldi	r18, 0x00	; 0
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	40 e2       	ldi	r20, 0x20	; 32
    36ec:	51 e4       	ldi	r21, 0x41	; 65
    36ee:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    36f2:	dc 01       	movw	r26, r24
    36f4:	cb 01       	movw	r24, r22
    36f6:	bc 01       	movw	r22, r24
    36f8:	cd 01       	movw	r24, r26
    36fa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    36fe:	dc 01       	movw	r26, r24
    3700:	cb 01       	movw	r24, r22
    3702:	9e 83       	std	Y+6, r25	; 0x06
    3704:	8d 83       	std	Y+5, r24	; 0x05
    3706:	0f c0       	rjmp	.+30     	; 0x3726 <main+0x382>
    3708:	80 e9       	ldi	r24, 0x90	; 144
    370a:	91 e0       	ldi	r25, 0x01	; 1
    370c:	9c 83       	std	Y+4, r25	; 0x04
    370e:	8b 83       	std	Y+3, r24	; 0x03
    3710:	8b 81       	ldd	r24, Y+3	; 0x03
    3712:	9c 81       	ldd	r25, Y+4	; 0x04
    3714:	01 97       	sbiw	r24, 0x01	; 1
    3716:	f1 f7       	brne	.-4      	; 0x3714 <main+0x370>
    3718:	9c 83       	std	Y+4, r25	; 0x04
    371a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    371c:	8d 81       	ldd	r24, Y+5	; 0x05
    371e:	9e 81       	ldd	r25, Y+6	; 0x06
    3720:	01 97       	sbiw	r24, 0x01	; 1
    3722:	9e 83       	std	Y+6, r25	; 0x06
    3724:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3726:	8d 81       	ldd	r24, Y+5	; 0x05
    3728:	9e 81       	ldd	r25, Y+6	; 0x06
    372a:	00 97       	sbiw	r24, 0x00	; 0
    372c:	69 f7       	brne	.-38     	; 0x3708 <main+0x364>
    372e:	14 c0       	rjmp	.+40     	; 0x3758 <main+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3730:	6f 81       	ldd	r22, Y+7	; 0x07
    3732:	78 85       	ldd	r23, Y+8	; 0x08
    3734:	89 85       	ldd	r24, Y+9	; 0x09
    3736:	9a 85       	ldd	r25, Y+10	; 0x0a
    3738:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    373c:	dc 01       	movw	r26, r24
    373e:	cb 01       	movw	r24, r22
    3740:	9e 83       	std	Y+6, r25	; 0x06
    3742:	8d 83       	std	Y+5, r24	; 0x05
    3744:	8d 81       	ldd	r24, Y+5	; 0x05
    3746:	9e 81       	ldd	r25, Y+6	; 0x06
    3748:	9a 83       	std	Y+2, r25	; 0x02
    374a:	89 83       	std	Y+1, r24	; 0x01
    374c:	89 81       	ldd	r24, Y+1	; 0x01
    374e:	9a 81       	ldd	r25, Y+2	; 0x02
    3750:	01 97       	sbiw	r24, 0x01	; 1
    3752:	f1 f7       	brne	.-4      	; 0x3750 <main+0x3ac>
    3754:	9a 83       	std	Y+2, r25	; 0x02
    3756:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1500);
			LCD_clearScreen();
    3758:	0e 94 15 18 	call	0x302a	; 0x302a <LCD_clearScreen>
			/* transform delay_period from minutes to seconds */
			delay_period = (entredPeriod[1] + (entredPeriod[0] * 10));
    375c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    375e:	48 2f       	mov	r20, r24
    3760:	50 e0       	ldi	r21, 0x00	; 0
    3762:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3764:	88 2f       	mov	r24, r24
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	9c 01       	movw	r18, r24
    376a:	22 0f       	add	r18, r18
    376c:	33 1f       	adc	r19, r19
    376e:	c9 01       	movw	r24, r18
    3770:	88 0f       	add	r24, r24
    3772:	99 1f       	adc	r25, r25
    3774:	88 0f       	add	r24, r24
    3776:	99 1f       	adc	r25, r25
    3778:	82 0f       	add	r24, r18
    377a:	93 1f       	adc	r25, r19
    377c:	84 0f       	add	r24, r20
    377e:	95 1f       	adc	r25, r21
    3780:	aa 27       	eor	r26, r26
    3782:	97 fd       	sbrc	r25, 7
    3784:	a0 95       	com	r26
    3786:	ba 2f       	mov	r27, r26
    3788:	80 93 b7 00 	sts	0x00B7, r24
    378c:	90 93 b8 00 	sts	0x00B8, r25
    3790:	a0 93 b9 00 	sts	0x00B9, r26
    3794:	b0 93 ba 00 	sts	0x00BA, r27
			delay_period *= 60;
    3798:	80 91 b7 00 	lds	r24, 0x00B7
    379c:	90 91 b8 00 	lds	r25, 0x00B8
    37a0:	a0 91 b9 00 	lds	r26, 0x00B9
    37a4:	b0 91 ba 00 	lds	r27, 0x00BA
    37a8:	2c e3       	ldi	r18, 0x3C	; 60
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	40 e0       	ldi	r20, 0x00	; 0
    37ae:	50 e0       	ldi	r21, 0x00	; 0
    37b0:	bc 01       	movw	r22, r24
    37b2:	cd 01       	movw	r24, r26
    37b4:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <__mulsi3>
    37b8:	dc 01       	movw	r26, r24
    37ba:	cb 01       	movw	r24, r22
    37bc:	80 93 b7 00 	sts	0x00B7, r24
    37c0:	90 93 b8 00 	sts	0x00B8, r25
    37c4:	a0 93 b9 00 	sts	0x00B9, r26
    37c8:	b0 93 ba 00 	sts	0x00BA, r27
			/* make a copy to repeat the operation each delay_period */
			delay_period_copy = delay_period;
    37cc:	80 91 b7 00 	lds	r24, 0x00B7
    37d0:	90 91 b8 00 	lds	r25, 0x00B8
    37d4:	a0 91 b9 00 	lds	r26, 0x00B9
    37d8:	b0 91 ba 00 	lds	r27, 0x00BA
    37dc:	80 93 b3 00 	sts	0x00B3, r24
    37e0:	90 93 b4 00 	sts	0x00B4, r25
    37e4:	a0 93 b5 00 	sts	0x00B5, r26
    37e8:	b0 93 b6 00 	sts	0x00B6, r27
			/* continue this mode, its mean we will start count the delay period after the user enter it */
			g_Mode++;
    37ec:	80 91 ae 00 	lds	r24, 0x00AE
    37f0:	8f 5f       	subi	r24, 0xFF	; 255
    37f2:	80 93 ae 00 	sts	0x00AE, r24
				LCD_moveCursor(1, 9);
				LCD_displayCharacter(' ');
			}
		}
		/* if the selected mode is the second mode */
		while (g_Mode == 1)
    37f6:	80 91 ae 00 	lds	r24, 0x00AE
    37fa:	81 30       	cpi	r24, 0x01	; 1
    37fc:	09 f4       	brne	.+2      	; 0x3800 <main+0x45c>
    37fe:	ab ce       	rjmp	.-682    	; 0x3556 <main+0x1b2>
    3800:	ac c0       	rjmp	.+344    	; 0x395a <main+0x5b6>
			/* continue this mode, its mean we will start count the delay period after the user enter it */
			g_Mode++;
		}
		while (g_Mode == 2)
		{
			LCD_displayStringRowColumn(0, 0, "Timer : ");
    3802:	2e e8       	ldi	r18, 0x8E	; 142
    3804:	30 e0       	ldi	r19, 0x00	; 0
    3806:	80 e0       	ldi	r24, 0x00	; 0
    3808:	60 e0       	ldi	r22, 0x00	; 0
    380a:	a9 01       	movw	r20, r18
    380c:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <LCD_displayStringRowColumn>
			LCD_intgerToString(delay_period_copy);
    3810:	80 91 b3 00 	lds	r24, 0x00B3
    3814:	90 91 b4 00 	lds	r25, 0x00B4
    3818:	a0 91 b5 00 	lds	r26, 0x00B5
    381c:	b0 91 b6 00 	lds	r27, 0x00B6
    3820:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <LCD_intgerToString>
			/* this condition only for LCD display the specific digits from the data  */
			if (delay_period_copy < 1000)
    3824:	80 91 b3 00 	lds	r24, 0x00B3
    3828:	90 91 b4 00 	lds	r25, 0x00B4
    382c:	a0 91 b5 00 	lds	r26, 0x00B5
    3830:	b0 91 b6 00 	lds	r27, 0x00B6
    3834:	88 3e       	cpi	r24, 0xE8	; 232
    3836:	f3 e0       	ldi	r31, 0x03	; 3
    3838:	9f 07       	cpc	r25, r31
    383a:	f0 e0       	ldi	r31, 0x00	; 0
    383c:	af 07       	cpc	r26, r31
    383e:	f0 e0       	ldi	r31, 0x00	; 0
    3840:	bf 07       	cpc	r27, r31
    3842:	38 f4       	brcc	.+14     	; 0x3852 <main+0x4ae>
			{
				LCD_moveCursor(0, 11);
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	6b e0       	ldi	r22, 0x0B	; 11
    3848:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <LCD_moveCursor>
				LCD_displayCharacter(' ');
    384c:	80 e2       	ldi	r24, 0x20	; 32
    384e:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_displayCharacter>
			}
			if (delay_period_copy < 100)
    3852:	80 91 b3 00 	lds	r24, 0x00B3
    3856:	90 91 b4 00 	lds	r25, 0x00B4
    385a:	a0 91 b5 00 	lds	r26, 0x00B5
    385e:	b0 91 b6 00 	lds	r27, 0x00B6
    3862:	84 36       	cpi	r24, 0x64	; 100
    3864:	91 05       	cpc	r25, r1
    3866:	a1 05       	cpc	r26, r1
    3868:	b1 05       	cpc	r27, r1
    386a:	38 f4       	brcc	.+14     	; 0x387a <main+0x4d6>
			{
				LCD_moveCursor(0, 10);
    386c:	80 e0       	ldi	r24, 0x00	; 0
    386e:	6a e0       	ldi	r22, 0x0A	; 10
    3870:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <LCD_moveCursor>
				LCD_displayCharacter(' ');
    3874:	80 e2       	ldi	r24, 0x20	; 32
    3876:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_displayCharacter>
			}
			if (delay_period_copy < 10)
    387a:	80 91 b3 00 	lds	r24, 0x00B3
    387e:	90 91 b4 00 	lds	r25, 0x00B4
    3882:	a0 91 b5 00 	lds	r26, 0x00B5
    3886:	b0 91 b6 00 	lds	r27, 0x00B6
    388a:	8a 30       	cpi	r24, 0x0A	; 10
    388c:	91 05       	cpc	r25, r1
    388e:	a1 05       	cpc	r26, r1
    3890:	b1 05       	cpc	r27, r1
    3892:	38 f4       	brcc	.+14     	; 0x38a2 <main+0x4fe>
			{
				LCD_moveCursor(0, 9);
    3894:	80 e0       	ldi	r24, 0x00	; 0
    3896:	69 e0       	ldi	r22, 0x09	; 9
    3898:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <LCD_moveCursor>
				LCD_displayCharacter(' ');
    389c:	80 e2       	ldi	r24, 0x20	; 32
    389e:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_displayCharacter>
			}
			/* check if the counter become 0 which mean the period is done */
			if (delay_period_copy == 0)
    38a2:	80 91 b3 00 	lds	r24, 0x00B3
    38a6:	90 91 b4 00 	lds	r25, 0x00B4
    38aa:	a0 91 b5 00 	lds	r26, 0x00B5
    38ae:	b0 91 b6 00 	lds	r27, 0x00B6
    38b2:	00 97       	sbiw	r24, 0x00	; 0
    38b4:	a1 05       	cpc	r26, r1
    38b6:	b1 05       	cpc	r27, r1
    38b8:	09 f0       	breq	.+2      	; 0x38bc <main+0x518>
    38ba:	4f c0       	rjmp	.+158    	; 0x395a <main+0x5b6>
			{
				/* check the state of ADC if the soil need water or not */
				adcValue = Soilsensor_getValue();
    38bc:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <Soilsensor_getValue>
    38c0:	80 93 b0 00 	sts	0x00B0, r24
				percentageOfRead = 100 - ((uint32) (adcValue * 100) / 255);
    38c4:	80 91 b0 00 	lds	r24, 0x00B0
    38c8:	28 2f       	mov	r18, r24
    38ca:	30 e0       	ldi	r19, 0x00	; 0
    38cc:	84 e6       	ldi	r24, 0x64	; 100
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	ac 01       	movw	r20, r24
    38d2:	24 9f       	mul	r18, r20
    38d4:	c0 01       	movw	r24, r0
    38d6:	25 9f       	mul	r18, r21
    38d8:	90 0d       	add	r25, r0
    38da:	34 9f       	mul	r19, r20
    38dc:	90 0d       	add	r25, r0
    38de:	11 24       	eor	r1, r1
    38e0:	aa 27       	eor	r26, r26
    38e2:	97 fd       	sbrc	r25, 7
    38e4:	a0 95       	com	r26
    38e6:	ba 2f       	mov	r27, r26
    38e8:	2f ef       	ldi	r18, 0xFF	; 255
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	40 e0       	ldi	r20, 0x00	; 0
    38ee:	50 e0       	ldi	r21, 0x00	; 0
    38f0:	bc 01       	movw	r22, r24
    38f2:	cd 01       	movw	r24, r26
    38f4:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <__udivmodsi4>
    38f8:	da 01       	movw	r26, r20
    38fa:	c9 01       	movw	r24, r18
    38fc:	98 2f       	mov	r25, r24
    38fe:	84 e6       	ldi	r24, 0x64	; 100
    3900:	89 1b       	sub	r24, r25
    3902:	80 93 bb 00 	sts	0x00BB, r24
				/* send the data to UART */
				UART_sendByte(percentageOfRead);
    3906:	80 91 bb 00 	lds	r24, 0x00BB
    390a:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <UART_sendByte>
				/* if the percentage less than 50, then the soil need water */
				if (percentageOfRead <= 50)
    390e:	80 91 bb 00 	lds	r24, 0x00BB
    3912:	83 33       	cpi	r24, 0x33	; 51
    3914:	90 f4       	brcc	.+36     	; 0x393a <main+0x596>
				{
					/* active the pump */
					WaterPumb_States(on);
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <WaterPumb_States>
					/* make the flag of count one minute is true */
					countSecondToActivePumpFlag = 1;
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	80 93 b2 00 	sts	0x00B2, r24
					/* wait for one minute */
					while (numberOfSecondToActivePump != 0)
    3922:	80 91 9f 00 	lds	r24, 0x009F
    3926:	88 23       	and	r24, r24
    3928:	e1 f7       	brne	.-8      	; 0x3922 <main+0x57e>
						;
					/* reset the counter ,flag and turn of the pump */
					numberOfSecondToActivePump = NUMBER_OF_SECONDS_FOR_PUMP;
    392a:	85 e0       	ldi	r24, 0x05	; 5
    392c:	80 93 9f 00 	sts	0x009F, r24
					countSecondToActivePumpFlag = 0;
    3930:	10 92 b2 00 	sts	0x00B2, r1
					WaterPumb_States(off);
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <WaterPumb_States>
				}
				/* repeat the operation each delay_period */
				delay_period_copy = delay_period;
    393a:	80 91 b7 00 	lds	r24, 0x00B7
    393e:	90 91 b8 00 	lds	r25, 0x00B8
    3942:	a0 91 b9 00 	lds	r26, 0x00B9
    3946:	b0 91 ba 00 	lds	r27, 0x00BA
    394a:	80 93 b3 00 	sts	0x00B3, r24
    394e:	90 93 b4 00 	sts	0x00B4, r25
    3952:	a0 93 b5 00 	sts	0x00B5, r26
    3956:	b0 93 b6 00 	sts	0x00B6, r27
			/* make a copy to repeat the operation each delay_period */
			delay_period_copy = delay_period;
			/* continue this mode, its mean we will start count the delay period after the user enter it */
			g_Mode++;
		}
		while (g_Mode == 2)
    395a:	80 91 ae 00 	lds	r24, 0x00AE
    395e:	82 30       	cpi	r24, 0x02	; 2
    3960:	09 f4       	brne	.+2      	; 0x3964 <main+0x5c0>
    3962:	4f cf       	rjmp	.-354    	; 0x3802 <main+0x45e>
    3964:	f2 cd       	rjmp	.-1052   	; 0x354a <main+0x1a6>

00003966 <getPeriodFromKeypad>:
 * Function to active keypad to get input number from it.
 * Function input:  array of uint8 to save numbers from keypad on it.
 * Function output: void.
 */
void getPeriodFromKeypad(uint8 period[])
{
    3966:	df 93       	push	r29
    3968:	cf 93       	push	r28
    396a:	cd b7       	in	r28, 0x3d	; 61
    396c:	de b7       	in	r29, 0x3e	; 62
    396e:	62 97       	sbiw	r28, 0x12	; 18
    3970:	0f b6       	in	r0, 0x3f	; 63
    3972:	f8 94       	cli
    3974:	de bf       	out	0x3e, r29	; 62
    3976:	0f be       	out	0x3f, r0	; 63
    3978:	cd bf       	out	0x3d, r28	; 61
    397a:	9a 8b       	std	Y+18, r25	; 0x12
    397c:	89 8b       	std	Y+17, r24	; 0x11
	uint8 i, temp; /* i for the period length counter, temp for the number from user */
	i = 0; /* start from index 0 in the array */
    397e:	18 8a       	std	Y+16, r1	; 0x10
    3980:	8d c0       	rjmp	.+282    	; 0x3a9c <getPeriodFromKeypad+0x136>
	while (i < PERIOD_LENGTH)
	{
		/* take the input number form keypad */
		temp = KEYPAD_getPressedKey();
    3982:	0e 94 1f 18 	call	0x303e	; 0x303e <KEYPAD_getPressedKey>
    3986:	8f 87       	std	Y+15, r24	; 0x0f
    3988:	80 e0       	ldi	r24, 0x00	; 0
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	aa e7       	ldi	r26, 0x7A	; 122
    398e:	b3 e4       	ldi	r27, 0x43	; 67
    3990:	8b 87       	std	Y+11, r24	; 0x0b
    3992:	9c 87       	std	Y+12, r25	; 0x0c
    3994:	ad 87       	std	Y+13, r26	; 0x0d
    3996:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3998:	6b 85       	ldd	r22, Y+11	; 0x0b
    399a:	7c 85       	ldd	r23, Y+12	; 0x0c
    399c:	8d 85       	ldd	r24, Y+13	; 0x0d
    399e:	9e 85       	ldd	r25, Y+14	; 0x0e
    39a0:	20 e0       	ldi	r18, 0x00	; 0
    39a2:	30 e0       	ldi	r19, 0x00	; 0
    39a4:	4a e7       	ldi	r20, 0x7A	; 122
    39a6:	55 e4       	ldi	r21, 0x45	; 69
    39a8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    39ac:	dc 01       	movw	r26, r24
    39ae:	cb 01       	movw	r24, r22
    39b0:	8f 83       	std	Y+7, r24	; 0x07
    39b2:	98 87       	std	Y+8, r25	; 0x08
    39b4:	a9 87       	std	Y+9, r26	; 0x09
    39b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39b8:	6f 81       	ldd	r22, Y+7	; 0x07
    39ba:	78 85       	ldd	r23, Y+8	; 0x08
    39bc:	89 85       	ldd	r24, Y+9	; 0x09
    39be:	9a 85       	ldd	r25, Y+10	; 0x0a
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	40 e8       	ldi	r20, 0x80	; 128
    39c6:	5f e3       	ldi	r21, 0x3F	; 63
    39c8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    39cc:	88 23       	and	r24, r24
    39ce:	2c f4       	brge	.+10     	; 0x39da <getPeriodFromKeypad+0x74>
		__ticks = 1;
    39d0:	81 e0       	ldi	r24, 0x01	; 1
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	9e 83       	std	Y+6, r25	; 0x06
    39d6:	8d 83       	std	Y+5, r24	; 0x05
    39d8:	3f c0       	rjmp	.+126    	; 0x3a58 <getPeriodFromKeypad+0xf2>
	else if (__tmp > 65535)
    39da:	6f 81       	ldd	r22, Y+7	; 0x07
    39dc:	78 85       	ldd	r23, Y+8	; 0x08
    39de:	89 85       	ldd	r24, Y+9	; 0x09
    39e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39e2:	20 e0       	ldi	r18, 0x00	; 0
    39e4:	3f ef       	ldi	r19, 0xFF	; 255
    39e6:	4f e7       	ldi	r20, 0x7F	; 127
    39e8:	57 e4       	ldi	r21, 0x47	; 71
    39ea:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    39ee:	18 16       	cp	r1, r24
    39f0:	4c f5       	brge	.+82     	; 0x3a44 <getPeriodFromKeypad+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    39f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    39f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    39f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    39fa:	20 e0       	ldi	r18, 0x00	; 0
    39fc:	30 e0       	ldi	r19, 0x00	; 0
    39fe:	40 e2       	ldi	r20, 0x20	; 32
    3a00:	51 e4       	ldi	r21, 0x41	; 65
    3a02:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3a06:	dc 01       	movw	r26, r24
    3a08:	cb 01       	movw	r24, r22
    3a0a:	bc 01       	movw	r22, r24
    3a0c:	cd 01       	movw	r24, r26
    3a0e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3a12:	dc 01       	movw	r26, r24
    3a14:	cb 01       	movw	r24, r22
    3a16:	9e 83       	std	Y+6, r25	; 0x06
    3a18:	8d 83       	std	Y+5, r24	; 0x05
    3a1a:	0f c0       	rjmp	.+30     	; 0x3a3a <getPeriodFromKeypad+0xd4>
    3a1c:	80 e9       	ldi	r24, 0x90	; 144
    3a1e:	91 e0       	ldi	r25, 0x01	; 1
    3a20:	9c 83       	std	Y+4, r25	; 0x04
    3a22:	8b 83       	std	Y+3, r24	; 0x03
    3a24:	8b 81       	ldd	r24, Y+3	; 0x03
    3a26:	9c 81       	ldd	r25, Y+4	; 0x04
    3a28:	01 97       	sbiw	r24, 0x01	; 1
    3a2a:	f1 f7       	brne	.-4      	; 0x3a28 <getPeriodFromKeypad+0xc2>
    3a2c:	9c 83       	std	Y+4, r25	; 0x04
    3a2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a30:	8d 81       	ldd	r24, Y+5	; 0x05
    3a32:	9e 81       	ldd	r25, Y+6	; 0x06
    3a34:	01 97       	sbiw	r24, 0x01	; 1
    3a36:	9e 83       	std	Y+6, r25	; 0x06
    3a38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a3e:	00 97       	sbiw	r24, 0x00	; 0
    3a40:	69 f7       	brne	.-38     	; 0x3a1c <getPeriodFromKeypad+0xb6>
    3a42:	14 c0       	rjmp	.+40     	; 0x3a6c <getPeriodFromKeypad+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a44:	6f 81       	ldd	r22, Y+7	; 0x07
    3a46:	78 85       	ldd	r23, Y+8	; 0x08
    3a48:	89 85       	ldd	r24, Y+9	; 0x09
    3a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a4c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3a50:	dc 01       	movw	r26, r24
    3a52:	cb 01       	movw	r24, r22
    3a54:	9e 83       	std	Y+6, r25	; 0x06
    3a56:	8d 83       	std	Y+5, r24	; 0x05
    3a58:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a5c:	9a 83       	std	Y+2, r25	; 0x02
    3a5e:	89 83       	std	Y+1, r24	; 0x01
    3a60:	89 81       	ldd	r24, Y+1	; 0x01
    3a62:	9a 81       	ldd	r25, Y+2	; 0x02
    3a64:	01 97       	sbiw	r24, 0x01	; 1
    3a66:	f1 f7       	brne	.-4      	; 0x3a64 <getPeriodFromKeypad+0xfe>
    3a68:	9a 83       	std	Y+2, r25	; 0x02
    3a6a:	89 83       	std	Y+1, r24	; 0x01
		/* delay between each press and the next */
		_delay_ms(250);
		/* if the input is not a number form 0 to 9 then repeat taking input step */
		/* ^ for the keys don't have a number or # */
		if (temp == '^' || temp == '#')
    3a6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a6e:	8e 35       	cpi	r24, 0x5E	; 94
    3a70:	a9 f0       	breq	.+42     	; 0x3a9c <getPeriodFromKeypad+0x136>
    3a72:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a74:	83 32       	cpi	r24, 0x23	; 35
    3a76:	91 f0       	breq	.+36     	; 0x3a9c <getPeriodFromKeypad+0x136>
		{
			continue;
		}
		/* the input is a number, then save it to its index in array */
		period[i] = temp;
    3a78:	88 89       	ldd	r24, Y+16	; 0x10
    3a7a:	28 2f       	mov	r18, r24
    3a7c:	30 e0       	ldi	r19, 0x00	; 0
    3a7e:	89 89       	ldd	r24, Y+17	; 0x11
    3a80:	9a 89       	ldd	r25, Y+18	; 0x12
    3a82:	fc 01       	movw	r30, r24
    3a84:	e2 0f       	add	r30, r18
    3a86:	f3 1f       	adc	r31, r19
    3a88:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a8a:	80 83       	st	Z, r24
		/* display the the number in LCD */
		LCD_intgerToString(temp);
    3a8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a8e:	88 2f       	mov	r24, r24
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <LCD_intgerToString>
		/* increment the index */
		i++;
    3a96:	88 89       	ldd	r24, Y+16	; 0x10
    3a98:	8f 5f       	subi	r24, 0xFF	; 255
    3a9a:	88 8b       	std	Y+16, r24	; 0x10
 */
void getPeriodFromKeypad(uint8 period[])
{
	uint8 i, temp; /* i for the period length counter, temp for the number from user */
	i = 0; /* start from index 0 in the array */
	while (i < PERIOD_LENGTH)
    3a9c:	88 89       	ldd	r24, Y+16	; 0x10
    3a9e:	82 30       	cpi	r24, 0x02	; 2
    3aa0:	08 f4       	brcc	.+2      	; 0x3aa4 <getPeriodFromKeypad+0x13e>
    3aa2:	6f cf       	rjmp	.-290    	; 0x3982 <getPeriodFromKeypad+0x1c>
		LCD_intgerToString(temp);
		/* increment the index */
		i++;
	}
	/* waiting for pressing enter key */
	while (KEYPAD_getPressedKey() != '#')
    3aa4:	0e 94 1f 18 	call	0x303e	; 0x303e <KEYPAD_getPressedKey>
    3aa8:	83 32       	cpi	r24, 0x23	; 35
    3aaa:	e1 f7       	brne	.-8      	; 0x3aa4 <getPeriodFromKeypad+0x13e>
		;
}
    3aac:	62 96       	adiw	r28, 0x12	; 18
    3aae:	0f b6       	in	r0, 0x3f	; 63
    3ab0:	f8 94       	cli
    3ab2:	de bf       	out	0x3e, r29	; 62
    3ab4:	0f be       	out	0x3f, r0	; 63
    3ab6:	cd bf       	out	0x3d, r28	; 61
    3ab8:	cf 91       	pop	r28
    3aba:	df 91       	pop	r29
    3abc:	08 95       	ret

00003abe <INT0_Func>:
 * This is the call back function which will be executed each interrupt in INT0.
 * Function input:  void.
 * Function output: void.
 */
void INT0_Func(void)
{
    3abe:	df 93       	push	r29
    3ac0:	cf 93       	push	r28
    3ac2:	cd b7       	in	r28, 0x3d	; 61
    3ac4:	de b7       	in	r29, 0x3e	; 62
	/* switch the mode for the first mode */
	g_Mode = 0;
    3ac6:	10 92 ae 00 	sts	0x00AE, r1
}
    3aca:	cf 91       	pop	r28
    3acc:	df 91       	pop	r29
    3ace:	08 95       	ret

00003ad0 <INT1_Func>:
 * This is the call back function which will be executed each interrupt in INT1.
 * Function input:  void.
 * Function output: void.
 */
void INT1_Func(void)
{
    3ad0:	df 93       	push	r29
    3ad2:	cf 93       	push	r28
    3ad4:	cd b7       	in	r28, 0x3d	; 61
    3ad6:	de b7       	in	r29, 0x3e	; 62
	/* switch the mode for the second mode */
	g_Mode = 1;
    3ad8:	81 e0       	ldi	r24, 0x01	; 1
    3ada:	80 93 ae 00 	sts	0x00AE, r24
}
    3ade:	cf 91       	pop	r28
    3ae0:	df 91       	pop	r29
    3ae2:	08 95       	ret

00003ae4 <TIMER0_Func>:
 * This is the call back function which will be executed each interrupt in TIMER0.
 * Function input:  void.
 * Function output: void.
 */
void TIMER0_Func(void)
{
    3ae4:	df 93       	push	r29
    3ae6:	cf 93       	push	r28
    3ae8:	cd b7       	in	r28, 0x3d	; 61
    3aea:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    3aec:	80 91 b1 00 	lds	r24, 0x00B1
    3af0:	8f 5f       	subi	r24, 0xFF	; 255
    3af2:	80 93 b1 00 	sts	0x00B1, r24
	/* we need a specific number of ticks for one second delay */
	if (g_ticks == NUMBER_OF_COMPARE_MTACHES_PER_SECOND)
    3af6:	80 91 b1 00 	lds	r24, 0x00B1
    3afa:	8f 33       	cpi	r24, 0x3F	; 63
    3afc:	c9 f5       	brne	.+114    	; 0x3b70 <TIMER0_Func+0x8c>
	{
		/* if we in the second mode and not in the water pump activation mode */
		if (g_Mode == 2 && !countSecondToActivePumpFlag)
    3afe:	80 91 ae 00 	lds	r24, 0x00AE
    3b02:	82 30       	cpi	r24, 0x02	; 2
    3b04:	b9 f4       	brne	.+46     	; 0x3b34 <TIMER0_Func+0x50>
    3b06:	80 91 b2 00 	lds	r24, 0x00B2
    3b0a:	88 23       	and	r24, r24
    3b0c:	99 f4       	brne	.+38     	; 0x3b34 <TIMER0_Func+0x50>
		{
			/* then decrement the delay period by 1 */
			delay_period_copy--;
    3b0e:	80 91 b3 00 	lds	r24, 0x00B3
    3b12:	90 91 b4 00 	lds	r25, 0x00B4
    3b16:	a0 91 b5 00 	lds	r26, 0x00B5
    3b1a:	b0 91 b6 00 	lds	r27, 0x00B6
    3b1e:	01 97       	sbiw	r24, 0x01	; 1
    3b20:	a1 09       	sbc	r26, r1
    3b22:	b1 09       	sbc	r27, r1
    3b24:	80 93 b3 00 	sts	0x00B3, r24
    3b28:	90 93 b4 00 	sts	0x00B4, r25
    3b2c:	a0 93 b5 00 	sts	0x00B5, r26
    3b30:	b0 93 b6 00 	sts	0x00B6, r27
		}
		/* if we in the first mode, we just need to send a data to UART every five second */
		if (g_Mode == 0)
    3b34:	80 91 ae 00 	lds	r24, 0x00AE
    3b38:	88 23       	and	r24, r24
    3b3a:	79 f4       	brne	.+30     	; 0x3b5a <TIMER0_Func+0x76>
		{
			secondCounter++;
    3b3c:	80 91 af 00 	lds	r24, 0x00AF
    3b40:	8f 5f       	subi	r24, 0xFF	; 255
    3b42:	80 93 af 00 	sts	0x00AF, r24
			if (secondCounter == PERIOD_TO_SEND_DATA_THROUGH_UART)
    3b46:	80 91 af 00 	lds	r24, 0x00AF
    3b4a:	85 30       	cpi	r24, 0x05	; 5
    3b4c:	31 f4       	brne	.+12     	; 0x3b5a <TIMER0_Func+0x76>
			{
				/* send the data then reset the second counter */
				UART_sendByte(percentageOfRead);
    3b4e:	80 91 bb 00 	lds	r24, 0x00BB
    3b52:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <UART_sendByte>
				secondCounter = 0;
    3b56:	10 92 af 00 	sts	0x00AF, r1
			}
		}
		/* this is the water pump activation mode in mode 2 */
		if (countSecondToActivePumpFlag)
    3b5a:	80 91 b2 00 	lds	r24, 0x00B2
    3b5e:	88 23       	and	r24, r24
    3b60:	29 f0       	breq	.+10     	; 0x3b6c <TIMER0_Func+0x88>
		{
			numberOfSecondToActivePump--;
    3b62:	80 91 9f 00 	lds	r24, 0x009F
    3b66:	81 50       	subi	r24, 0x01	; 1
    3b68:	80 93 9f 00 	sts	0x009F, r24
		}
		/* reset the ticks each one second */
		g_ticks = 0;
    3b6c:	10 92 b1 00 	sts	0x00B1, r1
	}
}
    3b70:	cf 91       	pop	r28
    3b72:	df 91       	pop	r29
    3b74:	08 95       	ret

00003b76 <__mulsi3>:
    3b76:	62 9f       	mul	r22, r18
    3b78:	d0 01       	movw	r26, r0
    3b7a:	73 9f       	mul	r23, r19
    3b7c:	f0 01       	movw	r30, r0
    3b7e:	82 9f       	mul	r24, r18
    3b80:	e0 0d       	add	r30, r0
    3b82:	f1 1d       	adc	r31, r1
    3b84:	64 9f       	mul	r22, r20
    3b86:	e0 0d       	add	r30, r0
    3b88:	f1 1d       	adc	r31, r1
    3b8a:	92 9f       	mul	r25, r18
    3b8c:	f0 0d       	add	r31, r0
    3b8e:	83 9f       	mul	r24, r19
    3b90:	f0 0d       	add	r31, r0
    3b92:	74 9f       	mul	r23, r20
    3b94:	f0 0d       	add	r31, r0
    3b96:	65 9f       	mul	r22, r21
    3b98:	f0 0d       	add	r31, r0
    3b9a:	99 27       	eor	r25, r25
    3b9c:	72 9f       	mul	r23, r18
    3b9e:	b0 0d       	add	r27, r0
    3ba0:	e1 1d       	adc	r30, r1
    3ba2:	f9 1f       	adc	r31, r25
    3ba4:	63 9f       	mul	r22, r19
    3ba6:	b0 0d       	add	r27, r0
    3ba8:	e1 1d       	adc	r30, r1
    3baa:	f9 1f       	adc	r31, r25
    3bac:	bd 01       	movw	r22, r26
    3bae:	cf 01       	movw	r24, r30
    3bb0:	11 24       	eor	r1, r1
    3bb2:	08 95       	ret

00003bb4 <__udivmodhi4>:
    3bb4:	aa 1b       	sub	r26, r26
    3bb6:	bb 1b       	sub	r27, r27
    3bb8:	51 e1       	ldi	r21, 0x11	; 17
    3bba:	07 c0       	rjmp	.+14     	; 0x3bca <__udivmodhi4_ep>

00003bbc <__udivmodhi4_loop>:
    3bbc:	aa 1f       	adc	r26, r26
    3bbe:	bb 1f       	adc	r27, r27
    3bc0:	a6 17       	cp	r26, r22
    3bc2:	b7 07       	cpc	r27, r23
    3bc4:	10 f0       	brcs	.+4      	; 0x3bca <__udivmodhi4_ep>
    3bc6:	a6 1b       	sub	r26, r22
    3bc8:	b7 0b       	sbc	r27, r23

00003bca <__udivmodhi4_ep>:
    3bca:	88 1f       	adc	r24, r24
    3bcc:	99 1f       	adc	r25, r25
    3bce:	5a 95       	dec	r21
    3bd0:	a9 f7       	brne	.-22     	; 0x3bbc <__udivmodhi4_loop>
    3bd2:	80 95       	com	r24
    3bd4:	90 95       	com	r25
    3bd6:	bc 01       	movw	r22, r24
    3bd8:	cd 01       	movw	r24, r26
    3bda:	08 95       	ret

00003bdc <__udivmodsi4>:
    3bdc:	a1 e2       	ldi	r26, 0x21	; 33
    3bde:	1a 2e       	mov	r1, r26
    3be0:	aa 1b       	sub	r26, r26
    3be2:	bb 1b       	sub	r27, r27
    3be4:	fd 01       	movw	r30, r26
    3be6:	0d c0       	rjmp	.+26     	; 0x3c02 <__udivmodsi4_ep>

00003be8 <__udivmodsi4_loop>:
    3be8:	aa 1f       	adc	r26, r26
    3bea:	bb 1f       	adc	r27, r27
    3bec:	ee 1f       	adc	r30, r30
    3bee:	ff 1f       	adc	r31, r31
    3bf0:	a2 17       	cp	r26, r18
    3bf2:	b3 07       	cpc	r27, r19
    3bf4:	e4 07       	cpc	r30, r20
    3bf6:	f5 07       	cpc	r31, r21
    3bf8:	20 f0       	brcs	.+8      	; 0x3c02 <__udivmodsi4_ep>
    3bfa:	a2 1b       	sub	r26, r18
    3bfc:	b3 0b       	sbc	r27, r19
    3bfe:	e4 0b       	sbc	r30, r20
    3c00:	f5 0b       	sbc	r31, r21

00003c02 <__udivmodsi4_ep>:
    3c02:	66 1f       	adc	r22, r22
    3c04:	77 1f       	adc	r23, r23
    3c06:	88 1f       	adc	r24, r24
    3c08:	99 1f       	adc	r25, r25
    3c0a:	1a 94       	dec	r1
    3c0c:	69 f7       	brne	.-38     	; 0x3be8 <__udivmodsi4_loop>
    3c0e:	60 95       	com	r22
    3c10:	70 95       	com	r23
    3c12:	80 95       	com	r24
    3c14:	90 95       	com	r25
    3c16:	9b 01       	movw	r18, r22
    3c18:	ac 01       	movw	r20, r24
    3c1a:	bd 01       	movw	r22, r26
    3c1c:	cf 01       	movw	r24, r30
    3c1e:	08 95       	ret

00003c20 <__prologue_saves__>:
    3c20:	2f 92       	push	r2
    3c22:	3f 92       	push	r3
    3c24:	4f 92       	push	r4
    3c26:	5f 92       	push	r5
    3c28:	6f 92       	push	r6
    3c2a:	7f 92       	push	r7
    3c2c:	8f 92       	push	r8
    3c2e:	9f 92       	push	r9
    3c30:	af 92       	push	r10
    3c32:	bf 92       	push	r11
    3c34:	cf 92       	push	r12
    3c36:	df 92       	push	r13
    3c38:	ef 92       	push	r14
    3c3a:	ff 92       	push	r15
    3c3c:	0f 93       	push	r16
    3c3e:	1f 93       	push	r17
    3c40:	cf 93       	push	r28
    3c42:	df 93       	push	r29
    3c44:	cd b7       	in	r28, 0x3d	; 61
    3c46:	de b7       	in	r29, 0x3e	; 62
    3c48:	ca 1b       	sub	r28, r26
    3c4a:	db 0b       	sbc	r29, r27
    3c4c:	0f b6       	in	r0, 0x3f	; 63
    3c4e:	f8 94       	cli
    3c50:	de bf       	out	0x3e, r29	; 62
    3c52:	0f be       	out	0x3f, r0	; 63
    3c54:	cd bf       	out	0x3d, r28	; 61
    3c56:	09 94       	ijmp

00003c58 <__epilogue_restores__>:
    3c58:	2a 88       	ldd	r2, Y+18	; 0x12
    3c5a:	39 88       	ldd	r3, Y+17	; 0x11
    3c5c:	48 88       	ldd	r4, Y+16	; 0x10
    3c5e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c60:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c62:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c64:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c66:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c68:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c6a:	b9 84       	ldd	r11, Y+9	; 0x09
    3c6c:	c8 84       	ldd	r12, Y+8	; 0x08
    3c6e:	df 80       	ldd	r13, Y+7	; 0x07
    3c70:	ee 80       	ldd	r14, Y+6	; 0x06
    3c72:	fd 80       	ldd	r15, Y+5	; 0x05
    3c74:	0c 81       	ldd	r16, Y+4	; 0x04
    3c76:	1b 81       	ldd	r17, Y+3	; 0x03
    3c78:	aa 81       	ldd	r26, Y+2	; 0x02
    3c7a:	b9 81       	ldd	r27, Y+1	; 0x01
    3c7c:	ce 0f       	add	r28, r30
    3c7e:	d1 1d       	adc	r29, r1
    3c80:	0f b6       	in	r0, 0x3f	; 63
    3c82:	f8 94       	cli
    3c84:	de bf       	out	0x3e, r29	; 62
    3c86:	0f be       	out	0x3f, r0	; 63
    3c88:	cd bf       	out	0x3d, r28	; 61
    3c8a:	ed 01       	movw	r28, r26
    3c8c:	08 95       	ret

00003c8e <dtostrf>:
    3c8e:	ef 92       	push	r14
    3c90:	ff 92       	push	r15
    3c92:	0f 93       	push	r16
    3c94:	1f 93       	push	r17
    3c96:	f2 2f       	mov	r31, r18
    3c98:	f0 2e       	mov	r15, r16
    3c9a:	47 fd       	sbrc	r20, 7
    3c9c:	02 c0       	rjmp	.+4      	; 0x3ca2 <dtostrf+0x14>
    3c9e:	e4 e0       	ldi	r30, 0x04	; 4
    3ca0:	01 c0       	rjmp	.+2      	; 0x3ca4 <dtostrf+0x16>
    3ca2:	e4 e1       	ldi	r30, 0x14	; 20
    3ca4:	24 2f       	mov	r18, r20
    3ca6:	33 27       	eor	r19, r19
    3ca8:	27 fd       	sbrc	r18, 7
    3caa:	30 95       	com	r19
    3cac:	37 ff       	sbrs	r19, 7
    3cae:	03 c0       	rjmp	.+6      	; 0x3cb6 <dtostrf+0x28>
    3cb0:	30 95       	com	r19
    3cb2:	21 95       	neg	r18
    3cb4:	3f 4f       	sbci	r19, 0xFF	; 255
    3cb6:	4f 2d       	mov	r20, r15
    3cb8:	51 2f       	mov	r21, r17
    3cba:	0f 2f       	mov	r16, r31
    3cbc:	ee 2e       	mov	r14, r30
    3cbe:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <dtoa_prf>
    3cc2:	8f 2d       	mov	r24, r15
    3cc4:	91 2f       	mov	r25, r17
    3cc6:	1f 91       	pop	r17
    3cc8:	0f 91       	pop	r16
    3cca:	ff 90       	pop	r15
    3ccc:	ef 90       	pop	r14
    3cce:	08 95       	ret

00003cd0 <itoa>:
    3cd0:	fb 01       	movw	r30, r22
    3cd2:	9f 01       	movw	r18, r30
    3cd4:	e8 94       	clt
    3cd6:	42 30       	cpi	r20, 0x02	; 2
    3cd8:	c4 f0       	brlt	.+48     	; 0x3d0a <itoa+0x3a>
    3cda:	45 32       	cpi	r20, 0x25	; 37
    3cdc:	b4 f4       	brge	.+44     	; 0x3d0a <itoa+0x3a>
    3cde:	4a 30       	cpi	r20, 0x0A	; 10
    3ce0:	29 f4       	brne	.+10     	; 0x3cec <itoa+0x1c>
    3ce2:	97 fb       	bst	r25, 7
    3ce4:	1e f4       	brtc	.+6      	; 0x3cec <itoa+0x1c>
    3ce6:	90 95       	com	r25
    3ce8:	81 95       	neg	r24
    3cea:	9f 4f       	sbci	r25, 0xFF	; 255
    3cec:	64 2f       	mov	r22, r20
    3cee:	77 27       	eor	r23, r23
    3cf0:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <__udivmodhi4>
    3cf4:	80 5d       	subi	r24, 0xD0	; 208
    3cf6:	8a 33       	cpi	r24, 0x3A	; 58
    3cf8:	0c f0       	brlt	.+2      	; 0x3cfc <itoa+0x2c>
    3cfa:	89 5d       	subi	r24, 0xD9	; 217
    3cfc:	81 93       	st	Z+, r24
    3cfe:	cb 01       	movw	r24, r22
    3d00:	00 97       	sbiw	r24, 0x00	; 0
    3d02:	a1 f7       	brne	.-24     	; 0x3cec <itoa+0x1c>
    3d04:	16 f4       	brtc	.+4      	; 0x3d0a <itoa+0x3a>
    3d06:	5d e2       	ldi	r21, 0x2D	; 45
    3d08:	51 93       	st	Z+, r21
    3d0a:	10 82       	st	Z, r1
    3d0c:	c9 01       	movw	r24, r18
    3d0e:	0c 94 c3 20 	jmp	0x4186	; 0x4186 <strrev>

00003d12 <dtoa_prf>:
    3d12:	a9 e0       	ldi	r26, 0x09	; 9
    3d14:	b0 e0       	ldi	r27, 0x00	; 0
    3d16:	ef e8       	ldi	r30, 0x8F	; 143
    3d18:	fe e1       	ldi	r31, 0x1E	; 30
    3d1a:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <__prologue_saves__+0x8>
    3d1e:	6a 01       	movw	r12, r20
    3d20:	12 2f       	mov	r17, r18
    3d22:	a0 2e       	mov	r10, r16
    3d24:	be 2c       	mov	r11, r14
    3d26:	2b e3       	ldi	r18, 0x3B	; 59
    3d28:	20 17       	cp	r18, r16
    3d2a:	18 f4       	brcc	.+6      	; 0x3d32 <dtoa_prf+0x20>
    3d2c:	2c e3       	ldi	r18, 0x3C	; 60
    3d2e:	92 2e       	mov	r9, r18
    3d30:	02 c0       	rjmp	.+4      	; 0x3d36 <dtoa_prf+0x24>
    3d32:	90 2e       	mov	r9, r16
    3d34:	93 94       	inc	r9
    3d36:	ae 01       	movw	r20, r28
    3d38:	4f 5f       	subi	r20, 0xFF	; 255
    3d3a:	5f 4f       	sbci	r21, 0xFF	; 255
    3d3c:	27 e0       	ldi	r18, 0x07	; 7
    3d3e:	09 2d       	mov	r16, r9
    3d40:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <__ftoa_engine>
    3d44:	bc 01       	movw	r22, r24
    3d46:	89 81       	ldd	r24, Y+1	; 0x01
    3d48:	e8 2e       	mov	r14, r24
    3d4a:	ff 24       	eor	r15, r15
    3d4c:	c7 01       	movw	r24, r14
    3d4e:	89 70       	andi	r24, 0x09	; 9
    3d50:	90 70       	andi	r25, 0x00	; 0
    3d52:	01 97       	sbiw	r24, 0x01	; 1
    3d54:	11 f4       	brne	.+4      	; 0x3d5a <dtoa_prf+0x48>
    3d56:	ad e2       	ldi	r26, 0x2D	; 45
    3d58:	09 c0       	rjmp	.+18     	; 0x3d6c <dtoa_prf+0x5a>
    3d5a:	b1 fe       	sbrs	r11, 1
    3d5c:	02 c0       	rjmp	.+4      	; 0x3d62 <dtoa_prf+0x50>
    3d5e:	ab e2       	ldi	r26, 0x2B	; 43
    3d60:	05 c0       	rjmp	.+10     	; 0x3d6c <dtoa_prf+0x5a>
    3d62:	b0 fc       	sbrc	r11, 0
    3d64:	02 c0       	rjmp	.+4      	; 0x3d6a <dtoa_prf+0x58>
    3d66:	a0 e0       	ldi	r26, 0x00	; 0
    3d68:	01 c0       	rjmp	.+2      	; 0x3d6c <dtoa_prf+0x5a>
    3d6a:	a0 e2       	ldi	r26, 0x20	; 32
    3d6c:	e3 fe       	sbrs	r14, 3
    3d6e:	3b c0       	rjmp	.+118    	; 0x3de6 <dtoa_prf+0xd4>
    3d70:	aa 23       	and	r26, r26
    3d72:	11 f4       	brne	.+4      	; 0x3d78 <dtoa_prf+0x66>
    3d74:	23 e0       	ldi	r18, 0x03	; 3
    3d76:	01 c0       	rjmp	.+2      	; 0x3d7a <dtoa_prf+0x68>
    3d78:	24 e0       	ldi	r18, 0x04	; 4
    3d7a:	21 17       	cp	r18, r17
    3d7c:	10 f0       	brcs	.+4      	; 0x3d82 <dtoa_prf+0x70>
    3d7e:	20 e0       	ldi	r18, 0x00	; 0
    3d80:	02 c0       	rjmp	.+4      	; 0x3d86 <dtoa_prf+0x74>
    3d82:	12 1b       	sub	r17, r18
    3d84:	21 2f       	mov	r18, r17
    3d86:	eb 2c       	mov	r14, r11
    3d88:	b4 fe       	sbrs	r11, 4
    3d8a:	02 c0       	rjmp	.+4      	; 0x3d90 <dtoa_prf+0x7e>
    3d8c:	32 2f       	mov	r19, r18
    3d8e:	0a c0       	rjmp	.+20     	; 0x3da4 <dtoa_prf+0x92>
    3d90:	f6 01       	movw	r30, r12
    3d92:	32 2f       	mov	r19, r18
    3d94:	80 e2       	ldi	r24, 0x20	; 32
    3d96:	02 c0       	rjmp	.+4      	; 0x3d9c <dtoa_prf+0x8a>
    3d98:	81 93       	st	Z+, r24
    3d9a:	31 50       	subi	r19, 0x01	; 1
    3d9c:	33 23       	and	r19, r19
    3d9e:	e1 f7       	brne	.-8      	; 0x3d98 <dtoa_prf+0x86>
    3da0:	c2 0e       	add	r12, r18
    3da2:	d1 1c       	adc	r13, r1
    3da4:	aa 23       	and	r26, r26
    3da6:	19 f0       	breq	.+6      	; 0x3dae <dtoa_prf+0x9c>
    3da8:	f6 01       	movw	r30, r12
    3daa:	a1 93       	st	Z+, r26
    3dac:	6f 01       	movw	r12, r30
    3dae:	f6 01       	movw	r30, r12
    3db0:	31 96       	adiw	r30, 0x01	; 1
    3db2:	e2 fe       	sbrs	r14, 2
    3db4:	05 c0       	rjmp	.+10     	; 0x3dc0 <dtoa_prf+0xae>
    3db6:	9e e4       	ldi	r25, 0x4E	; 78
    3db8:	d6 01       	movw	r26, r12
    3dba:	9c 93       	st	X, r25
    3dbc:	81 e4       	ldi	r24, 0x41	; 65
    3dbe:	04 c0       	rjmp	.+8      	; 0x3dc8 <dtoa_prf+0xb6>
    3dc0:	9e e6       	ldi	r25, 0x6E	; 110
    3dc2:	d6 01       	movw	r26, r12
    3dc4:	9c 93       	st	X, r25
    3dc6:	81 e6       	ldi	r24, 0x61	; 97
    3dc8:	11 96       	adiw	r26, 0x01	; 1
    3dca:	8c 93       	st	X, r24
    3dcc:	91 83       	std	Z+1, r25	; 0x01
    3dce:	32 96       	adiw	r30, 0x02	; 2
    3dd0:	df 01       	movw	r26, r30
    3dd2:	83 2f       	mov	r24, r19
    3dd4:	90 e2       	ldi	r25, 0x20	; 32
    3dd6:	02 c0       	rjmp	.+4      	; 0x3ddc <dtoa_prf+0xca>
    3dd8:	9d 93       	st	X+, r25
    3dda:	81 50       	subi	r24, 0x01	; 1
    3ddc:	88 23       	and	r24, r24
    3dde:	e1 f7       	brne	.-8      	; 0x3dd8 <dtoa_prf+0xc6>
    3de0:	e3 0f       	add	r30, r19
    3de2:	f1 1d       	adc	r31, r1
    3de4:	40 c0       	rjmp	.+128    	; 0x3e66 <dtoa_prf+0x154>
    3de6:	e2 fe       	sbrs	r14, 2
    3de8:	42 c0       	rjmp	.+132    	; 0x3e6e <dtoa_prf+0x15c>
    3dea:	aa 23       	and	r26, r26
    3dec:	11 f4       	brne	.+4      	; 0x3df2 <dtoa_prf+0xe0>
    3dee:	23 e0       	ldi	r18, 0x03	; 3
    3df0:	01 c0       	rjmp	.+2      	; 0x3df4 <dtoa_prf+0xe2>
    3df2:	24 e0       	ldi	r18, 0x04	; 4
    3df4:	21 17       	cp	r18, r17
    3df6:	10 f0       	brcs	.+4      	; 0x3dfc <dtoa_prf+0xea>
    3df8:	20 e0       	ldi	r18, 0x00	; 0
    3dfa:	02 c0       	rjmp	.+4      	; 0x3e00 <dtoa_prf+0xee>
    3dfc:	12 1b       	sub	r17, r18
    3dfe:	21 2f       	mov	r18, r17
    3e00:	eb 2c       	mov	r14, r11
    3e02:	b4 fe       	sbrs	r11, 4
    3e04:	02 c0       	rjmp	.+4      	; 0x3e0a <dtoa_prf+0xf8>
    3e06:	92 2f       	mov	r25, r18
    3e08:	0a c0       	rjmp	.+20     	; 0x3e1e <dtoa_prf+0x10c>
    3e0a:	f6 01       	movw	r30, r12
    3e0c:	92 2f       	mov	r25, r18
    3e0e:	80 e2       	ldi	r24, 0x20	; 32
    3e10:	02 c0       	rjmp	.+4      	; 0x3e16 <dtoa_prf+0x104>
    3e12:	81 93       	st	Z+, r24
    3e14:	91 50       	subi	r25, 0x01	; 1
    3e16:	99 23       	and	r25, r25
    3e18:	e1 f7       	brne	.-8      	; 0x3e12 <dtoa_prf+0x100>
    3e1a:	c2 0e       	add	r12, r18
    3e1c:	d1 1c       	adc	r13, r1
    3e1e:	aa 23       	and	r26, r26
    3e20:	19 f0       	breq	.+6      	; 0x3e28 <dtoa_prf+0x116>
    3e22:	f6 01       	movw	r30, r12
    3e24:	a1 93       	st	Z+, r26
    3e26:	6f 01       	movw	r12, r30
    3e28:	f6 01       	movw	r30, r12
    3e2a:	31 96       	adiw	r30, 0x01	; 1
    3e2c:	e2 fe       	sbrs	r14, 2
    3e2e:	08 c0       	rjmp	.+16     	; 0x3e40 <dtoa_prf+0x12e>
    3e30:	89 e4       	ldi	r24, 0x49	; 73
    3e32:	d6 01       	movw	r26, r12
    3e34:	8c 93       	st	X, r24
    3e36:	8e e4       	ldi	r24, 0x4E	; 78
    3e38:	11 96       	adiw	r26, 0x01	; 1
    3e3a:	8c 93       	st	X, r24
    3e3c:	86 e4       	ldi	r24, 0x46	; 70
    3e3e:	07 c0       	rjmp	.+14     	; 0x3e4e <dtoa_prf+0x13c>
    3e40:	89 e6       	ldi	r24, 0x69	; 105
    3e42:	d6 01       	movw	r26, r12
    3e44:	8c 93       	st	X, r24
    3e46:	8e e6       	ldi	r24, 0x6E	; 110
    3e48:	11 96       	adiw	r26, 0x01	; 1
    3e4a:	8c 93       	st	X, r24
    3e4c:	86 e6       	ldi	r24, 0x66	; 102
    3e4e:	81 83       	std	Z+1, r24	; 0x01
    3e50:	32 96       	adiw	r30, 0x02	; 2
    3e52:	df 01       	movw	r26, r30
    3e54:	89 2f       	mov	r24, r25
    3e56:	20 e2       	ldi	r18, 0x20	; 32
    3e58:	02 c0       	rjmp	.+4      	; 0x3e5e <dtoa_prf+0x14c>
    3e5a:	2d 93       	st	X+, r18
    3e5c:	81 50       	subi	r24, 0x01	; 1
    3e5e:	88 23       	and	r24, r24
    3e60:	e1 f7       	brne	.-8      	; 0x3e5a <dtoa_prf+0x148>
    3e62:	e9 0f       	add	r30, r25
    3e64:	f1 1d       	adc	r31, r1
    3e66:	10 82       	st	Z, r1
    3e68:	2e ef       	ldi	r18, 0xFE	; 254
    3e6a:	3f ef       	ldi	r19, 0xFF	; 255
    3e6c:	af c0       	rjmp	.+350    	; 0x3fcc <dtoa_prf+0x2ba>
    3e6e:	16 16       	cp	r1, r22
    3e70:	17 06       	cpc	r1, r23
    3e72:	1c f0       	brlt	.+6      	; 0x3e7a <dtoa_prf+0x168>
    3e74:	41 e0       	ldi	r20, 0x01	; 1
    3e76:	50 e0       	ldi	r21, 0x00	; 0
    3e78:	03 c0       	rjmp	.+6      	; 0x3e80 <dtoa_prf+0x16e>
    3e7a:	ab 01       	movw	r20, r22
    3e7c:	4f 5f       	subi	r20, 0xFF	; 255
    3e7e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e80:	aa 20       	and	r10, r10
    3e82:	19 f4       	brne	.+6      	; 0x3e8a <dtoa_prf+0x178>
    3e84:	80 e0       	ldi	r24, 0x00	; 0
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	03 c0       	rjmp	.+6      	; 0x3e90 <dtoa_prf+0x17e>
    3e8a:	8a 2d       	mov	r24, r10
    3e8c:	90 e0       	ldi	r25, 0x00	; 0
    3e8e:	01 96       	adiw	r24, 0x01	; 1
    3e90:	20 e0       	ldi	r18, 0x00	; 0
    3e92:	30 e0       	ldi	r19, 0x00	; 0
    3e94:	aa 23       	and	r26, r26
    3e96:	11 f0       	breq	.+4      	; 0x3e9c <dtoa_prf+0x18a>
    3e98:	21 e0       	ldi	r18, 0x01	; 1
    3e9a:	30 e0       	ldi	r19, 0x00	; 0
    3e9c:	24 0f       	add	r18, r20
    3e9e:	35 1f       	adc	r19, r21
    3ea0:	28 0f       	add	r18, r24
    3ea2:	39 1f       	adc	r19, r25
    3ea4:	81 2f       	mov	r24, r17
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	28 17       	cp	r18, r24
    3eaa:	39 07       	cpc	r19, r25
    3eac:	14 f0       	brlt	.+4      	; 0x3eb2 <dtoa_prf+0x1a0>
    3eae:	20 e0       	ldi	r18, 0x00	; 0
    3eb0:	02 c0       	rjmp	.+4      	; 0x3eb6 <dtoa_prf+0x1a4>
    3eb2:	12 1b       	sub	r17, r18
    3eb4:	21 2f       	mov	r18, r17
    3eb6:	4b 2d       	mov	r20, r11
    3eb8:	50 e0       	ldi	r21, 0x00	; 0
    3eba:	ca 01       	movw	r24, r20
    3ebc:	80 71       	andi	r24, 0x10	; 16
    3ebe:	90 70       	andi	r25, 0x00	; 0
    3ec0:	b4 fc       	sbrc	r11, 4
    3ec2:	0d c0       	rjmp	.+26     	; 0x3ede <dtoa_prf+0x1cc>
    3ec4:	b3 fc       	sbrc	r11, 3
    3ec6:	0b c0       	rjmp	.+22     	; 0x3ede <dtoa_prf+0x1cc>
    3ec8:	f6 01       	movw	r30, r12
    3eca:	32 2f       	mov	r19, r18
    3ecc:	40 e2       	ldi	r20, 0x20	; 32
    3ece:	02 c0       	rjmp	.+4      	; 0x3ed4 <dtoa_prf+0x1c2>
    3ed0:	41 93       	st	Z+, r20
    3ed2:	31 50       	subi	r19, 0x01	; 1
    3ed4:	33 23       	and	r19, r19
    3ed6:	e1 f7       	brne	.-8      	; 0x3ed0 <dtoa_prf+0x1be>
    3ed8:	c2 0e       	add	r12, r18
    3eda:	d1 1c       	adc	r13, r1
    3edc:	01 c0       	rjmp	.+2      	; 0x3ee0 <dtoa_prf+0x1ce>
    3ede:	32 2f       	mov	r19, r18
    3ee0:	aa 23       	and	r26, r26
    3ee2:	19 f0       	breq	.+6      	; 0x3eea <dtoa_prf+0x1d8>
    3ee4:	f6 01       	movw	r30, r12
    3ee6:	a1 93       	st	Z+, r26
    3ee8:	6f 01       	movw	r12, r30
    3eea:	89 2b       	or	r24, r25
    3eec:	11 f0       	breq	.+4      	; 0x3ef2 <dtoa_prf+0x1e0>
    3eee:	13 2f       	mov	r17, r19
    3ef0:	0a c0       	rjmp	.+20     	; 0x3f06 <dtoa_prf+0x1f4>
    3ef2:	f6 01       	movw	r30, r12
    3ef4:	13 2f       	mov	r17, r19
    3ef6:	80 e3       	ldi	r24, 0x30	; 48
    3ef8:	02 c0       	rjmp	.+4      	; 0x3efe <dtoa_prf+0x1ec>
    3efa:	81 93       	st	Z+, r24
    3efc:	11 50       	subi	r17, 0x01	; 1
    3efe:	11 23       	and	r17, r17
    3f00:	e1 f7       	brne	.-8      	; 0x3efa <dtoa_prf+0x1e8>
    3f02:	c3 0e       	add	r12, r19
    3f04:	d1 1c       	adc	r13, r1
    3f06:	09 2d       	mov	r16, r9
    3f08:	06 0f       	add	r16, r22
    3f0a:	ba 80       	ldd	r11, Y+2	; 0x02
    3f0c:	90 e1       	ldi	r25, 0x10	; 16
    3f0e:	89 2e       	mov	r8, r25
    3f10:	91 2c       	mov	r9, r1
    3f12:	8e 20       	and	r8, r14
    3f14:	9f 20       	and	r9, r15
    3f16:	e4 fe       	sbrs	r14, 4
    3f18:	04 c0       	rjmp	.+8      	; 0x3f22 <dtoa_prf+0x210>
    3f1a:	f1 e3       	ldi	r31, 0x31	; 49
    3f1c:	bf 16       	cp	r11, r31
    3f1e:	09 f4       	brne	.+2      	; 0x3f22 <dtoa_prf+0x210>
    3f20:	01 50       	subi	r16, 0x01	; 1
    3f22:	10 16       	cp	r1, r16
    3f24:	14 f0       	brlt	.+4      	; 0x3f2a <dtoa_prf+0x218>
    3f26:	01 e0       	ldi	r16, 0x01	; 1
    3f28:	03 c0       	rjmp	.+6      	; 0x3f30 <dtoa_prf+0x21e>
    3f2a:	09 30       	cpi	r16, 0x09	; 9
    3f2c:	08 f0       	brcs	.+2      	; 0x3f30 <dtoa_prf+0x21e>
    3f2e:	08 e0       	ldi	r16, 0x08	; 8
    3f30:	9b 01       	movw	r18, r22
    3f32:	77 ff       	sbrs	r23, 7
    3f34:	02 c0       	rjmp	.+4      	; 0x3f3a <dtoa_prf+0x228>
    3f36:	20 e0       	ldi	r18, 0x00	; 0
    3f38:	30 e0       	ldi	r19, 0x00	; 0
    3f3a:	cb 01       	movw	r24, r22
    3f3c:	01 96       	adiw	r24, 0x01	; 1
    3f3e:	82 1b       	sub	r24, r18
    3f40:	93 0b       	sbc	r25, r19
    3f42:	fe 01       	movw	r30, r28
    3f44:	31 96       	adiw	r30, 0x01	; 1
    3f46:	e8 0f       	add	r30, r24
    3f48:	f9 1f       	adc	r31, r25
    3f4a:	8e e2       	ldi	r24, 0x2E	; 46
    3f4c:	f8 2e       	mov	r15, r24
    3f4e:	3b 01       	movw	r6, r22
    3f50:	60 1a       	sub	r6, r16
    3f52:	71 08       	sbc	r7, r1
    3f54:	8a 2d       	mov	r24, r10
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	44 27       	eor	r20, r20
    3f5a:	55 27       	eor	r21, r21
    3f5c:	48 1b       	sub	r20, r24
    3f5e:	59 0b       	sbc	r21, r25
    3f60:	8f ef       	ldi	r24, 0xFF	; 255
    3f62:	2f 3f       	cpi	r18, 0xFF	; 255
    3f64:	38 07       	cpc	r19, r24
    3f66:	19 f4       	brne	.+6      	; 0x3f6e <dtoa_prf+0x25c>
    3f68:	d6 01       	movw	r26, r12
    3f6a:	fd 92       	st	X+, r15
    3f6c:	6d 01       	movw	r12, r26
    3f6e:	62 17       	cp	r22, r18
    3f70:	73 07       	cpc	r23, r19
    3f72:	2c f0       	brlt	.+10     	; 0x3f7e <dtoa_prf+0x26c>
    3f74:	62 16       	cp	r6, r18
    3f76:	73 06       	cpc	r7, r19
    3f78:	14 f4       	brge	.+4      	; 0x3f7e <dtoa_prf+0x26c>
    3f7a:	80 81       	ld	r24, Z
    3f7c:	01 c0       	rjmp	.+2      	; 0x3f80 <dtoa_prf+0x26e>
    3f7e:	80 e3       	ldi	r24, 0x30	; 48
    3f80:	21 50       	subi	r18, 0x01	; 1
    3f82:	30 40       	sbci	r19, 0x00	; 0
    3f84:	31 96       	adiw	r30, 0x01	; 1
    3f86:	24 17       	cp	r18, r20
    3f88:	35 07       	cpc	r19, r21
    3f8a:	24 f0       	brlt	.+8      	; 0x3f94 <dtoa_prf+0x282>
    3f8c:	d6 01       	movw	r26, r12
    3f8e:	8d 93       	st	X+, r24
    3f90:	6d 01       	movw	r12, r26
    3f92:	e6 cf       	rjmp	.-52     	; 0x3f60 <dtoa_prf+0x24e>
    3f94:	26 17       	cp	r18, r22
    3f96:	37 07       	cpc	r19, r23
    3f98:	49 f4       	brne	.+18     	; 0x3fac <dtoa_prf+0x29a>
    3f9a:	b5 e3       	ldi	r27, 0x35	; 53
    3f9c:	bb 15       	cp	r27, r11
    3f9e:	28 f0       	brcs	.+10     	; 0x3faa <dtoa_prf+0x298>
    3fa0:	bb 16       	cp	r11, r27
    3fa2:	21 f4       	brne	.+8      	; 0x3fac <dtoa_prf+0x29a>
    3fa4:	81 14       	cp	r8, r1
    3fa6:	91 04       	cpc	r9, r1
    3fa8:	09 f4       	brne	.+2      	; 0x3fac <dtoa_prf+0x29a>
    3faa:	81 e3       	ldi	r24, 0x31	; 49
    3fac:	f6 01       	movw	r30, r12
    3fae:	81 93       	st	Z+, r24
    3fb0:	d6 01       	movw	r26, r12
    3fb2:	81 2f       	mov	r24, r17
    3fb4:	90 e2       	ldi	r25, 0x20	; 32
    3fb6:	02 c0       	rjmp	.+4      	; 0x3fbc <dtoa_prf+0x2aa>
    3fb8:	9c 93       	st	X, r25
    3fba:	81 50       	subi	r24, 0x01	; 1
    3fbc:	11 96       	adiw	r26, 0x01	; 1
    3fbe:	88 23       	and	r24, r24
    3fc0:	d9 f7       	brne	.-10     	; 0x3fb8 <dtoa_prf+0x2a6>
    3fc2:	e1 0f       	add	r30, r17
    3fc4:	f1 1d       	adc	r31, r1
    3fc6:	10 82       	st	Z, r1
    3fc8:	20 e0       	ldi	r18, 0x00	; 0
    3fca:	30 e0       	ldi	r19, 0x00	; 0
    3fcc:	c9 01       	movw	r24, r18
    3fce:	29 96       	adiw	r28, 0x09	; 9
    3fd0:	ee e0       	ldi	r30, 0x0E	; 14
    3fd2:	0c 94 30 1e 	jmp	0x3c60	; 0x3c60 <__epilogue_restores__+0x8>

00003fd6 <__ftoa_engine>:
    3fd6:	28 30       	cpi	r18, 0x08	; 8
    3fd8:	08 f0       	brcs	.+2      	; 0x3fdc <__ftoa_engine+0x6>
    3fda:	27 e0       	ldi	r18, 0x07	; 7
    3fdc:	33 27       	eor	r19, r19
    3fde:	da 01       	movw	r26, r20
    3fe0:	99 0f       	add	r25, r25
    3fe2:	31 1d       	adc	r19, r1
    3fe4:	87 fd       	sbrc	r24, 7
    3fe6:	91 60       	ori	r25, 0x01	; 1
    3fe8:	00 96       	adiw	r24, 0x00	; 0
    3fea:	61 05       	cpc	r22, r1
    3fec:	71 05       	cpc	r23, r1
    3fee:	39 f4       	brne	.+14     	; 0x3ffe <__ftoa_engine+0x28>
    3ff0:	32 60       	ori	r19, 0x02	; 2
    3ff2:	2e 5f       	subi	r18, 0xFE	; 254
    3ff4:	3d 93       	st	X+, r19
    3ff6:	30 e3       	ldi	r19, 0x30	; 48
    3ff8:	2a 95       	dec	r18
    3ffa:	e1 f7       	brne	.-8      	; 0x3ff4 <__ftoa_engine+0x1e>
    3ffc:	08 95       	ret
    3ffe:	9f 3f       	cpi	r25, 0xFF	; 255
    4000:	30 f0       	brcs	.+12     	; 0x400e <__ftoa_engine+0x38>
    4002:	80 38       	cpi	r24, 0x80	; 128
    4004:	71 05       	cpc	r23, r1
    4006:	61 05       	cpc	r22, r1
    4008:	09 f0       	breq	.+2      	; 0x400c <__ftoa_engine+0x36>
    400a:	3c 5f       	subi	r19, 0xFC	; 252
    400c:	3c 5f       	subi	r19, 0xFC	; 252
    400e:	3d 93       	st	X+, r19
    4010:	91 30       	cpi	r25, 0x01	; 1
    4012:	08 f0       	brcs	.+2      	; 0x4016 <__ftoa_engine+0x40>
    4014:	80 68       	ori	r24, 0x80	; 128
    4016:	91 1d       	adc	r25, r1
    4018:	df 93       	push	r29
    401a:	cf 93       	push	r28
    401c:	1f 93       	push	r17
    401e:	0f 93       	push	r16
    4020:	ff 92       	push	r15
    4022:	ef 92       	push	r14
    4024:	19 2f       	mov	r17, r25
    4026:	98 7f       	andi	r25, 0xF8	; 248
    4028:	96 95       	lsr	r25
    402a:	e9 2f       	mov	r30, r25
    402c:	96 95       	lsr	r25
    402e:	96 95       	lsr	r25
    4030:	e9 0f       	add	r30, r25
    4032:	ff 27       	eor	r31, r31
    4034:	e2 55       	subi	r30, 0x52	; 82
    4036:	ff 4f       	sbci	r31, 0xFF	; 255
    4038:	99 27       	eor	r25, r25
    403a:	33 27       	eor	r19, r19
    403c:	ee 24       	eor	r14, r14
    403e:	ff 24       	eor	r15, r15
    4040:	a7 01       	movw	r20, r14
    4042:	e7 01       	movw	r28, r14
    4044:	05 90       	lpm	r0, Z+
    4046:	08 94       	sec
    4048:	07 94       	ror	r0
    404a:	28 f4       	brcc	.+10     	; 0x4056 <__ftoa_engine+0x80>
    404c:	36 0f       	add	r19, r22
    404e:	e7 1e       	adc	r14, r23
    4050:	f8 1e       	adc	r15, r24
    4052:	49 1f       	adc	r20, r25
    4054:	51 1d       	adc	r21, r1
    4056:	66 0f       	add	r22, r22
    4058:	77 1f       	adc	r23, r23
    405a:	88 1f       	adc	r24, r24
    405c:	99 1f       	adc	r25, r25
    405e:	06 94       	lsr	r0
    4060:	a1 f7       	brne	.-24     	; 0x404a <__ftoa_engine+0x74>
    4062:	05 90       	lpm	r0, Z+
    4064:	07 94       	ror	r0
    4066:	28 f4       	brcc	.+10     	; 0x4072 <__ftoa_engine+0x9c>
    4068:	e7 0e       	add	r14, r23
    406a:	f8 1e       	adc	r15, r24
    406c:	49 1f       	adc	r20, r25
    406e:	56 1f       	adc	r21, r22
    4070:	c1 1d       	adc	r28, r1
    4072:	77 0f       	add	r23, r23
    4074:	88 1f       	adc	r24, r24
    4076:	99 1f       	adc	r25, r25
    4078:	66 1f       	adc	r22, r22
    407a:	06 94       	lsr	r0
    407c:	a1 f7       	brne	.-24     	; 0x4066 <__ftoa_engine+0x90>
    407e:	05 90       	lpm	r0, Z+
    4080:	07 94       	ror	r0
    4082:	28 f4       	brcc	.+10     	; 0x408e <__ftoa_engine+0xb8>
    4084:	f8 0e       	add	r15, r24
    4086:	49 1f       	adc	r20, r25
    4088:	56 1f       	adc	r21, r22
    408a:	c7 1f       	adc	r28, r23
    408c:	d1 1d       	adc	r29, r1
    408e:	88 0f       	add	r24, r24
    4090:	99 1f       	adc	r25, r25
    4092:	66 1f       	adc	r22, r22
    4094:	77 1f       	adc	r23, r23
    4096:	06 94       	lsr	r0
    4098:	a1 f7       	brne	.-24     	; 0x4082 <__ftoa_engine+0xac>
    409a:	05 90       	lpm	r0, Z+
    409c:	07 94       	ror	r0
    409e:	20 f4       	brcc	.+8      	; 0x40a8 <__ftoa_engine+0xd2>
    40a0:	49 0f       	add	r20, r25
    40a2:	56 1f       	adc	r21, r22
    40a4:	c7 1f       	adc	r28, r23
    40a6:	d8 1f       	adc	r29, r24
    40a8:	99 0f       	add	r25, r25
    40aa:	66 1f       	adc	r22, r22
    40ac:	77 1f       	adc	r23, r23
    40ae:	88 1f       	adc	r24, r24
    40b0:	06 94       	lsr	r0
    40b2:	a9 f7       	brne	.-22     	; 0x409e <__ftoa_engine+0xc8>
    40b4:	84 91       	lpm	r24, Z+
    40b6:	10 95       	com	r17
    40b8:	17 70       	andi	r17, 0x07	; 7
    40ba:	41 f0       	breq	.+16     	; 0x40cc <__ftoa_engine+0xf6>
    40bc:	d6 95       	lsr	r29
    40be:	c7 95       	ror	r28
    40c0:	57 95       	ror	r21
    40c2:	47 95       	ror	r20
    40c4:	f7 94       	ror	r15
    40c6:	e7 94       	ror	r14
    40c8:	1a 95       	dec	r17
    40ca:	c1 f7       	brne	.-16     	; 0x40bc <__ftoa_engine+0xe6>
    40cc:	e4 e5       	ldi	r30, 0x54	; 84
    40ce:	f0 e0       	ldi	r31, 0x00	; 0
    40d0:	68 94       	set
    40d2:	15 90       	lpm	r1, Z+
    40d4:	15 91       	lpm	r17, Z+
    40d6:	35 91       	lpm	r19, Z+
    40d8:	65 91       	lpm	r22, Z+
    40da:	95 91       	lpm	r25, Z+
    40dc:	05 90       	lpm	r0, Z+
    40de:	7f e2       	ldi	r23, 0x2F	; 47
    40e0:	73 95       	inc	r23
    40e2:	e1 18       	sub	r14, r1
    40e4:	f1 0a       	sbc	r15, r17
    40e6:	43 0b       	sbc	r20, r19
    40e8:	56 0b       	sbc	r21, r22
    40ea:	c9 0b       	sbc	r28, r25
    40ec:	d0 09       	sbc	r29, r0
    40ee:	c0 f7       	brcc	.-16     	; 0x40e0 <__ftoa_engine+0x10a>
    40f0:	e1 0c       	add	r14, r1
    40f2:	f1 1e       	adc	r15, r17
    40f4:	43 1f       	adc	r20, r19
    40f6:	56 1f       	adc	r21, r22
    40f8:	c9 1f       	adc	r28, r25
    40fa:	d0 1d       	adc	r29, r0
    40fc:	7e f4       	brtc	.+30     	; 0x411c <__ftoa_engine+0x146>
    40fe:	70 33       	cpi	r23, 0x30	; 48
    4100:	11 f4       	brne	.+4      	; 0x4106 <__ftoa_engine+0x130>
    4102:	8a 95       	dec	r24
    4104:	e6 cf       	rjmp	.-52     	; 0x40d2 <__ftoa_engine+0xfc>
    4106:	e8 94       	clt
    4108:	01 50       	subi	r16, 0x01	; 1
    410a:	30 f0       	brcs	.+12     	; 0x4118 <__ftoa_engine+0x142>
    410c:	08 0f       	add	r16, r24
    410e:	0a f4       	brpl	.+2      	; 0x4112 <__ftoa_engine+0x13c>
    4110:	00 27       	eor	r16, r16
    4112:	02 17       	cp	r16, r18
    4114:	08 f4       	brcc	.+2      	; 0x4118 <__ftoa_engine+0x142>
    4116:	20 2f       	mov	r18, r16
    4118:	23 95       	inc	r18
    411a:	02 2f       	mov	r16, r18
    411c:	7a 33       	cpi	r23, 0x3A	; 58
    411e:	28 f0       	brcs	.+10     	; 0x412a <__ftoa_engine+0x154>
    4120:	79 e3       	ldi	r23, 0x39	; 57
    4122:	7d 93       	st	X+, r23
    4124:	2a 95       	dec	r18
    4126:	e9 f7       	brne	.-6      	; 0x4122 <__ftoa_engine+0x14c>
    4128:	10 c0       	rjmp	.+32     	; 0x414a <__ftoa_engine+0x174>
    412a:	7d 93       	st	X+, r23
    412c:	2a 95       	dec	r18
    412e:	89 f6       	brne	.-94     	; 0x40d2 <__ftoa_engine+0xfc>
    4130:	06 94       	lsr	r0
    4132:	97 95       	ror	r25
    4134:	67 95       	ror	r22
    4136:	37 95       	ror	r19
    4138:	17 95       	ror	r17
    413a:	17 94       	ror	r1
    413c:	e1 18       	sub	r14, r1
    413e:	f1 0a       	sbc	r15, r17
    4140:	43 0b       	sbc	r20, r19
    4142:	56 0b       	sbc	r21, r22
    4144:	c9 0b       	sbc	r28, r25
    4146:	d0 09       	sbc	r29, r0
    4148:	98 f0       	brcs	.+38     	; 0x4170 <__ftoa_engine+0x19a>
    414a:	23 95       	inc	r18
    414c:	7e 91       	ld	r23, -X
    414e:	73 95       	inc	r23
    4150:	7a 33       	cpi	r23, 0x3A	; 58
    4152:	08 f0       	brcs	.+2      	; 0x4156 <__ftoa_engine+0x180>
    4154:	70 e3       	ldi	r23, 0x30	; 48
    4156:	7c 93       	st	X, r23
    4158:	20 13       	cpse	r18, r16
    415a:	b8 f7       	brcc	.-18     	; 0x414a <__ftoa_engine+0x174>
    415c:	7e 91       	ld	r23, -X
    415e:	70 61       	ori	r23, 0x10	; 16
    4160:	7d 93       	st	X+, r23
    4162:	30 f0       	brcs	.+12     	; 0x4170 <__ftoa_engine+0x19a>
    4164:	83 95       	inc	r24
    4166:	71 e3       	ldi	r23, 0x31	; 49
    4168:	7d 93       	st	X+, r23
    416a:	70 e3       	ldi	r23, 0x30	; 48
    416c:	2a 95       	dec	r18
    416e:	e1 f7       	brne	.-8      	; 0x4168 <__ftoa_engine+0x192>
    4170:	11 24       	eor	r1, r1
    4172:	ef 90       	pop	r14
    4174:	ff 90       	pop	r15
    4176:	0f 91       	pop	r16
    4178:	1f 91       	pop	r17
    417a:	cf 91       	pop	r28
    417c:	df 91       	pop	r29
    417e:	99 27       	eor	r25, r25
    4180:	87 fd       	sbrc	r24, 7
    4182:	90 95       	com	r25
    4184:	08 95       	ret

00004186 <strrev>:
    4186:	dc 01       	movw	r26, r24
    4188:	fc 01       	movw	r30, r24
    418a:	67 2f       	mov	r22, r23
    418c:	71 91       	ld	r23, Z+
    418e:	77 23       	and	r23, r23
    4190:	e1 f7       	brne	.-8      	; 0x418a <strrev+0x4>
    4192:	32 97       	sbiw	r30, 0x02	; 2
    4194:	04 c0       	rjmp	.+8      	; 0x419e <strrev+0x18>
    4196:	7c 91       	ld	r23, X
    4198:	6d 93       	st	X+, r22
    419a:	70 83       	st	Z, r23
    419c:	62 91       	ld	r22, -Z
    419e:	ae 17       	cp	r26, r30
    41a0:	bf 07       	cpc	r27, r31
    41a2:	c8 f3       	brcs	.-14     	; 0x4196 <strrev+0x10>
    41a4:	08 95       	ret

000041a6 <_exit>:
    41a6:	f8 94       	cli

000041a8 <__stop_program>:
    41a8:	ff cf       	rjmp	.-2      	; 0x41a8 <__stop_program>
